// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    /// <summary>
    /// Certificate fields, may accept template substitutions
    /// </summary>
    public class CertificateTemplateParameters : CertificateTemplate, IParsable {
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The issuer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateIssuer? Issuer { get; set; }
#nullable restore
#else
        public CertificateIssuer Issuer { get; set; }
#endif
        /// <summary>Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JwkProperties? KeyProperties { get; set; }
#nullable restore
#else
        public JwkProperties KeyProperties { get; set; }
#endif
        /// <summary>The keyStorePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyStorePath { get; set; }
#nullable restore
#else
        public string KeyStorePath { get; set; }
#endif
        /// <summary>The lifetimeTrigger property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateLifetimeTrigger? LifetimeTrigger { get; set; }
#nullable restore
#else
        public CertificateLifetimeTrigger LifetimeTrigger { get; set; }
#endif
        /// <summary>Keep using the same key version if exists</summary>
        public bool? ReuseKey { get; set; }
        /// <summary>The subject property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateSubject? Subject { get; set; }
#nullable restore
#else
        public CertificateSubject Subject { get; set; }
#endif
        /// <summary>The subjectAlternativeNames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateSubjectAlternativeNames? SubjectAlternativeNames { get; set; }
#nullable restore
#else
        public CertificateSubjectAlternativeNames SubjectAlternativeNames { get; set; }
#endif
        /// <summary>The usage property</summary>
        public CertificateUsage? Usage { get; set; }
        /// <summary>The validity_months property</summary>
        public int? ValidityMonths { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CertificateTemplateParameters CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CertificateTemplateParameters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"displayName", n => { DisplayName = n.GetStringValue(); } },
                {"issuer", n => { Issuer = n.GetObjectValue<CertificateIssuer>(CertificateIssuer.CreateFromDiscriminatorValue); } },
                {"keyProperties", n => { KeyProperties = n.GetObjectValue<JwkProperties>(JwkProperties.CreateFromDiscriminatorValue); } },
                {"keyStorePath", n => { KeyStorePath = n.GetStringValue(); } },
                {"lifetimeTrigger", n => { LifetimeTrigger = n.GetObjectValue<CertificateLifetimeTrigger>(CertificateLifetimeTrigger.CreateFromDiscriminatorValue); } },
                {"reuse_key", n => { ReuseKey = n.GetBoolValue(); } },
                {"subject", n => { Subject = n.GetObjectValue<CertificateSubject>(CertificateSubject.CreateFromDiscriminatorValue); } },
                {"subjectAlternativeNames", n => { SubjectAlternativeNames = n.GetObjectValue<CertificateSubjectAlternativeNames>(CertificateSubjectAlternativeNames.CreateFromDiscriminatorValue); } },
                {"usage", n => { Usage = n.GetEnumValue<CertificateUsage>(); } },
                {"validity_months", n => { ValidityMonths = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<CertificateIssuer>("issuer", Issuer);
            writer.WriteObjectValue<JwkProperties>("keyProperties", KeyProperties);
            writer.WriteStringValue("keyStorePath", KeyStorePath);
            writer.WriteObjectValue<CertificateLifetimeTrigger>("lifetimeTrigger", LifetimeTrigger);
            writer.WriteBoolValue("reuse_key", ReuseKey);
            writer.WriteObjectValue<CertificateSubject>("subject", Subject);
            writer.WriteObjectValue<CertificateSubjectAlternativeNames>("subjectAlternativeNames", SubjectAlternativeNames);
            writer.WriteEnumValue<CertificateUsage>("usage", Usage);
            writer.WriteIntValue("validity_months", ValidityMonths);
        }
    }
}
