// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class CertificateEnrollmentReplyFinalize : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>header section of the certificate claims, in JWT format, base64url encoded</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JwtHeader { get; set; }
#nullable restore
#else
        public string JwtHeader { get; set; }
#endif
        /// <summary>signature section of the jwt, serves as proof of confirmation finalize the enrollment and being issued a certificate, with header and signature, signed with the key pair with the public key in the same request</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JwtSignature { get; set; }
#nullable restore
#else
        public string JwtSignature { get; set; }
#endif
        /// <summary>public key encoded in pem</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicKeyPem { get; set; }
#nullable restore
#else
        public string PublicKeyPem { get; set; }
#endif
        /// <summary>
        /// Instantiates a new CertificateEnrollmentReplyFinalize and sets the default values.
        /// </summary>
        public CertificateEnrollmentReplyFinalize() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CertificateEnrollmentReplyFinalize CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CertificateEnrollmentReplyFinalize();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"jwtHeader", n => { JwtHeader = n.GetStringValue(); } },
                {"jwtSignature", n => { JwtSignature = n.GetStringValue(); } },
                {"publicKeyPem", n => { PublicKeyPem = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("jwtHeader", JwtHeader);
            writer.WriteStringValue("jwtSignature", JwtSignature);
            writer.WriteStringValue("publicKeyPem", PublicKeyPem);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
