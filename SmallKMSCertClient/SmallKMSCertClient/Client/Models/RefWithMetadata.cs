// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class RefWithMetadata : Ref, IParsable {
        /// <summary>Time when the object was deleted</summary>
        public DateTimeOffset? Deleted { get; set; }
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RefWithMetadata_metadata? Metadata { get; set; }
#nullable restore
#else
        public RefWithMetadata_metadata Metadata { get; set; }
#endif
        /// <summary>The namespaceType property</summary>
        public NamespaceTypeShortName? NamespaceType { get; set; }
        /// <summary>Time when the object was last updated</summary>
        public DateTimeOffset? Updated { get; set; }
        /// <summary>Unique ID of the user who last updated the object</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedBy { get; set; }
#nullable restore
#else
        public string UpdatedBy { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new RefWithMetadata CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RefWithMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"deleted", n => { Deleted = n.GetDateTimeOffsetValue(); } },
                {"metadata", n => { Metadata = n.GetObjectValue<RefWithMetadata_metadata>(RefWithMetadata_metadata.CreateFromDiscriminatorValue); } },
                {"namespaceType", n => { NamespaceType = n.GetEnumValue<NamespaceTypeShortName>(); } },
                {"updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
                {"updatedBy", n => { UpdatedBy = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("deleted", Deleted);
            writer.WriteObjectValue<RefWithMetadata_metadata>("metadata", Metadata);
            writer.WriteEnumValue<NamespaceTypeShortName>("namespaceType", NamespaceType);
            writer.WriteDateTimeOffsetValue("updated", Updated);
            writer.WriteStringValue("updatedBy", UpdatedBy);
        }
    }
}
