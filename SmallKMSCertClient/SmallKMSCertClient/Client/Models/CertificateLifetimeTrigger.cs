// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class CertificateLifetimeTrigger : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The days_before_expiry property</summary>
        public int? DaysBeforeExpiry { get; set; }
        /// <summary>The lifetime_percentage property</summary>
        public int? LifetimePercentage { get; set; }
        /// <summary>
        /// Instantiates a new CertificateLifetimeTrigger and sets the default values.
        /// </summary>
        public CertificateLifetimeTrigger() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CertificateLifetimeTrigger CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CertificateLifetimeTrigger();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"days_before_expiry", n => { DaysBeforeExpiry = n.GetIntValue(); } },
                {"lifetime_percentage", n => { LifetimePercentage = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("days_before_expiry", DaysBeforeExpiry);
            writer.WriteIntValue("lifetime_percentage", LifetimePercentage);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
