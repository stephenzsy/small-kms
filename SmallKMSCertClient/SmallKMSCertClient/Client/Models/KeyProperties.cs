// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class KeyProperties : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The crv property</summary>
        public CurveName? Crv { get; set; }
        /// <summary>The key_size property</summary>
        public int? KeySize { get; set; }
        /// <summary>The kty property</summary>
        public KeyType? Kty { get; set; }
        /// <summary>Keep using the same key version if exists</summary>
        public bool? ReuseKey { get; set; }
        /// <summary>
        /// Instantiates a new KeyProperties and sets the default values.
        /// </summary>
        public KeyProperties() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KeyProperties CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KeyProperties();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"crv", n => { Crv = n.GetEnumValue<CurveName>(); } },
                {"key_size", n => { KeySize = n.GetIntValue(); } },
                {"kty", n => { Kty = n.GetEnumValue<KeyType>(); } },
                {"reuse_key", n => { ReuseKey = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<CurveName>("crv", Crv);
            writer.WriteIntValue("key_size", KeySize);
            writer.WriteEnumValue<KeyType>("kty", Kty);
            writer.WriteBoolValue("reuse_key", ReuseKey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
