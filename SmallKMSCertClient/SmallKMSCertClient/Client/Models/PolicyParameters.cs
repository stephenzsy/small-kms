// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class PolicyParameters : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The certAadAppCred property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateAadAppCredPolicyParameters? CertAadAppCred { get; set; }
#nullable restore
#else
        public CertificateAadAppCredPolicyParameters CertAadAppCred { get; set; }
#endif
        /// <summary>The certEnroll property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateEnrollPolicyParameters? CertEnroll { get; set; }
#nullable restore
#else
        public CertificateEnrollPolicyParameters CertEnroll { get; set; }
#endif
        /// <summary>The certRequest property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CertificateRequestPolicyParameters? CertRequest { get; set; }
#nullable restore
#else
        public CertificateRequestPolicyParameters CertRequest { get; set; }
#endif
        /// <summary>The policyType property</summary>
        public SmallKms.Client.Models.PolicyType? PolicyType { get; set; }
        /// <summary>
        /// Instantiates a new PolicyParameters and sets the default values.
        /// </summary>
        public PolicyParameters() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PolicyParameters CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PolicyParameters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"certAadAppCred", n => { CertAadAppCred = n.GetObjectValue<CertificateAadAppCredPolicyParameters>(CertificateAadAppCredPolicyParameters.CreateFromDiscriminatorValue); } },
                {"certEnroll", n => { CertEnroll = n.GetObjectValue<CertificateEnrollPolicyParameters>(CertificateEnrollPolicyParameters.CreateFromDiscriminatorValue); } },
                {"certRequest", n => { CertRequest = n.GetObjectValue<CertificateRequestPolicyParameters>(CertificateRequestPolicyParameters.CreateFromDiscriminatorValue); } },
                {"policyType", n => { PolicyType = n.GetEnumValue<PolicyType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<CertificateAadAppCredPolicyParameters>("certAadAppCred", CertAadAppCred);
            writer.WriteObjectValue<CertificateEnrollPolicyParameters>("certEnroll", CertEnroll);
            writer.WriteObjectValue<CertificateRequestPolicyParameters>("certRequest", CertRequest);
            writer.WriteEnumValue<PolicyType>("policyType", PolicyType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
