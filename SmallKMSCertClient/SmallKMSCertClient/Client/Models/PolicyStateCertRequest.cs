// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class PolicyStateCertRequest : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The lastAction property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastAction { get; set; }
#nullable restore
#else
        public string LastAction { get; set; }
#endif
        /// <summary>The lastCertExpires property</summary>
        public DateTimeOffset? LastCertExpires { get; set; }
        /// <summary>The lastCertId property</summary>
        public Guid? LastCertId { get; set; }
        /// <summary>The lastCertIssued property</summary>
        public DateTimeOffset? LastCertIssued { get; set; }
        /// <summary>
        /// Instantiates a new PolicyStateCertRequest and sets the default values.
        /// </summary>
        public PolicyStateCertRequest() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PolicyStateCertRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PolicyStateCertRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"lastAction", n => { LastAction = n.GetStringValue(); } },
                {"lastCertExpires", n => { LastCertExpires = n.GetDateTimeOffsetValue(); } },
                {"lastCertId", n => { LastCertId = n.GetGuidValue(); } },
                {"lastCertIssued", n => { LastCertIssued = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("lastAction", LastAction);
            writer.WriteDateTimeOffsetValue("lastCertExpires", LastCertExpires);
            writer.WriteGuidValue("lastCertId", LastCertId);
            writer.WriteDateTimeOffsetValue("lastCertIssued", LastCertIssued);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
