// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    /// <summary>
    /// Property bag of JSON Web Key (RFC 7517) with additional fields
    /// </summary>
    public class JwkProperties : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The alg property</summary>
        public JwkAlg? Alg { get; set; }
        /// <summary>The crv property</summary>
        public CurveName? Crv { get; set; }
        /// <summary>RSA exponent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? E { get; set; }
#nullable restore
#else
        public string E { get; set; }
#endif
        /// <summary>The key_ops property</summary>
        public JwkKeyOperation? KeyOps { get; set; }
        /// <summary>The key_size property</summary>
        public int? KeySize { get; set; }
        /// <summary>Key ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kid { get; set; }
#nullable restore
#else
        public string Kid { get; set; }
#endif
        /// <summary>The kty property</summary>
        public KeyType? Kty { get; set; }
        /// <summary>RSA modulus</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? N { get; set; }
#nullable restore
#else
        public string N { get; set; }
#endif
        /// <summary>EC x coordinate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? X { get; set; }
#nullable restore
#else
        public string X { get; set; }
#endif
        /// <summary>X.509 certificate chain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? X5c { get; set; }
#nullable restore
#else
        public List<string> X5c { get; set; }
#endif
        /// <summary>X.509 certificate SHA-1 thumbprint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? X5t { get; set; }
#nullable restore
#else
        public string X5t { get; set; }
#endif
        /// <summary>X.509 certificate SHA-256 thumbprint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? X5tS256 { get; set; }
#nullable restore
#else
        public string X5tS256 { get; set; }
#endif
        /// <summary>X.509 certificate URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? X5u { get; set; }
#nullable restore
#else
        public string X5u { get; set; }
#endif
        /// <summary>EC y coordinate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Y { get; set; }
#nullable restore
#else
        public string Y { get; set; }
#endif
        /// <summary>
        /// Instantiates a new JwkProperties and sets the default values.
        /// </summary>
        public JwkProperties() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JwkProperties CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JwkProperties();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"alg", n => { Alg = n.GetEnumValue<JwkAlg>(); } },
                {"crv", n => { Crv = n.GetEnumValue<CurveName>(); } },
                {"e", n => { E = n.GetStringValue(); } },
                {"key_ops", n => { KeyOps = n.GetEnumValue<JwkKeyOperation>(); } },
                {"key_size", n => { KeySize = n.GetIntValue(); } },
                {"kid", n => { Kid = n.GetStringValue(); } },
                {"kty", n => { Kty = n.GetEnumValue<KeyType>(); } },
                {"n", n => { N = n.GetStringValue(); } },
                {"x", n => { X = n.GetStringValue(); } },
                {"x5c", n => { X5c = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"x5t", n => { X5t = n.GetStringValue(); } },
                {"x5t#S256", n => { X5tS256 = n.GetStringValue(); } },
                {"x5u", n => { X5u = n.GetStringValue(); } },
                {"y", n => { Y = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<JwkAlg>("alg", Alg);
            writer.WriteEnumValue<CurveName>("crv", Crv);
            writer.WriteStringValue("e", E);
            writer.WriteEnumValue<JwkKeyOperation>("key_ops", KeyOps);
            writer.WriteIntValue("key_size", KeySize);
            writer.WriteStringValue("kid", Kid);
            writer.WriteEnumValue<KeyType>("kty", Kty);
            writer.WriteStringValue("n", N);
            writer.WriteStringValue("x", X);
            writer.WriteCollectionOfPrimitiveValues<string>("x5c", X5c);
            writer.WriteStringValue("x5t", X5t);
            writer.WriteStringValue("x5t#S256", X5tS256);
            writer.WriteStringValue("x5u", X5u);
            writer.WriteStringValue("y", Y);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
