// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class CertificateRefParameters : ResourceRef, IParsable {
        /// <summary>Unique ID of the user who created the certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>Issuer certificate ID</summary>
        public Guid? Issuer { get; set; }
        /// <summary>Issuer namespace ID</summary>
        public Guid? IssuerNamespace { get; set; }
        /// <summary>Name of the certificate, also the common name (CN) in the subject of the certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Expiration date of the certificate</summary>
        public DateTimeOffset? NotAfter { get; set; }
        /// <summary>PEM encoded certificate chain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pem { get; set; }
#nullable restore
#else
        public string Pem { get; set; }
#endif
        /// <summary>The usage property</summary>
        public CertificateUsage? Usage { get; set; }
        /// <summary>X.509 certificate chain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? X5c { get; set; }
#nullable restore
#else
        public List<string> X5c { get; set; }
#endif
        /// <summary>X.509 certificate thumbprint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? X5t { get; set; }
#nullable restore
#else
        public string X5t { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new CertificateRefParameters CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CertificateRefParameters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public new IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers()) {
                {"createdBy", n => { CreatedBy = n.GetStringValue(); } },
                {"issuer", n => { Issuer = n.GetGuidValue(); } },
                {"issuerNamespace", n => { IssuerNamespace = n.GetGuidValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"notAfter", n => { NotAfter = n.GetDateTimeOffsetValue(); } },
                {"pem", n => { Pem = n.GetStringValue(); } },
                {"usage", n => { Usage = n.GetEnumValue<CertificateUsage>(); } },
                {"x5c", n => { X5c = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"x5t", n => { X5t = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public new void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("createdBy", CreatedBy);
            writer.WriteGuidValue("issuer", Issuer);
            writer.WriteGuidValue("issuerNamespace", IssuerNamespace);
            writer.WriteStringValue("name", Name);
            writer.WriteDateTimeOffsetValue("notAfter", NotAfter);
            writer.WriteStringValue("pem", Pem);
            writer.WriteEnumValue<CertificateUsage>("usage", Usage);
            writer.WriteCollectionOfPrimitiveValues<string>("x5c", X5c);
            writer.WriteStringValue("x5t", X5t);
        }
    }
}
