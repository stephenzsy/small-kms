// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SmallKms.Client.Models {
    public class CertificateEnrollmentRequestDeviceLinkedServicePrincipal : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Client ID of the application</summary>
        public Guid? AppId { get; set; }
        /// <summary>Common Name to appear in the certificate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommonName { get; set; }
#nullable restore
#else
        public string CommonName { get; set; }
#endif
        /// <summary>Object ID of the device</summary>
        public Guid? DeviceNamespaceId { get; set; }
        /// <summary>Unique ID of the device link</summary>
        public Guid? LinkId { get; set; }
        /// <summary>Object ID of the service principal</summary>
        public Guid? ServicePrincipalId { get; set; }
        /// <summary>The type property</summary>
        public CertificateEnrollmentTargetType? Type { get; set; }
        /// <summary>
        /// Instantiates a new CertificateEnrollmentRequestDeviceLinkedServicePrincipal and sets the default values.
        /// </summary>
        public CertificateEnrollmentRequestDeviceLinkedServicePrincipal() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CertificateEnrollmentRequestDeviceLinkedServicePrincipal CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CertificateEnrollmentRequestDeviceLinkedServicePrincipal();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"appId", n => { AppId = n.GetGuidValue(); } },
                {"commonName", n => { CommonName = n.GetStringValue(); } },
                {"deviceNamespaceId", n => { DeviceNamespaceId = n.GetGuidValue(); } },
                {"linkId", n => { LinkId = n.GetGuidValue(); } },
                {"servicePrincipalId", n => { ServicePrincipalId = n.GetGuidValue(); } },
                {"type", n => { Type = n.GetEnumValue<CertificateEnrollmentTargetType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("appId", AppId);
            writer.WriteStringValue("commonName", CommonName);
            writer.WriteGuidValue("deviceNamespaceId", DeviceNamespaceId);
            writer.WriteGuidValue("linkId", LinkId);
            writer.WriteGuidValue("servicePrincipalId", ServicePrincipalId);
            writer.WriteEnumValue<CertificateEnrollmentTargetType>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
