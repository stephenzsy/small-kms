// <auto-generated/>
using Microsoft.Kiota.Abstractions;
using SmallKms.Client.V2.Item.Item.Certificates.Item;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace SmallKms.Client.V2.Item.Item.Certificates {
    /// <summary>
    /// Builds and executes requests for operations under \v2\{namespaceType}\{namespaceId}\certificates
    /// </summary>
    public class CertificatesRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the SmallKms.Client.v2.item.item.certificates.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        public WithCertItemRequestBuilder this[Guid position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("certId", position);
            return new WithCertItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>Gets an item from the SmallKms.Client.v2.item.item.certificates.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public WithCertItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("certId", position);
            return new WithCertItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new CertificatesRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CertificatesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/{namespaceType}/{namespaceId}/certificates", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new CertificatesRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CertificatesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/{namespaceType}/{namespaceId}/certificates", rawUrl) {
        }
    }
}
