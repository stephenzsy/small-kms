openapi: 3.0.3
info:
  title: Cryptocat API
  version: 0.1.3
servers:
  - url: https://example.com
    description: Local server
security:
  - BearerAuth: []
paths:
  /v2/diagnostics:
    get:
      tags:
        - admin
      summary: Get diagnostics
      operationId: GetDiagnostics
      responses:
        "200":
          $ref: "models-shared.yaml#/components/responses/RequestDiagnosticsResponse"
  /v2/agents:
    post:
      tags:
        - admin
      summary: Create agent
      operationId: CreateAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "models-agent.yaml#/components/schemas/CreateAgentRequest"
      responses:
        201:
          $ref: "models-agent.yaml#/components/responses/AgentResponse"
        200:
          $ref: "models-agent.yaml#/components/responses/AgentResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/agents/{id}:
    parameters:
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
        - agentclient
      operationId: GetAgent
      summary: Get agent
      responses:
        200:
          $ref: "models-agent.yaml#/components/responses/AgentResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/profiles/{namespaceProvider}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
    get:
      tags:
        - admin
      operationId: ListProfiles
      summary: list profiles
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/RefsResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/profiles/{namespaceProvider}/{namespaceId}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      operationId: GetProfile
      summary: Get profile
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - admin
      operationId: SyncProfile
      summary: Sync profile
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
        - admin
      operationId: PutProfile
      summary: Put profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-shared.yaml#/components/schemas/ProfileParameters"
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        201:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/system-apps/{id}:
    parameters:
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetSystemApp
      summary: Get system app
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - admin
      operationId: SyncSystemApp
      summary: Sync managed app
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        201:
          $ref: "models-shared.yaml#/components/responses/ProfileResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/external-ca/{namespaceId}/certificiate-issuers:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      operationId: ListExternalCertificateIssuers
      summary: List certificate issuers
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/RefsResponse"
  /v2/external-ca/{namespaceId}/certificiate-issuers/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetExternalCertificateIssuer
      summary: Get certificate issuer
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificateExternalIssuerResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - admin
      operationId: PutExternalCertificateIssuer
      summary: Create certificate issuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-cert.yaml#/components/schemas/CertificateExternalIssuerFields"
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificateExternalIssuerResponse"
        201:
          $ref: "models-cert.yaml#/components/responses/CertificateExternalIssuerResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificate-policies:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      summary: List certificate policies
      operationId: ListCertificatePolicies
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/RefsResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
        - agentclient
      operationId: GetCertificatePolicy
      summary: Get certificate policy
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificatePolicyResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
        - admin
      operationId: PutCertificatePolicy
      summary: put certificate policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-cert.yaml#/components/schemas/CertificatePolicyParameters"
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificatePolicyResponse"
        201:
          $ref: "models-cert.yaml#/components/responses/CertificatePolicyResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/issuer:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetCertificatePolicyIssuer
      summary: Get certificate policy issuer
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/LinkRefResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
        - admin
      operationId: PutCertificatePolicyIssuer
      summary: put certificate policy issuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-shared.yaml#/components/schemas/LinkRefFields"
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/LinkRefResponse"
        201:
          $ref: "models-shared.yaml#/components/responses/LinkRefResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/generate:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
      operationId: GenerateCertificate
      summary: put certificate policy
      responses:
        201:
          $ref: "models-cert.yaml#/components/responses/CertificateResponse"
        202:
          $ref: "models-cert.yaml#/components/responses/CertificateResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        403:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/enroll:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
        - agentclient
      parameters:
        - in: query
          name: onBehalfOfApplication
          description: Enroll on behalf of application, must have a bearer token with "azp" cliam
          required: false
          schema:
            type: boolean
      operationId: EnrollCertificate
      summary: enroll certificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-cert.yaml#/components/schemas/EnrollCertificateRequest"
      responses:
        201:
          $ref: "models-cert.yaml#/components/responses/CertificateResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        403:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificates:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      operationId: ListCertificates
      summary: List certificates
      parameters:
        - name: policyId
          in: query
          description: Policy ID
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificateRefsResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificates/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetCertificate
      summary: Get certificate
      parameters:
        - in: query
          name: includeJwk
          description: Include JWK
          required: false
          schema:
            type: boolean
        - in: query
          name: pending
          description: Include pending certificate properties
          required: false
          schema:
            type: boolean
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificateResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    delete:
      tags:
        - admin
      operationId: DeleteCertificate
      summary: Delete certificate
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificateResponse"
        204:
          $ref: "#/components/responses/NoContentResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificates/{id}/secret:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
        - agentclient
      operationId: GetCertificateSecret
      summary: Get certificate secret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-cert.yaml#/components/schemas/CertificateSecretRequest"
      responses:
        200:
          description: Certificate secret
          content:
            application/json:
              schema:
                $ref: "models-cert.yaml#/components/schemas/CertificateSecretResult"
        400:
          $ref: "#/components/responses/ErrorResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificates/{id}/exchange-pkcs12:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
      operationId: ExchangePKCS12
      summary: Exchange PKCS12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-cert.yaml#/components/schemas/ExchangePKCS12Request"
      responses:
        200:
          description: PKCS12 file
          content:
            application/json:
              schema:
                $ref: "models-cert.yaml#/components/schemas/ExchangePKCS12Result"
        400:
          $ref: "#/components/responses/ErrorResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificates/{id}/ms-entra-key-credential:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
        - agentclient
      operationId: AddMsEntraKeyCredential
      summary: Add certificate as MS Entra key credential
      responses:
        204:
          $ref: "#/components/responses/NoContentResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/certificates/{id}/pending:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
        - agentclient
      operationId: UpdatePendingCertificate
      summary: Update pending certificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-cert.yaml#/components/schemas/UpdatePendingCertificateRequest"
      responses:
        200:
          $ref: "models-cert.yaml#/components/responses/CertificateResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/key-policies:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      operationId: ListKeyPolicies
      summary: List key policies
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/RefsResponse"
  /v2/{namespaceProvider}/{namespaceId}/key-policies/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetKeyPolicy
      summary: Get key policy
      responses:
        200:
          $ref: "models-key.yaml#/components/responses/KeyPolicyResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
        - admin
      operationId: PutKeyPolicy
      summary: put key policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-key.yaml#/components/schemas/CreateKeyPolicyRequest"
      responses:
        200:
          $ref: "models-key.yaml#/components/responses/KeyPolicyResponse"
        201:
          $ref: "models-key.yaml#/components/responses/KeyPolicyResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/key-policies/{id}/generate:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
      operationId: GenerateKey
      summary: put certificate policy
      responses:
        201:
          $ref: "models-key.yaml#/components/responses/KeyResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
        403:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/keys:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      operationId: ListKeys
      summary: List keys
      parameters:
        - name: policyId
          in: query
          description: Policy ID
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: "models-key.yaml#/components/responses/KeyRefsResponse"
  /v2/{namespaceProvider}/{namespaceId}/keys/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
        - agentclient
      operationId: GetKey
      summary: Get key
      parameters:
        - in: query
          name: includeJwk
          description: Include JWK
          required: false
          schema:
            type: boolean
        - in: query
          name: verify
          description: verify key
          required: false
          schema:
            type: boolean
      responses:
        200:
          $ref: "models-key.yaml#/components/responses/KeyResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/{namespaceProvider}/{namespaceId}/memberOf/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetMemberOf
      summary: Get member group
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/LinkRefResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - admin
      operationId: SyncMemberOf
      summary: Sync member group
      responses:
        200:
          $ref: "models-shared.yaml#/components/responses/LinkRefResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/service-principal/{namespaceId}/agent-config:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
        - agentclient
      operationId: GetAgentConfigBundle
      summary: Get agent config
      responses:
        200:
          description: Agent config bundle
          content:
            application/json:
              schema:
                $ref: "models-agent.yaml#/components/schemas/AgentConfigBundle"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/service-principal/{namespaceId}/agent-config/{configName}:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - in: path
        name: configName
        required: true
        schema:
          $ref: "models-agent.yaml#/components/schemas/AgentConfigName"
    get:
      tags:
        - admin
        - agentclient
      operationId: GetAgentConfig
      summary: Get agent config
      responses:
        200:
          $ref: "models-agent.yaml#/components/responses/AgentConfigResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
        - admin
      operationId: PutAgentConfig
      summary: Put agent config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "models-agent.yaml#/components/schemas/CreateAgentConfigRequest"
      responses:
        200:
          $ref: "models-agent.yaml#/components/responses/AgentConfigResponse"
        201:
          $ref: "models-agent.yaml#/components/responses/AgentConfigResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
  /v2/service-principal/{namespaceId}/agent-instances:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      operationId: ListAgentInstances
      summary: List agent instances
      responses:
        200:
          description: List agent instances response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "models-agent.yaml#/components/schemas/AgentInstanceRef"
        404:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - admin
        - agentclient
      operationId: UpdateAgentInstance
      summary: Update agent instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "models-agent.yaml#/components/schemas/AgentInstanceParameters"
      responses:
        200:
          $ref: "models-agent.yaml#/components/responses/AgentInstanceResponse"
        201:
          $ref: "models-agent.yaml#/components/responses/AgentInstanceResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/service-principal/{namespaceId}/agent-instances/{id}:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
      operationId: GetAgentInstance
      summary: Get agent instance
      responses:
        200:
          $ref: "models-agent.yaml#/components/responses/AgentInstanceResponse"
        404:
          $ref: "#/components/responses/ErrorResponse"
    delete:
      tags:
        - admin
      operationId: DeleteAgentInstance
      summary: Delete agent instance
      parameters:
        - in: query
          name: force
          description: Force delete
          required: false
          schema:
            type: boolean
      responses:
        204:
          $ref: "#/components/responses/NoContentResponse"
        400:
          $ref: "#/components/responses/ErrorResponse"
  /v2/service-principal/{namespaceId}/agent-instances/{id}/diagnostics:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
        - agent
      summary: Get agent diagnostics
      operationId: GetAgentDiagnostics
      responses:
        "200":
          $ref: "models-shared.yaml#/components/responses/RequestDiagnosticsResponse"
  /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/images:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - agent
        - admin
      description: List docker images
      operationId: ListAgentDockerImages
      responses:
        200:
          description: ImageList
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "models-agent.yaml#/components/schemas/DockerImageSummary"
  /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/info:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - admin
        - agent
      summary: Get agent docker system information
      operationId: GetAgentDockerSystemInformation
      responses:
        "200":
          description: Docker info
          content:
            application/json:
              schema:
                $ref: "models-agent.yaml#/components/schemas/DockerInfo"
  /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/networks:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    get:
      tags:
        - agent
        - admin
      description: Get docker system info
      operationId: ListAgentDockerNetowks
      responses:
        200:
          description: List of networks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "models-agent.yaml#/components/schemas/DockerNetworkResource"
  /v1/service-principal/{namespaceId}/agent-instances/{id}/token:
    parameters:
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/IdParameter"
    post:
      tags:
        - admin
      operationId: GetAgentAuthToken
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "models-agent.yaml#/components/schemas/AgentAuthResult"
  /v2/one-time-key/{namespaceProvider}/{namespaceId}:
    parameters:
      - $ref: "#/components/parameters/NamespaceProviderParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    post:
      tags:
        - admin
        - agentclient
      operationId: CreateOneTimeKey
      summary: Create one time key for JWE ECDH-ES key agreement
      responses:
        201:
          description: One time key
          content:
            application/json:
              schema:
                $ref: "models-key.yaml#/components/schemas/OneTimeKey"
        400:
          $ref: "#/components/responses/ErrorResponse"
components:
  parameters:
    IdParameter:
      in: path
      name: id
      required: true
      schema:
        type: string
    NamespaceProviderParameter:
      in: path
      name: namespaceProvider
      required: true
      schema:
        $ref: "models-shared.yaml#/components/schemas/NamespaceProvider"
    NamespaceIdParameter:
      in: path
      name: namespaceId
      required: true
      schema:
        type: string
  schemas:
    ErrorResult:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    NoContentResponse:
      description: No content response
      content: {}
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResult"
