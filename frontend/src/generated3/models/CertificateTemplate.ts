/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API Shared
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateIssuer } from './CertificateIssuer';
import {
    CertificateIssuerFromJSON,
    CertificateIssuerFromJSONTyped,
    CertificateIssuerToJSON,
} from './CertificateIssuer';
import type { CertificateLifetimeTrigger } from './CertificateLifetimeTrigger';
import {
    CertificateLifetimeTriggerFromJSON,
    CertificateLifetimeTriggerFromJSONTyped,
    CertificateLifetimeTriggerToJSON,
} from './CertificateLifetimeTrigger';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';
import type { JwkProperties } from './JwkProperties';
import {
    JwkPropertiesFromJSON,
    JwkPropertiesFromJSONTyped,
    JwkPropertiesToJSON,
} from './JwkProperties';
import type { ResourceMetadata } from './ResourceMetadata';
import {
    ResourceMetadataFromJSON,
    ResourceMetadataFromJSONTyped,
    ResourceMetadataToJSON,
} from './ResourceMetadata';

/**
 * 
 * @export
 * @interface CertificateTemplate
 */
export interface CertificateTemplate {
    /**
     * Identifier of the resource
     * @type {string}
     * @memberof CertificateTemplate
     */
    id: string;
    /**
     * Common name
     * @type {string}
     * @memberof CertificateTemplate
     */
    subjectCommonName: string;
    /**
     * 
     * @type {ResourceMetadata}
     * @memberof CertificateTemplate
     */
    metadata?: ResourceMetadata;
    /**
     * 
     * @type {CertificateIssuer}
     * @memberof CertificateTemplate
     */
    issuer?: CertificateIssuer;
    /**
     * 
     * @type {JwkProperties}
     * @memberof CertificateTemplate
     */
    keyProperties?: JwkProperties;
    /**
     * 
     * @type {Array<CertificateUsage>}
     * @memberof CertificateTemplate
     */
    usages: Array<CertificateUsage>;
    /**
     * 
     * @type {number}
     * @memberof CertificateTemplate
     */
    validityMonths?: number;
    /**
     * 
     * @type {string}
     * @memberof CertificateTemplate
     */
    keyStorePath?: string;
    /**
     * 
     * @type {CertificateLifetimeTrigger}
     * @memberof CertificateTemplate
     */
    lifetimeTrigger?: CertificateLifetimeTrigger;
}

/**
 * Check if a given object implements the CertificateTemplate interface.
 */
export function instanceOfCertificateTemplate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "subjectCommonName" in value;
    isInstance = isInstance && "usages" in value;

    return isInstance;
}

export function CertificateTemplateFromJSON(json: any): CertificateTemplate {
    return CertificateTemplateFromJSONTyped(json, false);
}

export function CertificateTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateTemplate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'subjectCommonName': json['subjectCommonName'],
        'metadata': !exists(json, 'metadata') ? undefined : ResourceMetadataFromJSON(json['metadata']),
        'issuer': !exists(json, 'issuer') ? undefined : CertificateIssuerFromJSON(json['issuer']),
        'keyProperties': !exists(json, 'keyProperties') ? undefined : JwkPropertiesFromJSON(json['keyProperties']),
        'usages': ((json['usages'] as Array<any>).map(CertificateUsageFromJSON)),
        'validityMonths': !exists(json, 'validity_months') ? undefined : json['validity_months'],
        'keyStorePath': !exists(json, 'keyStorePath') ? undefined : json['keyStorePath'],
        'lifetimeTrigger': !exists(json, 'lifetimeTrigger') ? undefined : CertificateLifetimeTriggerFromJSON(json['lifetimeTrigger']),
    };
}

export function CertificateTemplateToJSON(value?: CertificateTemplate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'subjectCommonName': value.subjectCommonName,
        'metadata': ResourceMetadataToJSON(value.metadata),
        'issuer': CertificateIssuerToJSON(value.issuer),
        'keyProperties': JwkPropertiesToJSON(value.keyProperties),
        'usages': ((value.usages as Array<any>).map(CertificateUsageToJSON)),
        'validity_months': value.validityMonths,
        'keyStorePath': value.keyStorePath,
        'lifetimeTrigger': CertificateLifetimeTriggerToJSON(value.lifetimeTrigger),
    };
}

