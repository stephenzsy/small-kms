/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API Shared
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileType } from './ProfileType';
import {
    ProfileTypeFromJSON,
    ProfileTypeFromJSONTyped,
    ProfileTypeToJSON,
} from './ProfileType';
import type { ResourceMetadata } from './ResourceMetadata';
import {
    ResourceMetadataFromJSON,
    ResourceMetadataFromJSONTyped,
    ResourceMetadataToJSON,
} from './ResourceMetadata';

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {ProfileType}
     * @memberof Profile
     */
    type: ProfileType;
    /**
     * Identifier of the resource
     * @type {string}
     * @memberof Profile
     */
    identifier: string;
    /**
     * Display name of the resource
     * @type {string}
     * @memberof Profile
     */
    displayName: string;
    /**
     * 
     * @type {ResourceMetadata}
     * @memberof Profile
     */
    metadata: ResourceMetadata;
}

/**
 * Check if a given object implements the Profile interface.
 */
export function instanceOfProfile(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "metadata" in value;

    return isInstance;
}

export function ProfileFromJSON(json: any): Profile {
    return ProfileFromJSONTyped(json, false);
}

export function ProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): Profile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ProfileTypeFromJSON(json['type']),
        'identifier': json['identifier'],
        'displayName': json['displayName'],
        'metadata': ResourceMetadataFromJSON(json['metadata']),
    };
}

export function ProfileToJSON(value?: Profile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ProfileTypeToJSON(value.type),
        'identifier': value.identifier,
        'displayName': value.displayName,
        'metadata': ResourceMetadataToJSON(value.metadata),
    };
}

