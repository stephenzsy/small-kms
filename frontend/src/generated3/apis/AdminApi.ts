/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentConfigName,
  AgentConfiguration,
  AgentConfigurationParameters,
  CertificateInfo,
  CertificateRef,
  CertificateTemplate,
  CertificateTemplateParameters,
  CertificateTemplateRef,
  CreateProfileRequest,
  IncludeCertificate,
  KeyVaultRoleAssignment,
  NamespaceKind,
  Profile,
  ProfileRef,
  ServiceConfig,
} from '../models';
import {
    AgentConfigNameFromJSON,
    AgentConfigNameToJSON,
    AgentConfigurationFromJSON,
    AgentConfigurationToJSON,
    AgentConfigurationParametersFromJSON,
    AgentConfigurationParametersToJSON,
    CertificateInfoFromJSON,
    CertificateInfoToJSON,
    CertificateRefFromJSON,
    CertificateRefToJSON,
    CertificateTemplateFromJSON,
    CertificateTemplateToJSON,
    CertificateTemplateParametersFromJSON,
    CertificateTemplateParametersToJSON,
    CertificateTemplateRefFromJSON,
    CertificateTemplateRefToJSON,
    CreateProfileRequestFromJSON,
    CreateProfileRequestToJSON,
    IncludeCertificateFromJSON,
    IncludeCertificateToJSON,
    KeyVaultRoleAssignmentFromJSON,
    KeyVaultRoleAssignmentToJSON,
    NamespaceKindFromJSON,
    NamespaceKindToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ProfileRefFromJSON,
    ProfileRefToJSON,
    ServiceConfigFromJSON,
    ServiceConfigToJSON,
} from '../models';

export interface CreateManagedNamespaceRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    targetNamespaceKind: NamespaceKind;
}

export interface CreateProfileOperationRequest {
    namespaceKind: NamespaceKind;
    createProfileRequest: CreateProfileRequest;
}

export interface DeleteCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    certificateId: string;
}

export interface GetAgentConfigurationRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    configName: AgentConfigName;
}

export interface GetCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    certificateId: string;
    includeCertificate?: IncludeCertificate;
    templateId?: string;
    templateNamespaceKind?: NamespaceKind;
    templateNamespaceId?: string;
}

export interface GetCertificateTemplateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    templateId: string;
}

export interface GetProfileRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
}

export interface IssueCertificateFromTemplateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    templateId: string;
}

export interface ListCertificateTemplatesRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
}

export interface ListCertificatesByTemplateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    templateId: string;
}

export interface ListKeyVaultRoleAssignmentsRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    templateId: string;
}

export interface ListProfilesRequest {
    namespaceKind: NamespaceKind;
}

export interface PatchServiceConfigRequest {
    configPath: PatchServiceConfigConfigPathEnum;
    body: any | null;
}

export interface PutAgentConfigurationRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    configName: AgentConfigName;
    agentConfigurationParameters: AgentConfigurationParameters;
}

export interface PutCertificateTemplateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    templateId: string;
    certificateTemplateParameters: CertificateTemplateParameters;
}

export interface SyncProfileRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Create managed namespace
     */
    async createManagedNamespaceRaw(requestParameters: CreateManagedNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling createManagedNamespace.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling createManagedNamespace.');
        }

        if (requestParameters.targetNamespaceKind === null || requestParameters.targetNamespaceKind === undefined) {
            throw new runtime.RequiredError('targetNamespaceKind','Required parameter requestParameters.targetNamespaceKind was null or undefined when calling createManagedNamespace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profiles/{namespaceKind}/{namespaceId}/managed/{targetNamespaceKind}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"targetNamespaceKind"}}`, encodeURIComponent(String(requestParameters.targetNamespaceKind))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Create managed namespace
     */
    async createManagedNamespace(requestParameters: CreateManagedNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.createManagedNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Managed Application
     */
    async createProfileRaw(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling createProfile.');
        }

        if (requestParameters.createProfileRequest === null || requestParameters.createProfileRequest === undefined) {
            throw new runtime.RequiredError('createProfileRequest','Required parameter requestParameters.createProfileRequest was null or undefined when calling createProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profiles/{namespaceKind}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfileRequestToJSON(requestParameters.createProfileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Create Managed Application
     */
    async createProfile(requestParameters: CreateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete certificate
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling deleteCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate/{certificateId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete certificate
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Get agent autoconfig
     */
    async getAgentConfigurationRaw(requestParameters: GetAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling getAgentConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async getAgentConfiguration(requestParameters: GetAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.getAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateInfo>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getCertificate.');
        }

        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling getCertificate.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeCertificate !== undefined) {
            queryParameters['includeCertificate'] = requestParameters.includeCertificate;
        }

        if (requestParameters.templateId !== undefined) {
            queryParameters['templateId'] = requestParameters.templateId;
        }

        if (requestParameters.templateNamespaceKind !== undefined) {
            queryParameters['templateNamespaceKind'] = requestParameters.templateNamespaceKind;
        }

        if (requestParameters.templateNamespaceId !== undefined) {
            queryParameters['templateNamespaceId'] = requestParameters.templateNamespaceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate/{certificateId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateInfoFromJSON(jsonValue));
    }

    /**
     * Get certificate
     */
    async getCertificate(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateInfo> {
        const response = await this.getCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate template
     */
    async getCertificateTemplateRaw(requestParameters: GetCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateTemplate>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificateTemplate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getCertificateTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling getCertificateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate-template/{templateId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateTemplateFromJSON(jsonValue));
    }

    /**
     * Get certificate template
     */
    async getCertificateTemplate(requestParameters: GetCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateTemplate> {
        const response = await this.getCertificateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get namespace info with ms graph
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getProfile.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profiles/{namespaceKind}/{namespaceId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Get namespace info with ms graph
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service config
     */
    async getServiceConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/service/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConfigFromJSON(jsonValue));
    }

    /**
     * Get service config
     */
    async getServiceConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceConfig> {
        const response = await this.getServiceConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create certificate
     */
    async issueCertificateFromTemplateRaw(requestParameters: IssueCertificateFromTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateInfo>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling issueCertificateFromTemplate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling issueCertificateFromTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling issueCertificateFromTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate-template/{templateId}/certificates`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateInfoFromJSON(jsonValue));
    }

    /**
     * Create certificate
     */
    async issueCertificateFromTemplate(requestParameters: IssueCertificateFromTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateInfo> {
        const response = await this.issueCertificateFromTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificate templates
     */
    async listCertificateTemplatesRaw(requestParameters: ListCertificateTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateTemplateRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listCertificateTemplates.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listCertificateTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate-templates`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateTemplateRefFromJSON));
    }

    /**
     * List certificate templates
     */
    async listCertificateTemplates(requestParameters: ListCertificateTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateTemplateRef>> {
        const response = await this.listCertificateTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificates issued by template
     */
    async listCertificatesByTemplateRaw(requestParameters: ListCertificatesByTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listCertificatesByTemplate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listCertificatesByTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling listCertificatesByTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate-template/{templateId}/certificates`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateRefFromJSON));
    }

    /**
     * List certificates issued by template
     */
    async listCertificatesByTemplate(requestParameters: ListCertificatesByTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateRef>> {
        const response = await this.listCertificatesByTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List keyvault role assignments
     */
    async listKeyVaultRoleAssignmentsRaw(requestParameters: ListKeyVaultRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KeyVaultRoleAssignment>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate-template/{templateId}/keyvault-role-assignments`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KeyVaultRoleAssignmentFromJSON));
    }

    /**
     * List keyvault role assignments
     */
    async listKeyVaultRoleAssignments(requestParameters: ListKeyVaultRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KeyVaultRoleAssignment>> {
        const response = await this.listKeyVaultRoleAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List profiles by type
     */
    async listProfilesRaw(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProfileRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profiles/{namespaceKind}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileRefFromJSON));
    }

    /**
     * List profiles by type
     */
    async listProfiles(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProfileRef>> {
        const response = await this.listProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update service config
     */
    async patchServiceConfigRaw(requestParameters: PatchServiceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceConfig>> {
        if (requestParameters.configPath === null || requestParameters.configPath === undefined) {
            throw new runtime.RequiredError('configPath','Required parameter requestParameters.configPath was null or undefined when calling patchServiceConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchServiceConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/service/config/{configPath}`.replace(`{${"configPath"}}`, encodeURIComponent(String(requestParameters.configPath))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConfigFromJSON(jsonValue));
    }

    /**
     * Update service config
     */
    async patchServiceConfig(requestParameters: PatchServiceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceConfig> {
        const response = await this.patchServiceConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfigurationRaw(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.agentConfigurationParameters === null || requestParameters.agentConfigurationParameters === undefined) {
            throw new runtime.RequiredError('agentConfigurationParameters','Required parameter requestParameters.agentConfigurationParameters was null or undefined when calling putAgentConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigurationParametersToJSON(requestParameters.agentConfigurationParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfiguration(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.putAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put certificate template
     */
    async putCertificateTemplateRaw(requestParameters: PutCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateTemplate>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putCertificateTemplate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putCertificateTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling putCertificateTemplate.');
        }

        if (requestParameters.certificateTemplateParameters === null || requestParameters.certificateTemplateParameters === undefined) {
            throw new runtime.RequiredError('certificateTemplateParameters','Required parameter requestParameters.certificateTemplateParameters was null or undefined when calling putCertificateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate-template/{templateId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateTemplateParametersToJSON(requestParameters.certificateTemplateParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateTemplateFromJSON(jsonValue));
    }

    /**
     * Put certificate template
     */
    async putCertificateTemplate(requestParameters: PutCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateTemplate> {
        const response = await this.putCertificateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync namespace info with ms graph
     */
    async syncProfileRaw(requestParameters: SyncProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling syncProfile.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling syncProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profiles/{namespaceKind}/{namespaceId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Sync namespace info with ms graph
     */
    async syncProfile(requestParameters: SyncProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.syncProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PatchServiceConfigConfigPathEnum = {
    ServiceConfigPathAzureSubscriptionId: 'azureSubscriptionId',
    ServiceConfigPathKeyvaultArmResourceId: 'keyvaultArmResourceId',
    ServiceConfigPathAppRoleIds: 'appRoleIds',
    ServiceConfigPathAzureContainerRegistry: 'azureContainerRegistry'
} as const;
export type PatchServiceConfigConfigPathEnum = typeof PatchServiceConfigConfigPathEnum[keyof typeof PatchServiceConfigConfigPathEnum];
