/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API Shared
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificateInfo,
  CertificateRef,
  CertificateTemplate,
  CertificateTemplateParameters,
  CertificateTemplateRef,
  IncludeCertificate,
  NamespaceKind,
  Profile,
  ProfileRef,
} from '../models';
import {
    CertificateInfoFromJSON,
    CertificateInfoToJSON,
    CertificateRefFromJSON,
    CertificateRefToJSON,
    CertificateTemplateFromJSON,
    CertificateTemplateToJSON,
    CertificateTemplateParametersFromJSON,
    CertificateTemplateParametersToJSON,
    CertificateTemplateRefFromJSON,
    CertificateTemplateRefToJSON,
    IncludeCertificateFromJSON,
    IncludeCertificateToJSON,
    NamespaceKindFromJSON,
    NamespaceKindToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ProfileRefFromJSON,
    ProfileRefToJSON,
} from '../models';

export interface GetCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    certificateId: string;
    includeCertificate?: IncludeCertificate;
    templateId?: string;
    templateNamespaceKind?: NamespaceKind;
    templateNamespaceId?: string;
}

export interface GetCertificateTemplateRequest {
    profileType: NamespaceKind;
    profileId: string;
    templateId: string;
}

export interface GetProfileRequest {
    profileType: NamespaceKind;
    profileId: string;
}

export interface IssueCertificateFromTemplateRequest {
    profileType: NamespaceKind;
    profileId: string;
    templateId: string;
}

export interface ListCertificateTemplatesRequest {
    profileType: NamespaceKind;
    profileId: string;
}

export interface ListCertificatesByTemplateRequest {
    profileType: NamespaceKind;
    profileId: string;
    templateId: string;
}

export interface ListProfilesRequest {
    profileType: NamespaceKind;
}

export interface PutCertificateTemplateRequest {
    profileType: NamespaceKind;
    profileId: string;
    templateId: string;
    certificateTemplateParameters: CertificateTemplateParameters;
}

export interface SyncProfileRequest {
    profileType: NamespaceKind;
    profileId: string;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get certificate
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateInfo>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getCertificate.');
        }

        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling getCertificate.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeCertificate !== undefined) {
            queryParameters['includeCertificate'] = requestParameters.includeCertificate;
        }

        if (requestParameters.templateId !== undefined) {
            queryParameters['templateId'] = requestParameters.templateId;
        }

        if (requestParameters.templateNamespaceKind !== undefined) {
            queryParameters['templateNamespaceKind'] = requestParameters.templateNamespaceKind;
        }

        if (requestParameters.templateNamespaceId !== undefined) {
            queryParameters['templateNamespaceId'] = requestParameters.templateNamespaceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/certificate/{certificateId}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateInfoFromJSON(jsonValue));
    }

    /**
     * Get certificate
     */
    async getCertificate(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateInfo> {
        const response = await this.getCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate template
     */
    async getCertificateTemplateRaw(requestParameters: GetCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateTemplate>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getCertificateTemplate.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getCertificateTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling getCertificateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{profileType}/{profileId}/certificate-template/{templateId}`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateTemplateFromJSON(jsonValue));
    }

    /**
     * Get certificate template
     */
    async getCertificateTemplate(requestParameters: GetCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateTemplate> {
        const response = await this.getCertificateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get namespace info with ms graph
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getProfile.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profile/{profileType}/{profileId}`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Get namespace info with ms graph
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create certificate
     */
    async issueCertificateFromTemplateRaw(requestParameters: IssueCertificateFromTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateInfo>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling issueCertificateFromTemplate.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling issueCertificateFromTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling issueCertificateFromTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{profileType}/{profileId}/certificate-template/{templateId}/certificates`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateInfoFromJSON(jsonValue));
    }

    /**
     * Create certificate
     */
    async issueCertificateFromTemplate(requestParameters: IssueCertificateFromTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateInfo> {
        const response = await this.issueCertificateFromTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificate templates
     */
    async listCertificateTemplatesRaw(requestParameters: ListCertificateTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateTemplateRef>>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling listCertificateTemplates.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling listCertificateTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{profileType}/{profileId}/certificate-templates`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateTemplateRefFromJSON));
    }

    /**
     * List certificate templates
     */
    async listCertificateTemplates(requestParameters: ListCertificateTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateTemplateRef>> {
        const response = await this.listCertificateTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificates issued by template
     */
    async listCertificatesByTemplateRaw(requestParameters: ListCertificatesByTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateRef>>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling listCertificatesByTemplate.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling listCertificatesByTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling listCertificatesByTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{profileType}/{profileId}/certificate-template/{templateId}/certificates`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateRefFromJSON));
    }

    /**
     * List certificates issued by template
     */
    async listCertificatesByTemplate(requestParameters: ListCertificatesByTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateRef>> {
        const response = await this.listCertificatesByTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List profiles by type
     */
    async listProfilesRaw(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProfileRef>>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling listProfiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileRefFromJSON));
    }

    /**
     * List profiles by type
     */
    async listProfiles(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProfileRef>> {
        const response = await this.listProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put certificate template
     */
    async putCertificateTemplateRaw(requestParameters: PutCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateTemplate>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling putCertificateTemplate.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling putCertificateTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling putCertificateTemplate.');
        }

        if (requestParameters.certificateTemplateParameters === null || requestParameters.certificateTemplateParameters === undefined) {
            throw new runtime.RequiredError('certificateTemplateParameters','Required parameter requestParameters.certificateTemplateParameters was null or undefined when calling putCertificateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{profileType}/{profileId}/certificate-template/{templateId}`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateTemplateParametersToJSON(requestParameters.certificateTemplateParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateTemplateFromJSON(jsonValue));
    }

    /**
     * Put certificate template
     */
    async putCertificateTemplate(requestParameters: PutCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateTemplate> {
        const response = await this.putCertificateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync namespace info with ms graph
     */
    async syncProfileRaw(requestParameters: SyncProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling syncProfile.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling syncProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/profile/{profileType}/{profileId}`.replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Sync namespace info with ms graph
     */
    async syncProfile(requestParameters: SyncProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.syncProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
