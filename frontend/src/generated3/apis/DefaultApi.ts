/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API Shared
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentConfigName,
  AgentConfiguration,
  NamespaceKind,
} from '../models';
import {
    AgentConfigNameFromJSON,
    AgentConfigNameToJSON,
    AgentConfigurationFromJSON,
    AgentConfigurationToJSON,
    NamespaceKindFromJSON,
    NamespaceKindToJSON,
} from '../models';

export interface PutAgentConfigurationRequest {
    namespaceKind: NamespaceKind;
    namespaceId: string;
    configName: AgentConfigName;
    agentConfiguration: AgentConfiguration;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get agent autoconfig
     */
    async putAgentConfigurationRaw(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.agentConfiguration === null || requestParameters.agentConfiguration === undefined) {
            throw new runtime.RequiredError('agentConfiguration','Required parameter requestParameters.agentConfiguration was null or undefined when calling putAgentConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKind}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigurationToJSON(requestParameters.agentConfiguration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfiguration(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.putAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
