/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateAttributes } from './CertificateAttributes';
import {
    CertificateAttributesFromJSON,
    CertificateAttributesFromJSONTyped,
    CertificateAttributesToJSON,
} from './CertificateAttributes';
import type { CertificateFlag } from './CertificateFlag';
import {
    CertificateFlagFromJSON,
    CertificateFlagFromJSONTyped,
    CertificateFlagToJSON,
} from './CertificateFlag';
import type { CertificateSubject } from './CertificateSubject';
import {
    CertificateSubjectFromJSON,
    CertificateSubjectFromJSONTyped,
    CertificateSubjectToJSON,
} from './CertificateSubject';
import type { JsonWebKey } from './JsonWebKey';
import {
    JsonWebKeyFromJSON,
    JsonWebKeyFromJSONTyped,
    JsonWebKeyToJSON,
} from './JsonWebKey';
import type { JsonWebSignatureAlgorithm } from './JsonWebSignatureAlgorithm';
import {
    JsonWebSignatureAlgorithmFromJSON,
    JsonWebSignatureAlgorithmFromJSONTyped,
    JsonWebSignatureAlgorithmToJSON,
} from './JsonWebSignatureAlgorithm';
import type { SubjectAlternativeNames } from './SubjectAlternativeNames';
import {
    SubjectAlternativeNamesFromJSON,
    SubjectAlternativeNamesFromJSONTyped,
    SubjectAlternativeNamesToJSON,
} from './SubjectAlternativeNames';

/**
 * 
 * @export
 * @interface Certificate
 */
export interface Certificate {
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Certificate
     */
    updated: Date;
    /**
     * 
     * @type {Date}
     * @memberof Certificate
     */
    deleted?: Date;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    updatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    thumbprint: string;
    /**
     * 
     * @type {CertificateAttributes}
     * @memberof Certificate
     */
    attributes: CertificateAttributes;
    /**
     * 
     * @type {CertificateSubject}
     * @memberof Certificate
     */
    subject: CertificateSubject;
    /**
     * 
     * @type {SubjectAlternativeNames}
     * @memberof Certificate
     */
    subjectAlternativeNames?: SubjectAlternativeNames;
    /**
     * 
     * @type {Array<CertificateFlag>}
     * @memberof Certificate
     */
    flags?: Array<CertificateFlag>;
    /**
     * 
     * @type {JsonWebKey}
     * @memberof Certificate
     */
    jwk: JsonWebKey;
    /**
     * 
     * @type {JsonWebSignatureAlgorithm}
     * @memberof Certificate
     */
    alg: JsonWebSignatureAlgorithm;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    sid?: string;
}

/**
 * Check if a given object implements the Certificate interface.
 */
export function instanceOfCertificate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "thumbprint" in value;
    isInstance = isInstance && "attributes" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "jwk" in value;
    isInstance = isInstance && "alg" in value;

    return isInstance;
}

export function CertificateFromJSON(json: any): Certificate {
    return CertificateFromJSONTyped(json, false);
}

export function CertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): Certificate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'updated': (new Date(json['updated'])),
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'updatedBy': !exists(json, 'updatedBy') ? undefined : json['updatedBy'],
        'thumbprint': json['thumbprint'],
        'attributes': CertificateAttributesFromJSON(json['attributes']),
        'subject': CertificateSubjectFromJSON(json['subject']),
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : SubjectAlternativeNamesFromJSON(json['subjectAlternativeNames']),
        'flags': !exists(json, 'flags') ? undefined : ((json['flags'] as Array<any>).map(CertificateFlagFromJSON)),
        'jwk': JsonWebKeyFromJSON(json['jwk']),
        'alg': JsonWebSignatureAlgorithmFromJSON(json['alg']),
        'sid': !exists(json, 'sid') ? undefined : json['sid'],
    };
}

export function CertificateToJSON(value?: Certificate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'updated': (value.updated.toISOString()),
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'updatedBy': value.updatedBy,
        'thumbprint': value.thumbprint,
        'attributes': CertificateAttributesToJSON(value.attributes),
        'subject': CertificateSubjectToJSON(value.subject),
        'subjectAlternativeNames': SubjectAlternativeNamesToJSON(value.subjectAlternativeNames),
        'flags': value.flags === undefined ? undefined : ((value.flags as Array<any>).map(CertificateFlagToJSON)),
        'jwk': JsonWebKeyToJSON(value.jwk),
        'alg': JsonWebSignatureAlgorithmToJSON(value.alg),
        'sid': value.sid,
    };
}

