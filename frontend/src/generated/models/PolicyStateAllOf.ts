/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PolicyStateCertRequest } from './PolicyStateCertRequest';
import {
    PolicyStateCertRequestFromJSON,
    PolicyStateCertRequestFromJSONTyped,
    PolicyStateCertRequestToJSON,
} from './PolicyStateCertRequest';
import type { PolicyType } from './PolicyType';
import {
    PolicyTypeFromJSON,
    PolicyTypeFromJSONTyped,
    PolicyTypeToJSON,
} from './PolicyType';

/**
 * 
 * @export
 * @interface PolicyStateAllOf
 */
export interface PolicyStateAllOf {
    /**
     * 
     * @type {PolicyType}
     * @memberof PolicyStateAllOf
     */
    policyType: PolicyType;
    /**
     * 
     * @type {string}
     * @memberof PolicyStateAllOf
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyStateAllOf
     */
    message: string;
    /**
     * 
     * @type {PolicyStateCertRequest}
     * @memberof PolicyStateAllOf
     */
    certRequest?: PolicyStateCertRequest;
}

/**
 * Check if a given object implements the PolicyStateAllOf interface.
 */
export function instanceOfPolicyStateAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "policyType" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function PolicyStateAllOfFromJSON(json: any): PolicyStateAllOf {
    return PolicyStateAllOfFromJSONTyped(json, false);
}

export function PolicyStateAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyStateAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'policyType': PolicyTypeFromJSON(json['policyType']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'message': json['message'],
        'certRequest': !exists(json, 'certRequest') ? undefined : PolicyStateCertRequestFromJSON(json['certRequest']),
    };
}

export function PolicyStateAllOfToJSON(value?: PolicyStateAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'policyType': PolicyTypeToJSON(value.policyType),
        'status': value.status,
        'message': value.message,
        'certRequest': PolicyStateCertRequestToJSON(value.certRequest),
    };
}

