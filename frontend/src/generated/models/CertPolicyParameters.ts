/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateFlag } from './CertificateFlag';
import {
    CertificateFlagFromJSON,
    CertificateFlagFromJSONTyped,
    CertificateFlagToJSON,
} from './CertificateFlag';
import type { CertificateSubject } from './CertificateSubject';
import {
    CertificateSubjectFromJSON,
    CertificateSubjectFromJSONTyped,
    CertificateSubjectToJSON,
} from './CertificateSubject';
import type { KeySpec } from './KeySpec';
import {
    KeySpecFromJSON,
    KeySpecFromJSONTyped,
    KeySpecToJSON,
} from './KeySpec';
import type { LifetimeAction } from './LifetimeAction';
import {
    LifetimeActionFromJSON,
    LifetimeActionFromJSONTyped,
    LifetimeActionToJSON,
} from './LifetimeAction';
import type { SubjectAlternativeNames } from './SubjectAlternativeNames';
import {
    SubjectAlternativeNamesFromJSON,
    SubjectAlternativeNamesFromJSONTyped,
    SubjectAlternativeNamesToJSON,
} from './SubjectAlternativeNames';

/**
 * 
 * @export
 * @interface CertPolicyParameters
 */
export interface CertPolicyParameters {
    /**
     * 
     * @type {string}
     * @memberof CertPolicyParameters
     */
    displayName?: string;
    /**
     * 
     * @type {KeySpec}
     * @memberof CertPolicyParameters
     */
    keySpec?: KeySpec;
    /**
     * 
     * @type {boolean}
     * @memberof CertPolicyParameters
     */
    keyExportable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CertPolicyParameters
     */
    expiryTime: string;
    /**
     * 
     * @type {LifetimeAction}
     * @memberof CertPolicyParameters
     */
    lifetimeAction?: LifetimeAction;
    /**
     * 
     * @type {CertificateSubject}
     * @memberof CertPolicyParameters
     */
    subject: CertificateSubject;
    /**
     * 
     * @type {SubjectAlternativeNames}
     * @memberof CertPolicyParameters
     */
    subjectAlternativeNames?: SubjectAlternativeNames;
    /**
     * 
     * @type {Array<CertificateFlag>}
     * @memberof CertPolicyParameters
     */
    flags?: Array<CertificateFlag>;
}

/**
 * Check if a given object implements the CertPolicyParameters interface.
 */
export function instanceOfCertPolicyParameters(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "expiryTime" in value;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function CertPolicyParametersFromJSON(json: any): CertPolicyParameters {
    return CertPolicyParametersFromJSONTyped(json, false);
}

export function CertPolicyParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertPolicyParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'keySpec': !exists(json, 'keySpec') ? undefined : KeySpecFromJSON(json['keySpec']),
        'keyExportable': !exists(json, 'keyExportable') ? undefined : json['keyExportable'],
        'expiryTime': json['expiryTime'],
        'lifetimeAction': !exists(json, 'lifetimeAction') ? undefined : LifetimeActionFromJSON(json['lifetimeAction']),
        'subject': CertificateSubjectFromJSON(json['subject']),
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : SubjectAlternativeNamesFromJSON(json['subjectAlternativeNames']),
        'flags': !exists(json, 'flags') ? undefined : ((json['flags'] as Array<any>).map(CertificateFlagFromJSON)),
    };
}

export function CertPolicyParametersToJSON(value?: CertPolicyParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName,
        'keySpec': KeySpecToJSON(value.keySpec),
        'keyExportable': value.keyExportable,
        'expiryTime': value.expiryTime,
        'lifetimeAction': LifetimeActionToJSON(value.lifetimeAction),
        'subject': CertificateSubjectToJSON(value.subject),
        'subjectAlternativeNames': SubjectAlternativeNamesToJSON(value.subjectAlternativeNames),
        'flags': value.flags === undefined ? undefined : ((value.flags as Array<any>).map(CertificateFlagToJSON)),
    };
}

