/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';

/**
 * 
 * @export
 * @interface CertificateRefAllOf
 */
export interface CertificateRefAllOf {
    /**
     * Name of the certificate, also the common name (CN) in the subject of the certificate
     * @type {string}
     * @memberof CertificateRefAllOf
     */
    name: string;
    /**
     * 
     * @type {CertificateUsage}
     * @memberof CertificateRefAllOf
     */
    usage: CertificateUsage;
    /**
     * Expiration date of the certificate
     * @type {Date}
     * @memberof CertificateRefAllOf
     */
    notAfter: Date;
    /**
     * Issuer namespace ID
     * @type {string}
     * @memberof CertificateRefAllOf
     */
    issuerNamespace: string;
    /**
     * Issuer certificate ID
     * @type {string}
     * @memberof CertificateRefAllOf
     */
    issuer: string;
    /**
     * Unique ID of the user who created the certificate
     * @type {string}
     * @memberof CertificateRefAllOf
     */
    createdBy: string;
}

/**
 * Check if a given object implements the CertificateRefAllOf interface.
 */
export function instanceOfCertificateRefAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "usage" in value;
    isInstance = isInstance && "notAfter" in value;
    isInstance = isInstance && "issuerNamespace" in value;
    isInstance = isInstance && "issuer" in value;
    isInstance = isInstance && "createdBy" in value;

    return isInstance;
}

export function CertificateRefAllOfFromJSON(json: any): CertificateRefAllOf {
    return CertificateRefAllOfFromJSONTyped(json, false);
}

export function CertificateRefAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateRefAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'usage': CertificateUsageFromJSON(json['usage']),
        'notAfter': (new Date(json['notAfter'])),
        'issuerNamespace': json['issuerNamespace'],
        'issuer': json['issuer'],
        'createdBy': json['createdBy'],
    };
}

export function CertificateRefAllOfToJSON(value?: CertificateRefAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'usage': CertificateUsageToJSON(value.usage),
        'notAfter': (value.notAfter.toISOString()),
        'issuerNamespace': value.issuerNamespace,
        'issuer': value.issuer,
        'createdBy': value.createdBy,
    };
}

