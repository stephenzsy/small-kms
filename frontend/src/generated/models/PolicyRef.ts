/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PolicyType } from './PolicyType';
import {
    PolicyTypeFromJSON,
    PolicyTypeFromJSONTyped,
    PolicyTypeToJSON,
} from './PolicyType';

/**
 * 
 * @export
 * @interface PolicyRef
 */
export interface PolicyRef {
    /**
     * Unique ID of the namespace
     * @type {string}
     * @memberof PolicyRef
     */
    namespaceId: string;
    /**
     * 
     * @type {string}
     * @memberof PolicyRef
     */
    id: string;
    /**
     * Unique ID of the user who created the policy
     * @type {string}
     * @memberof PolicyRef
     */
    updatedBy: string;
    /**
     * Time when the policy was last updated
     * @type {Date}
     * @memberof PolicyRef
     */
    updated: Date;
    /**
     * 
     * @type {PolicyType}
     * @memberof PolicyRef
     */
    policyType: PolicyType;
}

/**
 * Check if a given object implements the PolicyRef interface.
 */
export function instanceOfPolicyRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "namespaceId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "policyType" in value;

    return isInstance;
}

export function PolicyRefFromJSON(json: any): PolicyRef {
    return PolicyRefFromJSONTyped(json, false);
}

export function PolicyRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'namespaceId': json['namespaceId'],
        'id': json['id'],
        'updatedBy': json['updatedBy'],
        'updated': (new Date(json['updated'])),
        'policyType': PolicyTypeFromJSON(json['policyType']),
    };
}

export function PolicyRefToJSON(value?: PolicyRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'namespaceId': value.namespaceId,
        'id': value.id,
        'updatedBy': value.updatedBy,
        'updated': (value.updated.toISOString()),
        'policyType': PolicyTypeToJSON(value.policyType),
    };
}

