/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CertificateRef1
 */
export interface CertificateRef1 {
    /**
     * 
     * @type {string}
     * @memberof CertificateRef1
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateRef1
     */
    locator: string;
    /**
     * Time when the resoruce was last updated
     * @type {Date}
     * @memberof CertificateRef1
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof CertificateRef1
     */
    updatedBy?: string;
    /**
     * Time when the deleted was deleted
     * @type {Date}
     * @memberof CertificateRef1
     */
    deleted?: Date;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CertificateRef1
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof CertificateRef1
     */
    thumbprint: string;
    /**
     * Common name
     * @type {string}
     * @memberof CertificateRef1
     */
    subjectCommonName: string;
    /**
     * Expiration date of the certificate
     * @type {Date}
     * @memberof CertificateRef1
     */
    notAfter: Date;
    /**
     * 
     * @type {string}
     * @memberof CertificateRef1
     */
    template: string;
    /**
     * Whether the certificate has been issued
     * @type {boolean}
     * @memberof CertificateRef1
     */
    isIssued: boolean;
}

/**
 * Check if a given object implements the CertificateRef1 interface.
 */
export function instanceOfCertificateRef1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "locator" in value;
    isInstance = isInstance && "thumbprint" in value;
    isInstance = isInstance && "subjectCommonName" in value;
    isInstance = isInstance && "notAfter" in value;
    isInstance = isInstance && "template" in value;
    isInstance = isInstance && "isIssued" in value;

    return isInstance;
}

export function CertificateRef1FromJSON(json: any): CertificateRef1 {
    return CertificateRef1FromJSONTyped(json, false);
}

export function CertificateRef1FromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateRef1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'locator': json['locator'],
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
        'updatedBy': !exists(json, 'updatedBy') ? undefined : json['updatedBy'],
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'thumbprint': json['thumbprint'],
        'subjectCommonName': json['subjectCommonName'],
        'notAfter': (new Date(json['notAfter'])),
        'template': json['template'],
        'isIssued': json['isIssued'],
    };
}

export function CertificateRef1ToJSON(value?: CertificateRef1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'locator': value.locator,
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
        'updatedBy': value.updatedBy,
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'metadata': value.metadata,
        'thumbprint': value.thumbprint,
        'subjectCommonName': value.subjectCommonName,
        'notAfter': (value.notAfter.toISOString()),
        'template': value.template,
        'isIssued': value.isIssued,
    };
}

