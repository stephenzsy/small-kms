/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';

/**
 * 
 * @export
 * @interface CertificateEnrollPolicyParameters
 */
export interface CertificateEnrollPolicyParameters {
    /**
     * 
     * @type {Array<CertificateUsage>}
     * @memberof CertificateEnrollPolicyParameters
     */
    allowedUsages: Array<CertificateUsage>;
    /**
     * 
     * @type {number}
     * @memberof CertificateEnrollPolicyParameters
     */
    maxValidityInMonths: number;
}

/**
 * Check if a given object implements the CertificateEnrollPolicyParameters interface.
 */
export function instanceOfCertificateEnrollPolicyParameters(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allowedUsages" in value;
    isInstance = isInstance && "maxValidityInMonths" in value;

    return isInstance;
}

export function CertificateEnrollPolicyParametersFromJSON(json: any): CertificateEnrollPolicyParameters {
    return CertificateEnrollPolicyParametersFromJSONTyped(json, false);
}

export function CertificateEnrollPolicyParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEnrollPolicyParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowedUsages': ((json['allowedUsages'] as Array<any>).map(CertificateUsageFromJSON)),
        'maxValidityInMonths': json['maxValidityInMonths'],
    };
}

export function CertificateEnrollPolicyParametersToJSON(value?: CertificateEnrollPolicyParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowedUsages': ((value.allowedUsages as Array<any>).map(CertificateUsageToJSON)),
        'maxValidityInMonths': value.maxValidityInMonths,
    };
}

