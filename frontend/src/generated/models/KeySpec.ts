/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JsonWebKeyCurveName } from './JsonWebKeyCurveName';
import {
    JsonWebKeyCurveNameFromJSON,
    JsonWebKeyCurveNameFromJSONTyped,
    JsonWebKeyCurveNameToJSON,
} from './JsonWebKeyCurveName';
import type { JsonWebKeyOperation } from './JsonWebKeyOperation';
import {
    JsonWebKeyOperationFromJSON,
    JsonWebKeyOperationFromJSONTyped,
    JsonWebKeyOperationToJSON,
} from './JsonWebKeyOperation';
import type { JsonWebKeyType } from './JsonWebKeyType';
import {
    JsonWebKeyTypeFromJSON,
    JsonWebKeyTypeFromJSONTyped,
    JsonWebKeyTypeToJSON,
} from './JsonWebKeyType';

/**
 * these attributes should mostly confirm to JWK (RFC7517)
 * @export
 * @interface KeySpec
 */
export interface KeySpec {
    /**
     * 
     * @type {JsonWebKeyType}
     * @memberof KeySpec
     */
    kty: JsonWebKeyType;
    /**
     * 
     * @type {string}
     * @memberof KeySpec
     */
    kid?: string;
    /**
     * 
     * @type {JsonWebKeyCurveName}
     * @memberof KeySpec
     */
    crv?: JsonWebKeyCurveName;
    /**
     * 
     * @type {number}
     * @memberof KeySpec
     */
    keySize?: number;
    /**
     * 
     * @type {Array<JsonWebKeyOperation>}
     * @memberof KeySpec
     */
    keyOps: Array<JsonWebKeyOperation>;
}

/**
 * Check if a given object implements the KeySpec interface.
 */
export function instanceOfKeySpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kty" in value;
    isInstance = isInstance && "keyOps" in value;

    return isInstance;
}

export function KeySpecFromJSON(json: any): KeySpec {
    return KeySpecFromJSONTyped(json, false);
}

export function KeySpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeySpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kty': JsonWebKeyTypeFromJSON(json['kty']),
        'kid': !exists(json, 'kid') ? undefined : json['kid'],
        'crv': !exists(json, 'crv') ? undefined : JsonWebKeyCurveNameFromJSON(json['crv']),
        'keySize': !exists(json, 'key_size') ? undefined : json['key_size'],
        'keyOps': ((json['key_ops'] as Array<any>).map(JsonWebKeyOperationFromJSON)),
    };
}

export function KeySpecToJSON(value?: KeySpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kty': JsonWebKeyTypeToJSON(value.kty),
        'kid': value.kid,
        'crv': JsonWebKeyCurveNameToJSON(value.crv),
        'key_size': value.keySize,
        'key_ops': ((value.keyOps as Array<any>).map(JsonWebKeyOperationToJSON)),
    };
}

