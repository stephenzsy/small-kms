/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JSONWebKey } from './JSONWebKey';
import {
    JSONWebKeyFromJSON,
    JSONWebKeyFromJSONTyped,
    JSONWebKeyToJSON,
} from './JSONWebKey';

/**
 * 
 * @export
 * @interface CertificateEnrollRequest
 */
export interface CertificateEnrollRequest {
    /**
     * 
     * @type {string}
     * @memberof CertificateEnrollRequest
     */
    ownerNamespaceId: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateEnrollRequest
     */
    policyNamespaceId?: string;
    /**
     * 
     * @type {JSONWebKey}
     * @memberof CertificateEnrollRequest
     */
    publicKey: JSONWebKey;
    /**
     * Required to issue certificate to device with registered owner
     * @type {string}
     * @memberof CertificateEnrollRequest
     */
    deviceOwnerId?: string;
}

/**
 * Check if a given object implements the CertificateEnrollRequest interface.
 */
export function instanceOfCertificateEnrollRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ownerNamespaceId" in value;
    isInstance = isInstance && "publicKey" in value;

    return isInstance;
}

export function CertificateEnrollRequestFromJSON(json: any): CertificateEnrollRequest {
    return CertificateEnrollRequestFromJSONTyped(json, false);
}

export function CertificateEnrollRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEnrollRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ownerNamespaceId': json['ownerNamespaceId'],
        'policyNamespaceId': !exists(json, 'policyNamespaceId') ? undefined : json['policyNamespaceId'],
        'publicKey': JSONWebKeyFromJSON(json['publicKey']),
        'deviceOwnerId': !exists(json, 'deviceOwnerId') ? undefined : json['deviceOwnerId'],
    };
}

export function CertificateEnrollRequestToJSON(value?: CertificateEnrollRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ownerNamespaceId': value.ownerNamespaceId,
        'policyNamespaceId': value.policyNamespaceId,
        'publicKey': JSONWebKeyToJSON(value.publicKey),
        'deviceOwnerId': value.deviceOwnerId,
    };
}

