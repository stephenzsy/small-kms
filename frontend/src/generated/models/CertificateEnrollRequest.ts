/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateIssuerParameters } from './CertificateIssuerParameters';
import {
    CertificateIssuerParametersFromJSON,
    CertificateIssuerParametersFromJSONTyped,
    CertificateIssuerParametersToJSON,
} from './CertificateIssuerParameters';
import type { CertificateRenewalParameters } from './CertificateRenewalParameters';
import {
    CertificateRenewalParametersFromJSON,
    CertificateRenewalParametersFromJSONTyped,
    CertificateRenewalParametersToJSON,
} from './CertificateRenewalParameters';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';
import type { JwkProperties } from './JwkProperties';
import {
    JwkPropertiesFromJSON,
    JwkPropertiesFromJSONTyped,
    JwkPropertiesToJSON,
} from './JwkProperties';

/**
 * 
 * @export
 * @interface CertificateEnrollRequest
 */
export interface CertificateEnrollRequest {
    /**
     * 
     * @type {CertificateIssuerParameters}
     * @memberof CertificateEnrollRequest
     */
    issuer: CertificateIssuerParameters;
    /**
     * 
     * @type {boolean}
     * @memberof CertificateEnrollRequest
     */
    issueToUser?: boolean;
    /**
     * ID of the policy to use for certificate enrollment
     * @type {string}
     * @memberof CertificateEnrollRequest
     */
    policyId: string;
    /**
     * 
     * @type {JwkProperties}
     * @memberof CertificateEnrollRequest
     */
    publicKey: JwkProperties;
    /**
     * 
     * @type {string}
     * @memberof CertificateEnrollRequest
     */
    targetFqdn?: string;
    /**
     * 
     * @type {CertificateUsage}
     * @memberof CertificateEnrollRequest
     */
    usage: CertificateUsage;
    /**
     * 
     * @type {CertificateRenewalParameters}
     * @memberof CertificateEnrollRequest
     */
    renew?: CertificateRenewalParameters;
    /**
     * 
     * @type {number}
     * @memberof CertificateEnrollRequest
     */
    validityMonths: number;
}

/**
 * Check if a given object implements the CertificateEnrollRequest interface.
 */
export function instanceOfCertificateEnrollRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "issuer" in value;
    isInstance = isInstance && "policyId" in value;
    isInstance = isInstance && "publicKey" in value;
    isInstance = isInstance && "usage" in value;
    isInstance = isInstance && "validityMonths" in value;

    return isInstance;
}

export function CertificateEnrollRequestFromJSON(json: any): CertificateEnrollRequest {
    return CertificateEnrollRequestFromJSONTyped(json, false);
}

export function CertificateEnrollRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEnrollRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issuer': CertificateIssuerParametersFromJSON(json['issuer']),
        'issueToUser': !exists(json, 'issueToUser') ? undefined : json['issueToUser'],
        'policyId': json['policyId'],
        'publicKey': JwkPropertiesFromJSON(json['publicKey']),
        'targetFqdn': !exists(json, 'targetFqdn') ? undefined : json['targetFqdn'],
        'usage': CertificateUsageFromJSON(json['usage']),
        'renew': !exists(json, 'renew') ? undefined : CertificateRenewalParametersFromJSON(json['renew']),
        'validityMonths': json['validity_months'],
    };
}

export function CertificateEnrollRequestToJSON(value?: CertificateEnrollRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'issuer': CertificateIssuerParametersToJSON(value.issuer),
        'issueToUser': value.issueToUser,
        'policyId': value.policyId,
        'publicKey': JwkPropertiesToJSON(value.publicKey),
        'targetFqdn': value.targetFqdn,
        'usage': CertificateUsageToJSON(value.usage),
        'renew': CertificateRenewalParametersToJSON(value.renew),
        'validity_months': value.validityMonths,
    };
}

