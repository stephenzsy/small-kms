/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateSubjectAlternativeNames } from './CertificateSubjectAlternativeNames';
import {
    CertificateSubjectAlternativeNamesFromJSON,
    CertificateSubjectAlternativeNamesFromJSONTyped,
    CertificateSubjectAlternativeNamesToJSON,
} from './CertificateSubjectAlternativeNames';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';
import type { JwkProperties } from './JwkProperties';
import {
    JwkPropertiesFromJSON,
    JwkPropertiesFromJSONTyped,
    JwkPropertiesToJSON,
} from './JwkProperties';
import type { Ref } from './Ref';
import {
    RefFromJSON,
    RefFromJSONTyped,
    RefToJSON,
} from './Ref';
import type { RefWithMetadata } from './RefWithMetadata';
import {
    RefWithMetadataFromJSON,
    RefWithMetadataFromJSONTyped,
    RefWithMetadataToJSON,
} from './RefWithMetadata';

/**
 * 
 * @export
 * @interface CertificateInfo
 */
export interface CertificateInfo {
    /**
     * 
     * @type {RefWithMetadata}
     * @memberof CertificateInfo
     */
    ref: RefWithMetadata;
    /**
     * Common name
     * @type {string}
     * @memberof CertificateInfo
     */
    commonName: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateInfo
     */
    subject: string;
    /**
     * 
     * @type {CertificateSubjectAlternativeNames}
     * @memberof CertificateInfo
     */
    subjectAlternativeNames?: CertificateSubjectAlternativeNames;
    /**
     * Expiration date of the certificate
     * @type {Date}
     * @memberof CertificateInfo
     */
    notBefore: Date;
    /**
     * Expiration date of the certificate
     * @type {Date}
     * @memberof CertificateInfo
     */
    notAfter: Date;
    /**
     * 
     * @type {CertificateUsage}
     * @memberof CertificateInfo
     */
    usage: CertificateUsage;
    /**
     * 
     * @type {JwkProperties}
     * @memberof CertificateInfo
     */
    jwk?: JwkProperties;
    /**
     * 
     * @type {string}
     * @memberof CertificateInfo
     */
    pem?: string;
    /**
     * 
     * @type {Ref}
     * @memberof CertificateInfo
     */
    template: Ref;
    /**
     * 
     * @type {Ref}
     * @memberof CertificateInfo
     */
    issuerCertificate: Ref;
}

/**
 * Check if a given object implements the CertificateInfo interface.
 */
export function instanceOfCertificateInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ref" in value;
    isInstance = isInstance && "commonName" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "notBefore" in value;
    isInstance = isInstance && "notAfter" in value;
    isInstance = isInstance && "usage" in value;
    isInstance = isInstance && "template" in value;
    isInstance = isInstance && "issuerCertificate" in value;

    return isInstance;
}

export function CertificateInfoFromJSON(json: any): CertificateInfo {
    return CertificateInfoFromJSONTyped(json, false);
}

export function CertificateInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ref': RefWithMetadataFromJSON(json['ref']),
        'commonName': json['commonName'],
        'subject': json['subject'],
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : CertificateSubjectAlternativeNamesFromJSON(json['subjectAlternativeNames']),
        'notBefore': (new Date(json['notBefore'])),
        'notAfter': (new Date(json['notAfter'])),
        'usage': CertificateUsageFromJSON(json['usage']),
        'jwk': !exists(json, 'jwk') ? undefined : JwkPropertiesFromJSON(json['jwk']),
        'pem': !exists(json, 'pem') ? undefined : json['pem'],
        'template': RefFromJSON(json['template']),
        'issuerCertificate': RefFromJSON(json['issuerCertificate']),
    };
}

export function CertificateInfoToJSON(value?: CertificateInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ref': RefWithMetadataToJSON(value.ref),
        'commonName': value.commonName,
        'subject': value.subject,
        'subjectAlternativeNames': CertificateSubjectAlternativeNamesToJSON(value.subjectAlternativeNames),
        'notBefore': (value.notBefore.toISOString()),
        'notAfter': (value.notAfter.toISOString()),
        'usage': CertificateUsageToJSON(value.usage),
        'jwk': JwkPropertiesToJSON(value.jwk),
        'pem': value.pem,
        'template': RefToJSON(value.template),
        'issuerCertificate': RefToJSON(value.issuerCertificate),
    };
}

