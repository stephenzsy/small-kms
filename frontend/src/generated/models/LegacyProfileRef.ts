/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NamespaceKind1 } from './NamespaceKind1';
import {
    NamespaceKind1FromJSON,
    NamespaceKind1FromJSONTyped,
    NamespaceKind1ToJSON,
} from './NamespaceKind1';

/**
 * 
 * @export
 * @interface LegacyProfileRef
 */
export interface LegacyProfileRef {
    /**
     * 
     * @type {string}
     * @memberof LegacyProfileRef
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof LegacyProfileRef
     */
    locator: string;
    /**
     * Time when the resoruce was last updated
     * @type {Date}
     * @memberof LegacyProfileRef
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof LegacyProfileRef
     */
    updatedBy?: string;
    /**
     * Time when the deleted was deleted
     * @type {Date}
     * @memberof LegacyProfileRef
     */
    deleted?: Date;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof LegacyProfileRef
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {NamespaceKind1}
     * @memberof LegacyProfileRef
     */
    type: NamespaceKind1;
    /**
     * Display name of the resource
     * @type {string}
     * @memberof LegacyProfileRef
     */
    displayName: string;
    /**
     * Whether the resource is managed by the application
     * @type {boolean}
     * @memberof LegacyProfileRef
     */
    isAppManaged?: boolean;
}

/**
 * Check if a given object implements the LegacyProfileRef interface.
 */
export function instanceOfLegacyProfileRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "locator" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "displayName" in value;

    return isInstance;
}

export function LegacyProfileRefFromJSON(json: any): LegacyProfileRef {
    return LegacyProfileRefFromJSONTyped(json, false);
}

export function LegacyProfileRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): LegacyProfileRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'locator': json['locator'],
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
        'updatedBy': !exists(json, 'updatedBy') ? undefined : json['updatedBy'],
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'type': NamespaceKind1FromJSON(json['type']),
        'displayName': json['displayName'],
        'isAppManaged': !exists(json, 'isAppManaged') ? undefined : json['isAppManaged'],
    };
}

export function LegacyProfileRefToJSON(value?: LegacyProfileRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'locator': value.locator,
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
        'updatedBy': value.updatedBy,
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'metadata': value.metadata,
        'type': NamespaceKind1ToJSON(value.type),
        'displayName': value.displayName,
        'isAppManaged': value.isAppManaged,
    };
}

