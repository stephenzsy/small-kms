/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateIssuer } from './CertificateIssuer';
import {
    CertificateIssuerFromJSON,
    CertificateIssuerFromJSONTyped,
    CertificateIssuerToJSON,
} from './CertificateIssuer';
import type { CertificateLifetimeTrigger } from './CertificateLifetimeTrigger';
import {
    CertificateLifetimeTriggerFromJSON,
    CertificateLifetimeTriggerFromJSONTyped,
    CertificateLifetimeTriggerToJSON,
} from './CertificateLifetimeTrigger';
import type { CertificateSubject } from './CertificateSubject';
import {
    CertificateSubjectFromJSON,
    CertificateSubjectFromJSONTyped,
    CertificateSubjectToJSON,
} from './CertificateSubject';
import type { CertificateSubjectAlternativeNames } from './CertificateSubjectAlternativeNames';
import {
    CertificateSubjectAlternativeNamesFromJSON,
    CertificateSubjectAlternativeNamesFromJSONTyped,
    CertificateSubjectAlternativeNamesToJSON,
} from './CertificateSubjectAlternativeNames';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';
import type { JwkProperties } from './JwkProperties';
import {
    JwkPropertiesFromJSON,
    JwkPropertiesFromJSONTyped,
    JwkPropertiesToJSON,
} from './JwkProperties';
import type { RefWithMetadata } from './RefWithMetadata';
import {
    RefWithMetadataFromJSON,
    RefWithMetadataFromJSONTyped,
    RefWithMetadataToJSON,
} from './RefWithMetadata';

/**
 * 
 * @export
 * @interface CertificateTemplate
 */
export interface CertificateTemplate {
    /**
     * 
     * @type {RefWithMetadata}
     * @memberof CertificateTemplate
     */
    ref: RefWithMetadata;
    /**
     * 
     * @type {string}
     * @memberof CertificateTemplate
     */
    displayName: string;
    /**
     * 
     * @type {CertificateIssuer}
     * @memberof CertificateTemplate
     */
    issuer: CertificateIssuer;
    /**
     * 
     * @type {JwkProperties}
     * @memberof CertificateTemplate
     */
    keyProperties?: JwkProperties;
    /**
     * 
     * @type {CertificateSubject}
     * @memberof CertificateTemplate
     */
    subject: CertificateSubject;
    /**
     * 
     * @type {CertificateSubjectAlternativeNames}
     * @memberof CertificateTemplate
     */
    subjectAlternativeNames?: CertificateSubjectAlternativeNames;
    /**
     * 
     * @type {CertificateUsage}
     * @memberof CertificateTemplate
     */
    usage: CertificateUsage;
    /**
     * 
     * @type {number}
     * @memberof CertificateTemplate
     */
    validityMonths?: number;
    /**
     * 
     * @type {string}
     * @memberof CertificateTemplate
     */
    keyStorePath?: string;
    /**
     * 
     * @type {CertificateLifetimeTrigger}
     * @memberof CertificateTemplate
     */
    lifetimeTrigger?: CertificateLifetimeTrigger;
    /**
     * Keep using the same key version if exists
     * @type {boolean}
     * @memberof CertificateTemplate
     */
    reuseKey?: boolean;
}

/**
 * Check if a given object implements the CertificateTemplate interface.
 */
export function instanceOfCertificateTemplate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "ref" in value;
    isInstance = isInstance && "displayName" in value;
    isInstance = isInstance && "issuer" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function CertificateTemplateFromJSON(json: any): CertificateTemplate {
    return CertificateTemplateFromJSONTyped(json, false);
}

export function CertificateTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateTemplate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ref': RefWithMetadataFromJSON(json['ref']),
        'displayName': json['displayName'],
        'issuer': CertificateIssuerFromJSON(json['issuer']),
        'keyProperties': !exists(json, 'keyProperties') ? undefined : JwkPropertiesFromJSON(json['keyProperties']),
        'subject': CertificateSubjectFromJSON(json['subject']),
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : CertificateSubjectAlternativeNamesFromJSON(json['subjectAlternativeNames']),
        'usage': CertificateUsageFromJSON(json['usage']),
        'validityMonths': !exists(json, 'validity_months') ? undefined : json['validity_months'],
        'keyStorePath': !exists(json, 'keyStorePath') ? undefined : json['keyStorePath'],
        'lifetimeTrigger': !exists(json, 'lifetimeTrigger') ? undefined : CertificateLifetimeTriggerFromJSON(json['lifetimeTrigger']),
        'reuseKey': !exists(json, 'reuse_key') ? undefined : json['reuse_key'],
    };
}

export function CertificateTemplateToJSON(value?: CertificateTemplate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ref': RefWithMetadataToJSON(value.ref),
        'displayName': value.displayName,
        'issuer': CertificateIssuerToJSON(value.issuer),
        'keyProperties': JwkPropertiesToJSON(value.keyProperties),
        'subject': CertificateSubjectToJSON(value.subject),
        'subjectAlternativeNames': CertificateSubjectAlternativeNamesToJSON(value.subjectAlternativeNames),
        'usage': CertificateUsageToJSON(value.usage),
        'validity_months': value.validityMonths,
        'keyStorePath': value.keyStorePath,
        'lifetimeTrigger': CertificateLifetimeTriggerToJSON(value.lifetimeTrigger),
        'reuse_key': value.reuseKey,
    };
}

