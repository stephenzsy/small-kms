/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateEnrollmentTargetType } from './CertificateEnrollmentTargetType';
import {
    CertificateEnrollmentTargetTypeFromJSON,
    CertificateEnrollmentTargetTypeFromJSONTyped,
    CertificateEnrollmentTargetTypeToJSON,
} from './CertificateEnrollmentTargetType';

/**
 * 
 * @export
 * @interface CertificateEnrollmentRequestDeviceLinkedServicePrincipal
 */
export interface CertificateEnrollmentRequestDeviceLinkedServicePrincipal {
    /**
     * 
     * @type {CertificateEnrollmentTargetType}
     * @memberof CertificateEnrollmentRequestDeviceLinkedServicePrincipal
     */
    type: CertificateEnrollmentTargetType;
    /**
     * Object ID of the device
     * @type {string}
     * @memberof CertificateEnrollmentRequestDeviceLinkedServicePrincipal
     */
    deviceNamespaceId: string;
    /**
     * Unique ID of the device link
     * @type {string}
     * @memberof CertificateEnrollmentRequestDeviceLinkedServicePrincipal
     */
    linkId: string;
    /**
     * Client ID of the application
     * @type {string}
     * @memberof CertificateEnrollmentRequestDeviceLinkedServicePrincipal
     */
    appId: string;
    /**
     * Object ID of the service principal
     * @type {string}
     * @memberof CertificateEnrollmentRequestDeviceLinkedServicePrincipal
     */
    servicePrincipalId: string;
    /**
     * Common Name to appear in the certificate
     * @type {string}
     * @memberof CertificateEnrollmentRequestDeviceLinkedServicePrincipal
     */
    commonName?: string;
}

/**
 * Check if a given object implements the CertificateEnrollmentRequestDeviceLinkedServicePrincipal interface.
 */
export function instanceOfCertificateEnrollmentRequestDeviceLinkedServicePrincipal(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "deviceNamespaceId" in value;
    isInstance = isInstance && "linkId" in value;
    isInstance = isInstance && "appId" in value;
    isInstance = isInstance && "servicePrincipalId" in value;

    return isInstance;
}

export function CertificateEnrollmentRequestDeviceLinkedServicePrincipalFromJSON(json: any): CertificateEnrollmentRequestDeviceLinkedServicePrincipal {
    return CertificateEnrollmentRequestDeviceLinkedServicePrincipalFromJSONTyped(json, false);
}

export function CertificateEnrollmentRequestDeviceLinkedServicePrincipalFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEnrollmentRequestDeviceLinkedServicePrincipal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': CertificateEnrollmentTargetTypeFromJSON(json['type']),
        'deviceNamespaceId': json['deviceNamespaceId'],
        'linkId': json['linkId'],
        'appId': json['appId'],
        'servicePrincipalId': json['servicePrincipalId'],
        'commonName': !exists(json, 'commonName') ? undefined : json['commonName'],
    };
}

export function CertificateEnrollmentRequestDeviceLinkedServicePrincipalToJSON(value?: CertificateEnrollmentRequestDeviceLinkedServicePrincipal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': CertificateEnrollmentTargetTypeToJSON(value.type),
        'deviceNamespaceId': value.deviceNamespaceId,
        'linkId': value.linkId,
        'appId': value.appId,
        'servicePrincipalId': value.servicePrincipalId,
        'commonName': value.commonName,
    };
}

