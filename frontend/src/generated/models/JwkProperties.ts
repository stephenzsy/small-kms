/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurveName } from './CurveName';
import {
    CurveNameFromJSON,
    CurveNameFromJSONTyped,
    CurveNameToJSON,
} from './CurveName';
import type { JwkAlg } from './JwkAlg';
import {
    JwkAlgFromJSON,
    JwkAlgFromJSONTyped,
    JwkAlgToJSON,
} from './JwkAlg';
import type { JwkKeyOperation } from './JwkKeyOperation';
import {
    JwkKeyOperationFromJSON,
    JwkKeyOperationFromJSONTyped,
    JwkKeyOperationToJSON,
} from './JwkKeyOperation';
import type { JwkKeySize } from './JwkKeySize';
import {
    JwkKeySizeFromJSON,
    JwkKeySizeFromJSONTyped,
    JwkKeySizeToJSON,
} from './JwkKeySize';
import type { KeyType } from './KeyType';
import {
    KeyTypeFromJSON,
    KeyTypeFromJSONTyped,
    KeyTypeToJSON,
} from './KeyType';

/**
 * Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
 * @export
 * @interface JwkProperties
 */
export interface JwkProperties {
    /**
     * 
     * @type {JwkAlg}
     * @memberof JwkProperties
     */
    alg?: JwkAlg;
    /**
     * 
     * @type {KeyType}
     * @memberof JwkProperties
     */
    kty: KeyType;
    /**
     * 
     * @type {JwkKeySize}
     * @memberof JwkProperties
     */
    keySize?: JwkKeySize;
    /**
     * 
     * @type {JwkKeyOperation}
     * @memberof JwkProperties
     */
    keyOps?: JwkKeyOperation;
    /**
     * RSA modulus
     * @type {string}
     * @memberof JwkProperties
     */
    n?: string;
    /**
     * RSA exponent
     * @type {string}
     * @memberof JwkProperties
     */
    e?: string;
    /**
     * 
     * @type {CurveName}
     * @memberof JwkProperties
     */
    crv?: CurveName;
    /**
     * EC x coordinate
     * @type {string}
     * @memberof JwkProperties
     */
    x?: string;
    /**
     * EC y coordinate
     * @type {string}
     * @memberof JwkProperties
     */
    y?: string;
    /**
     * Key ID
     * @type {string}
     * @memberof JwkProperties
     */
    kid?: string;
    /**
     * X.509 certificate URL
     * @type {string}
     * @memberof JwkProperties
     */
    x5u?: string;
    /**
     * X.509 certificate chain
     * @type {Array<string>}
     * @memberof JwkProperties
     */
    x5c?: Array<string>;
    /**
     * X.509 certificate SHA-1 thumbprint
     * @type {string}
     * @memberof JwkProperties
     */
    x5t?: string;
    /**
     * X.509 certificate SHA-256 thumbprint
     * @type {string}
     * @memberof JwkProperties
     */
    x5tS256?: string;
}

/**
 * Check if a given object implements the JwkProperties interface.
 */
export function instanceOfJwkProperties(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kty" in value;

    return isInstance;
}

export function JwkPropertiesFromJSON(json: any): JwkProperties {
    return JwkPropertiesFromJSONTyped(json, false);
}

export function JwkPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): JwkProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alg': !exists(json, 'alg') ? undefined : JwkAlgFromJSON(json['alg']),
        'kty': KeyTypeFromJSON(json['kty']),
        'keySize': !exists(json, 'key_size') ? undefined : JwkKeySizeFromJSON(json['key_size']),
        'keyOps': !exists(json, 'key_ops') ? undefined : JwkKeyOperationFromJSON(json['key_ops']),
        'n': !exists(json, 'n') ? undefined : json['n'],
        'e': !exists(json, 'e') ? undefined : json['e'],
        'crv': !exists(json, 'crv') ? undefined : CurveNameFromJSON(json['crv']),
        'x': !exists(json, 'x') ? undefined : json['x'],
        'y': !exists(json, 'y') ? undefined : json['y'],
        'kid': !exists(json, 'kid') ? undefined : json['kid'],
        'x5u': !exists(json, 'x5u') ? undefined : json['x5u'],
        'x5c': !exists(json, 'x5c') ? undefined : json['x5c'],
        'x5t': !exists(json, 'x5t') ? undefined : json['x5t'],
        'x5tS256': !exists(json, 'x5t#S256') ? undefined : json['x5t#S256'],
    };
}

export function JwkPropertiesToJSON(value?: JwkProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alg': JwkAlgToJSON(value.alg),
        'kty': KeyTypeToJSON(value.kty),
        'key_size': JwkKeySizeToJSON(value.keySize),
        'key_ops': JwkKeyOperationToJSON(value.keyOps),
        'n': value.n,
        'e': value.e,
        'crv': CurveNameToJSON(value.crv),
        'x': value.x,
        'y': value.y,
        'kid': value.kid,
        'x5u': value.x5u,
        'x5c': value.x5c,
        'x5t': value.x5t,
        'x5t#S256': value.x5tS256,
    };
}

