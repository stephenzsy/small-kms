/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateAadAppCredPolicyParameters } from './CertificateAadAppCredPolicyParameters';
import {
    CertificateAadAppCredPolicyParametersFromJSON,
    CertificateAadAppCredPolicyParametersFromJSONTyped,
    CertificateAadAppCredPolicyParametersToJSON,
} from './CertificateAadAppCredPolicyParameters';
import type { CertificateEnrollPolicyParameters } from './CertificateEnrollPolicyParameters';
import {
    CertificateEnrollPolicyParametersFromJSON,
    CertificateEnrollPolicyParametersFromJSONTyped,
    CertificateEnrollPolicyParametersToJSON,
} from './CertificateEnrollPolicyParameters';
import type { CertificateRequestPolicyParameters } from './CertificateRequestPolicyParameters';
import {
    CertificateRequestPolicyParametersFromJSON,
    CertificateRequestPolicyParametersFromJSONTyped,
    CertificateRequestPolicyParametersToJSON,
} from './CertificateRequestPolicyParameters';
import type { PolicyType } from './PolicyType';
import {
    PolicyTypeFromJSON,
    PolicyTypeFromJSONTyped,
    PolicyTypeToJSON,
} from './PolicyType';

/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * Unique ID of the namespace
     * @type {string}
     * @memberof Policy
     */
    namespaceId: string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    id: string;
    /**
     * Unique ID of the user who created the policy
     * @type {string}
     * @memberof Policy
     */
    updatedBy: string;
    /**
     * Time when the policy was last updated
     * @type {Date}
     * @memberof Policy
     */
    updated: Date;
    /**
     * Time when the policy was deleted
     * @type {Date}
     * @memberof Policy
     */
    deleted?: Date;
    /**
     * 
     * @type {PolicyType}
     * @memberof Policy
     */
    policyType: PolicyType;
    /**
     * 
     * @type {CertificateRequestPolicyParameters}
     * @memberof Policy
     */
    certRequest?: CertificateRequestPolicyParameters;
    /**
     * 
     * @type {CertificateEnrollPolicyParameters}
     * @memberof Policy
     */
    certEnroll?: CertificateEnrollPolicyParameters;
    /**
     * 
     * @type {CertificateAadAppCredPolicyParameters}
     * @memberof Policy
     */
    certAadAppCred?: CertificateAadAppCredPolicyParameters;
}

/**
 * Check if a given object implements the Policy interface.
 */
export function instanceOfPolicy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "namespaceId" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "policyType" in value;

    return isInstance;
}

export function PolicyFromJSON(json: any): Policy {
    return PolicyFromJSONTyped(json, false);
}

export function PolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Policy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'namespaceId': json['namespaceId'],
        'id': json['id'],
        'updatedBy': json['updatedBy'],
        'updated': (new Date(json['updated'])),
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'policyType': PolicyTypeFromJSON(json['policyType']),
        'certRequest': !exists(json, 'certRequest') ? undefined : CertificateRequestPolicyParametersFromJSON(json['certRequest']),
        'certEnroll': !exists(json, 'certEnroll') ? undefined : CertificateEnrollPolicyParametersFromJSON(json['certEnroll']),
        'certAadAppCred': !exists(json, 'certAadAppCred') ? undefined : CertificateAadAppCredPolicyParametersFromJSON(json['certAadAppCred']),
    };
}

export function PolicyToJSON(value?: Policy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'namespaceId': value.namespaceId,
        'id': value.id,
        'updatedBy': value.updatedBy,
        'updated': (value.updated.toISOString()),
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'policyType': PolicyTypeToJSON(value.policyType),
        'certRequest': CertificateRequestPolicyParametersToJSON(value.certRequest),
        'certEnroll': CertificateEnrollPolicyParametersToJSON(value.certEnroll),
        'certAadAppCred': CertificateAadAppCredPolicyParametersToJSON(value.certAadAppCred),
    };
}

