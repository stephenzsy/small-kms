/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RadiusServerListenerType } from './RadiusServerListenerType';
import {
    RadiusServerListenerTypeFromJSON,
    RadiusServerListenerTypeFromJSONTyped,
    RadiusServerListenerTypeToJSON,
} from './RadiusServerListenerType';

/**
 * 
 * @export
 * @interface RadiusServerListenConfig
 */
export interface RadiusServerListenConfig {
    /**
     * 
     * @type {RadiusServerListenerType}
     * @memberof RadiusServerListenConfig
     */
    type: RadiusServerListenerType;
    /**
     * 
     * @type {string}
     * @memberof RadiusServerListenConfig
     */
    ipaddr: string;
    /**
     * 
     * @type {number}
     * @memberof RadiusServerListenConfig
     */
    port: number;
}

/**
 * Check if a given object implements the RadiusServerListenConfig interface.
 */
export function instanceOfRadiusServerListenConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "ipaddr" in value;
    isInstance = isInstance && "port" in value;

    return isInstance;
}

export function RadiusServerListenConfigFromJSON(json: any): RadiusServerListenConfig {
    return RadiusServerListenConfigFromJSONTyped(json, false);
}

export function RadiusServerListenConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): RadiusServerListenConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': RadiusServerListenerTypeFromJSON(json['type']),
        'ipaddr': json['ipaddr'],
        'port': json['port'],
    };
}

export function RadiusServerListenConfigToJSON(value?: RadiusServerListenConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': RadiusServerListenerTypeToJSON(value.type),
        'ipaddr': value.ipaddr,
        'port': value.port,
    };
}

