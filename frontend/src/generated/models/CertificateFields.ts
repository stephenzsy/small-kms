/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateFlag } from './CertificateFlag';
import {
    CertificateFlagFromJSON,
    CertificateFlagFromJSONTyped,
    CertificateFlagToJSON,
} from './CertificateFlag';
import type { CertificateSubject } from './CertificateSubject';
import {
    CertificateSubjectFromJSON,
    CertificateSubjectFromJSONTyped,
    CertificateSubjectToJSON,
} from './CertificateSubject';
import type { JsonWebKeySignatureAlgorithm } from './JsonWebKeySignatureAlgorithm';
import {
    JsonWebKeySignatureAlgorithmFromJSON,
    JsonWebKeySignatureAlgorithmFromJSONTyped,
    JsonWebKeySignatureAlgorithmToJSON,
} from './JsonWebKeySignatureAlgorithm';
import type { SubjectAlternativeNames } from './SubjectAlternativeNames';
import {
    SubjectAlternativeNamesFromJSON,
    SubjectAlternativeNamesFromJSONTyped,
    SubjectAlternativeNamesToJSON,
} from './SubjectAlternativeNames';

/**
 * 
 * @export
 * @interface CertificateFields
 */
export interface CertificateFields {
    /**
     * 
     * @type {CertificateSubject}
     * @memberof CertificateFields
     */
    subject: CertificateSubject;
    /**
     * 
     * @type {SubjectAlternativeNames}
     * @memberof CertificateFields
     */
    subjectAlternativeNames?: SubjectAlternativeNames;
    /**
     * 
     * @type {Array<CertificateFlag>}
     * @memberof CertificateFields
     */
    flags?: Array<CertificateFlag>;
    /**
     * 
     * @type {JsonWebKeySignatureAlgorithm}
     * @memberof CertificateFields
     */
    alg: JsonWebKeySignatureAlgorithm;
    /**
     * 
     * @type {string}
     * @memberof CertificateFields
     */
    x5u?: string;
    /**
     * Base64 encoded certificate chain
     * @type {Array<string>}
     * @memberof CertificateFields
     */
    x5c?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CertificateFields
     */
    x5t: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateFields
     */
    x5tS256: string;
}

/**
 * Check if a given object implements the CertificateFields interface.
 */
export function instanceOfCertificateFields(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "alg" in value;
    isInstance = isInstance && "x5t" in value;
    isInstance = isInstance && "x5tS256" in value;

    return isInstance;
}

export function CertificateFieldsFromJSON(json: any): CertificateFields {
    return CertificateFieldsFromJSONTyped(json, false);
}

export function CertificateFieldsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateFields {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': CertificateSubjectFromJSON(json['subject']),
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : SubjectAlternativeNamesFromJSON(json['subjectAlternativeNames']),
        'flags': !exists(json, 'flags') ? undefined : ((json['flags'] as Array<any>).map(CertificateFlagFromJSON)),
        'alg': JsonWebKeySignatureAlgorithmFromJSON(json['alg']),
        'x5u': !exists(json, 'x5u') ? undefined : json['x5u'],
        'x5c': !exists(json, 'x5c') ? undefined : json['x5c'],
        'x5t': json['x5t'],
        'x5tS256': json['x5t#S256'],
    };
}

export function CertificateFieldsToJSON(value?: CertificateFields | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': CertificateSubjectToJSON(value.subject),
        'subjectAlternativeNames': SubjectAlternativeNamesToJSON(value.subjectAlternativeNames),
        'flags': value.flags === undefined ? undefined : ((value.flags as Array<any>).map(CertificateFlagToJSON)),
        'alg': JsonWebKeySignatureAlgorithmToJSON(value.alg),
        'x5u': value.x5u,
        'x5c': value.x5c,
        'x5t': value.x5t,
        'x5t#S256': value.x5tS256,
    };
}

