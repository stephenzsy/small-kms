/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NamespaceTypeShortName } from './NamespaceTypeShortName';
import {
    NamespaceTypeShortNameFromJSON,
    NamespaceTypeShortNameFromJSONTyped,
    NamespaceTypeShortNameToJSON,
} from './NamespaceTypeShortName';

/**
 * 
 * @export
 * @interface CertificateEnrollmentRequest
 */
export interface CertificateEnrollmentRequest {
    /**
     * 
     * @type {NamespaceTypeShortName}
     * @memberof CertificateEnrollmentRequest
     */
    targetNamespaceType: NamespaceTypeShortName;
    /**
     * Unique ID of the namespace to issue the certificate to
     * @type {string}
     * @memberof CertificateEnrollmentRequest
     */
    targetNamespaceId: string;
    /**
     * Fully qualified domain name to be used in the certificate
     * @type {string}
     * @memberof CertificateEnrollmentRequest
     */
    fqdn?: string;
}

/**
 * Check if a given object implements the CertificateEnrollmentRequest interface.
 */
export function instanceOfCertificateEnrollmentRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "targetNamespaceType" in value;
    isInstance = isInstance && "targetNamespaceId" in value;

    return isInstance;
}

export function CertificateEnrollmentRequestFromJSON(json: any): CertificateEnrollmentRequest {
    return CertificateEnrollmentRequestFromJSONTyped(json, false);
}

export function CertificateEnrollmentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateEnrollmentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'targetNamespaceType': NamespaceTypeShortNameFromJSON(json['targetNamespaceType']),
        'targetNamespaceId': json['targetNamespaceId'],
        'fqdn': !exists(json, 'fqdn') ? undefined : json['fqdn'],
    };
}

export function CertificateEnrollmentRequestToJSON(value?: CertificateEnrollmentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'targetNamespaceType': NamespaceTypeShortNameToJSON(value.targetNamespaceType),
        'targetNamespaceId': value.targetNamespaceId,
        'fqdn': value.fqdn,
    };
}

