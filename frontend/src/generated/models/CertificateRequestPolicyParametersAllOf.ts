/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateLifetimeTrigger } from './CertificateLifetimeTrigger';
import {
    CertificateLifetimeTriggerFromJSON,
    CertificateLifetimeTriggerFromJSONTyped,
    CertificateLifetimeTriggerToJSON,
} from './CertificateLifetimeTrigger';
import type { CertificateSubject } from './CertificateSubject';
import {
    CertificateSubjectFromJSON,
    CertificateSubjectFromJSONTyped,
    CertificateSubjectToJSON,
} from './CertificateSubject';
import type { CertificateSubjectAlternativeNames } from './CertificateSubjectAlternativeNames';
import {
    CertificateSubjectAlternativeNamesFromJSON,
    CertificateSubjectAlternativeNamesFromJSONTyped,
    CertificateSubjectAlternativeNamesToJSON,
} from './CertificateSubjectAlternativeNames';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';
import type { KeyProperties } from './KeyProperties';
import {
    KeyPropertiesFromJSON,
    KeyPropertiesFromJSONTyped,
    KeyPropertiesToJSON,
} from './KeyProperties';

/**
 * 
 * @export
 * @interface CertificateRequestPolicyParametersAllOf
 */
export interface CertificateRequestPolicyParametersAllOf {
    /**
     * 
     * @type {KeyProperties}
     * @memberof CertificateRequestPolicyParametersAllOf
     */
    keyProperties?: KeyProperties;
    /**
     * 
     * @type {CertificateSubject}
     * @memberof CertificateRequestPolicyParametersAllOf
     */
    subject: CertificateSubject;
    /**
     * 
     * @type {CertificateSubjectAlternativeNames}
     * @memberof CertificateRequestPolicyParametersAllOf
     */
    subjectAlternativeNames?: CertificateSubjectAlternativeNames;
    /**
     * 
     * @type {CertificateUsage}
     * @memberof CertificateRequestPolicyParametersAllOf
     */
    usage: CertificateUsage;
    /**
     * 
     * @type {number}
     * @memberof CertificateRequestPolicyParametersAllOf
     */
    validityMonths?: number;
    /**
     * 
     * @type {CertificateLifetimeTrigger}
     * @memberof CertificateRequestPolicyParametersAllOf
     */
    lifetimeTrigger?: CertificateLifetimeTrigger;
}

/**
 * Check if a given object implements the CertificateRequestPolicyParametersAllOf interface.
 */
export function instanceOfCertificateRequestPolicyParametersAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function CertificateRequestPolicyParametersAllOfFromJSON(json: any): CertificateRequestPolicyParametersAllOf {
    return CertificateRequestPolicyParametersAllOfFromJSONTyped(json, false);
}

export function CertificateRequestPolicyParametersAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateRequestPolicyParametersAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'keyProperties': !exists(json, 'keyProperties') ? undefined : KeyPropertiesFromJSON(json['keyProperties']),
        'subject': CertificateSubjectFromJSON(json['subject']),
        'subjectAlternativeNames': !exists(json, 'subjectAlternativeNames') ? undefined : CertificateSubjectAlternativeNamesFromJSON(json['subjectAlternativeNames']),
        'usage': CertificateUsageFromJSON(json['usage']),
        'validityMonths': !exists(json, 'validity_months') ? undefined : json['validity_months'],
        'lifetimeTrigger': !exists(json, 'lifetimeTrigger') ? undefined : CertificateLifetimeTriggerFromJSON(json['lifetimeTrigger']),
    };
}

export function CertificateRequestPolicyParametersAllOfToJSON(value?: CertificateRequestPolicyParametersAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'keyProperties': KeyPropertiesToJSON(value.keyProperties),
        'subject': CertificateSubjectToJSON(value.subject),
        'subjectAlternativeNames': CertificateSubjectAlternativeNamesToJSON(value.subjectAlternativeNames),
        'usage': CertificateUsageToJSON(value.usage),
        'validity_months': value.validityMonths,
        'lifetimeTrigger': CertificateLifetimeTriggerToJSON(value.lifetimeTrigger),
    };
}

