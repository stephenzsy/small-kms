/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificateSubject } from './CertificateSubject';
import {
    CertificateSubjectFromJSON,
    CertificateSubjectFromJSONTyped,
    CertificateSubjectToJSON,
} from './CertificateSubject';
import type { CertificateUsage } from './CertificateUsage';
import {
    CertificateUsageFromJSON,
    CertificateUsageFromJSONTyped,
    CertificateUsageToJSON,
} from './CertificateUsage';
import type { CreateCertificateOptions } from './CreateCertificateOptions';
import {
    CreateCertificateOptionsFromJSON,
    CreateCertificateOptionsFromJSONTyped,
    CreateCertificateOptionsToJSON,
} from './CreateCertificateOptions';

/**
 * 
 * @export
 * @interface CreateCertificateParameters
 */
export interface CreateCertificateParameters {
    /**
     * 
     * @type {CertificateUsage}
     * @memberof CreateCertificateParameters
     */
    usage: CertificateUsage;
    /**
     * 
     * @type {CertificateSubject}
     * @memberof CreateCertificateParameters
     */
    subject: CertificateSubject;
    /**
     * 
     * @type {string}
     * @memberof CreateCertificateParameters
     */
    validity?: string;
    /**
     * Issuer of the certificate
     * @type {string}
     * @memberof CreateCertificateParameters
     */
    issuerNamespace: string;
    /**
     * Issuer of the certificate
     * @type {string}
     * @memberof CreateCertificateParameters
     */
    issuer: string;
    /**
     * 
     * @type {CreateCertificateOptions}
     * @memberof CreateCertificateParameters
     */
    options?: CreateCertificateOptions;
}

/**
 * Check if a given object implements the CreateCertificateParameters interface.
 */
export function instanceOfCreateCertificateParameters(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "usage" in value;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "issuerNamespace" in value;
    isInstance = isInstance && "issuer" in value;

    return isInstance;
}

export function CreateCertificateParametersFromJSON(json: any): CreateCertificateParameters {
    return CreateCertificateParametersFromJSONTyped(json, false);
}

export function CreateCertificateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCertificateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'usage': CertificateUsageFromJSON(json['usage']),
        'subject': CertificateSubjectFromJSON(json['subject']),
        'validity': !exists(json, 'validity') ? undefined : json['validity'],
        'issuerNamespace': json['issuerNamespace'],
        'issuer': json['issuer'],
        'options': !exists(json, 'options') ? undefined : CreateCertificateOptionsFromJSON(json['options']),
    };
}

export function CreateCertificateParametersToJSON(value?: CreateCertificateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'usage': CertificateUsageToJSON(value.usage),
        'subject': CertificateSubjectToJSON(value.subject),
        'validity': value.validity,
        'issuerNamespace': value.issuerNamespace,
        'issuer': value.issuer,
        'options': CreateCertificateOptionsToJSON(value.options),
    };
}

