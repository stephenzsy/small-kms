/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LinkedCertificateTemplateUsage } from './LinkedCertificateTemplateUsage';
import {
    LinkedCertificateTemplateUsageFromJSON,
    LinkedCertificateTemplateUsageFromJSONTyped,
    LinkedCertificateTemplateUsageToJSON,
} from './LinkedCertificateTemplateUsage';

/**
 * 
 * @export
 * @interface CreateLinkedCertificateTemplateParameters
 */
export interface CreateLinkedCertificateTemplateParameters {
    /**
     * 
     * @type {string}
     * @memberof CreateLinkedCertificateTemplateParameters
     */
    targetTemplate: string;
    /**
     * 
     * @type {LinkedCertificateTemplateUsage}
     * @memberof CreateLinkedCertificateTemplateParameters
     */
    usage: LinkedCertificateTemplateUsage;
}

/**
 * Check if a given object implements the CreateLinkedCertificateTemplateParameters interface.
 */
export function instanceOfCreateLinkedCertificateTemplateParameters(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "targetTemplate" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function CreateLinkedCertificateTemplateParametersFromJSON(json: any): CreateLinkedCertificateTemplateParameters {
    return CreateLinkedCertificateTemplateParametersFromJSONTyped(json, false);
}

export function CreateLinkedCertificateTemplateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateLinkedCertificateTemplateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'targetTemplate': json['targetTemplate'],
        'usage': LinkedCertificateTemplateUsageFromJSON(json['usage']),
    };
}

export function CreateLinkedCertificateTemplateParametersToJSON(value?: CreateLinkedCertificateTemplateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'targetTemplate': value.targetTemplate,
        'usage': LinkedCertificateTemplateUsageToJSON(value.usage),
    };
}

