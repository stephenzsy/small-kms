/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NamespaceTypeShortName } from './NamespaceTypeShortName';
import {
    NamespaceTypeShortNameFromJSON,
    NamespaceTypeShortNameFromJSONTyped,
    NamespaceTypeShortNameToJSON,
} from './NamespaceTypeShortName';

/**
 * 
 * @export
 * @interface RefWithMetadataAllOf
 */
export interface RefWithMetadataAllOf {
    /**
     * 
     * @type {NamespaceTypeShortName}
     * @memberof RefWithMetadataAllOf
     */
    namespaceType: NamespaceTypeShortName;
    /**
     * Unique ID of the user who last updated the object
     * @type {string}
     * @memberof RefWithMetadataAllOf
     */
    updatedBy: string;
    /**
     * Time when the object was last updated
     * @type {Date}
     * @memberof RefWithMetadataAllOf
     */
    updated: Date;
    /**
     * Time when the object was deleted
     * @type {Date}
     * @memberof RefWithMetadataAllOf
     */
    deleted?: Date;
    /**
     * Display name of the object
     * @type {string}
     * @memberof RefWithMetadataAllOf
     */
    displayName: string;
    /**
     * 
     * @type {boolean}
     * @memberof RefWithMetadataAllOf
     */
    isDefault?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RefWithMetadataAllOf
     */
    isActive?: boolean;
}

/**
 * Check if a given object implements the RefWithMetadataAllOf interface.
 */
export function instanceOfRefWithMetadataAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "namespaceType" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "displayName" in value;

    return isInstance;
}

export function RefWithMetadataAllOfFromJSON(json: any): RefWithMetadataAllOf {
    return RefWithMetadataAllOfFromJSONTyped(json, false);
}

export function RefWithMetadataAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefWithMetadataAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'namespaceType': NamespaceTypeShortNameFromJSON(json['namespaceType']),
        'updatedBy': json['updatedBy'],
        'updated': (new Date(json['updated'])),
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'displayName': json['displayName'],
        'isDefault': !exists(json, 'isDefault') ? undefined : json['isDefault'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
    };
}

export function RefWithMetadataAllOfToJSON(value?: RefWithMetadataAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'namespaceType': NamespaceTypeShortNameToJSON(value.namespaceType),
        'updatedBy': value.updatedBy,
        'updated': (value.updated.toISOString()),
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'displayName': value.displayName,
        'isDefault': value.isDefault,
        'isActive': value.isActive,
    };
}

