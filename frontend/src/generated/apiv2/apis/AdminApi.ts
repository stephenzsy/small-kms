/* tslint:disable */
/* eslint-disable */
/**
 * Cryptocat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentConfig,
  AgentConfigBundle,
  AgentConfigName,
  AgentInstance,
  AgentInstanceParameters,
  AgentInstanceRef,
  Certificate,
  CertificatePolicy,
  CertificatePolicyParameters,
  CertificateRef,
  CreateAgentConfigRequest,
  CreateAgentRequest,
  CreateKeyPolicyRequest,
  EnrollCertificateRequest,
  ErrorResult,
  ExchangePKCS12Request,
  ExchangePKCS12Result,
  Key,
  KeyPolicy,
  KeyRef,
  LinkRef,
  LinkRefFields,
  NamespaceProvider,
  Profile,
  ProfileParameters,
  Ref,
} from '../models/index';
import {
    AgentConfigFromJSON,
    AgentConfigToJSON,
    AgentConfigBundleFromJSON,
    AgentConfigBundleToJSON,
    AgentConfigNameFromJSON,
    AgentConfigNameToJSON,
    AgentInstanceFromJSON,
    AgentInstanceToJSON,
    AgentInstanceParametersFromJSON,
    AgentInstanceParametersToJSON,
    AgentInstanceRefFromJSON,
    AgentInstanceRefToJSON,
    CertificateFromJSON,
    CertificateToJSON,
    CertificatePolicyFromJSON,
    CertificatePolicyToJSON,
    CertificatePolicyParametersFromJSON,
    CertificatePolicyParametersToJSON,
    CertificateRefFromJSON,
    CertificateRefToJSON,
    CreateAgentConfigRequestFromJSON,
    CreateAgentConfigRequestToJSON,
    CreateAgentRequestFromJSON,
    CreateAgentRequestToJSON,
    CreateKeyPolicyRequestFromJSON,
    CreateKeyPolicyRequestToJSON,
    EnrollCertificateRequestFromJSON,
    EnrollCertificateRequestToJSON,
    ErrorResultFromJSON,
    ErrorResultToJSON,
    ExchangePKCS12RequestFromJSON,
    ExchangePKCS12RequestToJSON,
    ExchangePKCS12ResultFromJSON,
    ExchangePKCS12ResultToJSON,
    KeyFromJSON,
    KeyToJSON,
    KeyPolicyFromJSON,
    KeyPolicyToJSON,
    KeyRefFromJSON,
    KeyRefToJSON,
    LinkRefFromJSON,
    LinkRefToJSON,
    LinkRefFieldsFromJSON,
    LinkRefFieldsToJSON,
    NamespaceProviderFromJSON,
    NamespaceProviderToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ProfileParametersFromJSON,
    ProfileParametersToJSON,
    RefFromJSON,
    RefToJSON,
} from '../models/index';

export interface AddMsEntraKeyCredentialRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface CreateAgentOperationRequest {
    createAgentRequest?: CreateAgentRequest;
}

export interface DeleteCertificateRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface EnrollCertificateOperationRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    enrollCertificateRequest: EnrollCertificateRequest;
    onBehalfOfApplication?: boolean;
}

export interface ExchangePKCS12OperationRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    exchangePKCS12Request: ExchangePKCS12Request;
}

export interface GenerateCertificateRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface GenerateKeyRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface GetAgentRequest {
    id: string;
}

export interface GetAgentConfigRequest {
    namespaceId: string;
    configName: AgentConfigName;
}

export interface GetAgentConfigBundleRequest {
    namespaceId: string;
}

export interface GetCertificateRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    includeJwk?: boolean;
}

export interface GetCertificatePolicyRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface GetCertificatePolicyIssuerRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface GetKeyRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    includeJwk?: boolean;
    verify?: boolean;
}

export interface GetKeyPolicyRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface GetMemberOfRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface GetProfileRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
}

export interface GetSystemAppRequest {
    id: string;
}

export interface ListAgentInstancesRequest {
    id: string;
}

export interface ListCertificatePoliciesRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
}

export interface ListCertificatesRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    policyId?: string;
}

export interface ListKeyPoliciesRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
}

export interface ListKeysRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    policyId?: string;
}

export interface ListProfilesRequest {
    namespaceProvider: NamespaceProvider;
}

export interface PutAgentConfigRequest {
    namespaceId: string;
    configName: AgentConfigName;
    createAgentConfigRequest: CreateAgentConfigRequest;
}

export interface PutCertificatePolicyRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    certificatePolicyParameters: CertificatePolicyParameters;
}

export interface PutCertificatePolicyIssuerRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    linkRefFields: LinkRefFields;
}

export interface PutKeyPolicyRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
    createKeyPolicyRequest: CreateKeyPolicyRequest;
}

export interface PutProfileRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    profileParameters: ProfileParameters;
}

export interface SyncMemberOfRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
    id: string;
}

export interface SyncProfileRequest {
    namespaceProvider: NamespaceProvider;
    namespaceId: string;
}

export interface SyncSystemAppRequest {
    id: string;
}

export interface UpdateAgentInstanceRequest {
    id: string;
    agentInstanceParameters?: AgentInstanceParameters;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Add certificate as MS Entra key credential
     */
    async addMsEntraKeyCredentialRaw(requestParameters: AddMsEntraKeyCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling addMsEntraKeyCredential.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling addMsEntraKeyCredential.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addMsEntraKeyCredential.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificates/{id}/ms-entra-key-credential`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add certificate as MS Entra key credential
     */
    async addMsEntraKeyCredential(requestParameters: AddMsEntraKeyCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addMsEntraKeyCredentialRaw(requestParameters, initOverrides);
    }

    /**
     * Create agent
     */
    async createAgentRaw(requestParameters: CreateAgentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/agents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAgentRequestToJSON(requestParameters.createAgentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Create agent
     */
    async createAgent(requestParameters: CreateAgentOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.createAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete certificate
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificates/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * Delete certificate
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.deleteCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put certificate policy
     */
    async enrollCertificateRaw(requestParameters: EnrollCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling enrollCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling enrollCertificate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling enrollCertificate.');
        }

        if (requestParameters.enrollCertificateRequest === null || requestParameters.enrollCertificateRequest === undefined) {
            throw new runtime.RequiredError('enrollCertificateRequest','Required parameter requestParameters.enrollCertificateRequest was null or undefined when calling enrollCertificate.');
        }

        const queryParameters: any = {};

        if (requestParameters.onBehalfOfApplication !== undefined) {
            queryParameters['onBehalfOfApplication'] = requestParameters.onBehalfOfApplication;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/enroll`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrollCertificateRequestToJSON(requestParameters.enrollCertificateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * put certificate policy
     */
    async enrollCertificate(requestParameters: EnrollCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.enrollCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchange PKCS12
     */
    async exchangePKCS12Raw(requestParameters: ExchangePKCS12OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangePKCS12Result>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling exchangePKCS12.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling exchangePKCS12.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling exchangePKCS12.');
        }

        if (requestParameters.exchangePKCS12Request === null || requestParameters.exchangePKCS12Request === undefined) {
            throw new runtime.RequiredError('exchangePKCS12Request','Required parameter requestParameters.exchangePKCS12Request was null or undefined when calling exchangePKCS12.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificates/{id}/exchange-pkcs12`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangePKCS12RequestToJSON(requestParameters.exchangePKCS12Request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangePKCS12ResultFromJSON(jsonValue));
    }

    /**
     * Exchange PKCS12
     */
    async exchangePKCS12(requestParameters: ExchangePKCS12OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangePKCS12Result> {
        const response = await this.exchangePKCS12Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put certificate policy
     */
    async generateCertificateRaw(requestParameters: GenerateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling generateCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling generateCertificate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling generateCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/generate`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * put certificate policy
     */
    async generateCertificate(requestParameters: GenerateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.generateCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put certificate policy
     */
    async generateKeyRaw(requestParameters: GenerateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Key>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling generateKey.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling generateKey.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling generateKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/key-policies/{id}/generate`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyFromJSON(jsonValue));
    }

    /**
     * put certificate policy
     */
    async generateKey(requestParameters: GenerateKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Key> {
        const response = await this.generateKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent
     */
    async getAgentRaw(requestParameters: GetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/agents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Get agent
     */
    async getAgent(requestParameters: GetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent config
     */
    async getAgentConfigRaw(requestParameters: GetAgentConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfig>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentConfig.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling getAgentConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/service-principal/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigFromJSON(jsonValue));
    }

    /**
     * Get agent config
     */
    async getAgentConfig(requestParameters: GetAgentConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfig> {
        const response = await this.getAgentConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent config
     */
    async getAgentConfigBundleRaw(requestParameters: GetAgentConfigBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfigBundle>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentConfigBundle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/service-principal/{namespaceId}/agent-config`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigBundleFromJSON(jsonValue));
    }

    /**
     * Get agent config
     */
    async getAgentConfigBundle(requestParameters: GetAgentConfigBundleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfigBundle> {
        const response = await this.getAgentConfigBundleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getCertificate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCertificate.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeJwk !== undefined) {
            queryParameters['includeJwk'] = requestParameters.includeJwk;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificates/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * Get certificate
     */
    async getCertificate(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.getCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate policy
     */
    async getCertificatePolicyRaw(requestParameters: GetCertificatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificatePolicy>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getCertificatePolicy.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getCertificatePolicy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCertificatePolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificatePolicyFromJSON(jsonValue));
    }

    /**
     * Get certificate policy
     */
    async getCertificatePolicy(requestParameters: GetCertificatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificatePolicy> {
        const response = await this.getCertificatePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate policy issuer
     */
    async getCertificatePolicyIssuerRaw(requestParameters: GetCertificatePolicyIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkRef>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getCertificatePolicyIssuer.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getCertificatePolicyIssuer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCertificatePolicyIssuer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/issuer`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkRefFromJSON(jsonValue));
    }

    /**
     * Get certificate policy issuer
     */
    async getCertificatePolicyIssuer(requestParameters: GetCertificatePolicyIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkRef> {
        const response = await this.getCertificatePolicyIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get key
     */
    async getKeyRaw(requestParameters: GetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Key>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getKey.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getKey.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeJwk !== undefined) {
            queryParameters['includeJwk'] = requestParameters.includeJwk;
        }

        if (requestParameters.verify !== undefined) {
            queryParameters['verify'] = requestParameters.verify;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/keys/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyFromJSON(jsonValue));
    }

    /**
     * Get key
     */
    async getKey(requestParameters: GetKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Key> {
        const response = await this.getKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get key policy
     */
    async getKeyPolicyRaw(requestParameters: GetKeyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyPolicy>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getKeyPolicy.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getKeyPolicy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getKeyPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/key-policies/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyPolicyFromJSON(jsonValue));
    }

    /**
     * Get key policy
     */
    async getKeyPolicy(requestParameters: GetKeyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyPolicy> {
        const response = await this.getKeyPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get member group
     */
    async getMemberOfRaw(requestParameters: GetMemberOfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkRef>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getMemberOf.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getMemberOf.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMemberOf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/memberOf/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkRefFromJSON(jsonValue));
    }

    /**
     * Get member group
     */
    async getMemberOf(requestParameters: GetMemberOfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkRef> {
        const response = await this.getMemberOfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get profile
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling getProfile.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/profiles/{namespaceProvider}/{namespaceId}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Get profile
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get system app
     */
    async getSystemAppRaw(requestParameters: GetSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSystemApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/system-apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Get system app
     */
    async getSystemApp(requestParameters: GetSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getSystemAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List agent instances
     */
    async listAgentInstancesRaw(requestParameters: ListAgentInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AgentInstanceRef>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listAgentInstances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/agents/{id}/instances`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgentInstanceRefFromJSON));
    }

    /**
     * List agent instances
     */
    async listAgentInstances(requestParameters: ListAgentInstancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentInstanceRef>> {
        const response = await this.listAgentInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificate policies
     */
    async listCertificatePoliciesRaw(requestParameters: ListCertificatePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ref>>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling listCertificatePolicies.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listCertificatePolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RefFromJSON));
    }

    /**
     * List certificate policies
     */
    async listCertificatePolicies(requestParameters: ListCertificatePoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ref>> {
        const response = await this.listCertificatePoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificates
     */
    async listCertificatesRaw(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateRef>>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling listCertificates.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listCertificates.');
        }

        const queryParameters: any = {};

        if (requestParameters.policyId !== undefined) {
            queryParameters['policyId'] = requestParameters.policyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificates`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateRefFromJSON));
    }

    /**
     * List certificates
     */
    async listCertificates(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateRef>> {
        const response = await this.listCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List key policies
     */
    async listKeyPoliciesRaw(requestParameters: ListKeyPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ref>>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling listKeyPolicies.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listKeyPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/key-policies`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RefFromJSON));
    }

    /**
     * List key policies
     */
    async listKeyPolicies(requestParameters: ListKeyPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ref>> {
        const response = await this.listKeyPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List keys
     */
    async listKeysRaw(requestParameters: ListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KeyRef>>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling listKeys.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listKeys.');
        }

        const queryParameters: any = {};

        if (requestParameters.policyId !== undefined) {
            queryParameters['policyId'] = requestParameters.policyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/keys`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KeyRefFromJSON));
    }

    /**
     * List keys
     */
    async listKeys(requestParameters: ListKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KeyRef>> {
        const response = await this.listKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list profiles
     */
    async listProfilesRaw(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ref>>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling listProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/profiles/{namespaceProvider}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RefFromJSON));
    }

    /**
     * list profiles
     */
    async listProfiles(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ref>> {
        const response = await this.listProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put agent config
     */
    async putAgentConfigRaw(requestParameters: PutAgentConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfig>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putAgentConfig.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling putAgentConfig.');
        }

        if (requestParameters.createAgentConfigRequest === null || requestParameters.createAgentConfigRequest === undefined) {
            throw new runtime.RequiredError('createAgentConfigRequest','Required parameter requestParameters.createAgentConfigRequest was null or undefined when calling putAgentConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/service-principal/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAgentConfigRequestToJSON(requestParameters.createAgentConfigRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigFromJSON(jsonValue));
    }

    /**
     * Put agent config
     */
    async putAgentConfig(requestParameters: PutAgentConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfig> {
        const response = await this.putAgentConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put certificate policy
     */
    async putCertificatePolicyRaw(requestParameters: PutCertificatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificatePolicy>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling putCertificatePolicy.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putCertificatePolicy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putCertificatePolicy.');
        }

        if (requestParameters.certificatePolicyParameters === null || requestParameters.certificatePolicyParameters === undefined) {
            throw new runtime.RequiredError('certificatePolicyParameters','Required parameter requestParameters.certificatePolicyParameters was null or undefined when calling putCertificatePolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificatePolicyParametersToJSON(requestParameters.certificatePolicyParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificatePolicyFromJSON(jsonValue));
    }

    /**
     * put certificate policy
     */
    async putCertificatePolicy(requestParameters: PutCertificatePolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificatePolicy> {
        const response = await this.putCertificatePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put certificate policy issuer
     */
    async putCertificatePolicyIssuerRaw(requestParameters: PutCertificatePolicyIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkRef>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling putCertificatePolicyIssuer.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putCertificatePolicyIssuer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putCertificatePolicyIssuer.');
        }

        if (requestParameters.linkRefFields === null || requestParameters.linkRefFields === undefined) {
            throw new runtime.RequiredError('linkRefFields','Required parameter requestParameters.linkRefFields was null or undefined when calling putCertificatePolicyIssuer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/issuer`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LinkRefFieldsToJSON(requestParameters.linkRefFields),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkRefFromJSON(jsonValue));
    }

    /**
     * put certificate policy issuer
     */
    async putCertificatePolicyIssuer(requestParameters: PutCertificatePolicyIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkRef> {
        const response = await this.putCertificatePolicyIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * put key policy
     */
    async putKeyPolicyRaw(requestParameters: PutKeyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyPolicy>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling putKeyPolicy.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putKeyPolicy.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putKeyPolicy.');
        }

        if (requestParameters.createKeyPolicyRequest === null || requestParameters.createKeyPolicyRequest === undefined) {
            throw new runtime.RequiredError('createKeyPolicyRequest','Required parameter requestParameters.createKeyPolicyRequest was null or undefined when calling putKeyPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/key-policies/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateKeyPolicyRequestToJSON(requestParameters.createKeyPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyPolicyFromJSON(jsonValue));
    }

    /**
     * put key policy
     */
    async putKeyPolicy(requestParameters: PutKeyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyPolicy> {
        const response = await this.putKeyPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put profile
     */
    async putProfileRaw(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling putProfile.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putProfile.');
        }

        if (requestParameters.profileParameters === null || requestParameters.profileParameters === undefined) {
            throw new runtime.RequiredError('profileParameters','Required parameter requestParameters.profileParameters was null or undefined when calling putProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/profiles/{namespaceProvider}/{namespaceId}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileParametersToJSON(requestParameters.profileParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Put profile
     */
    async putProfile(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.putProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync member group
     */
    async syncMemberOfRaw(requestParameters: SyncMemberOfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkRef>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling syncMemberOf.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling syncMemberOf.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling syncMemberOf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceProvider}/{namespaceId}/memberOf/{id}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkRefFromJSON(jsonValue));
    }

    /**
     * Sync member group
     */
    async syncMemberOf(requestParameters: SyncMemberOfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkRef> {
        const response = await this.syncMemberOfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync profile
     */
    async syncProfileRaw(requestParameters: SyncProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.namespaceProvider === null || requestParameters.namespaceProvider === undefined) {
            throw new runtime.RequiredError('namespaceProvider','Required parameter requestParameters.namespaceProvider was null or undefined when calling syncProfile.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling syncProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/profiles/{namespaceProvider}/{namespaceId}`.replace(`{${"namespaceProvider"}}`, encodeURIComponent(String(requestParameters.namespaceProvider))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Sync profile
     */
    async syncProfile(requestParameters: SyncProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.syncProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync managed app
     */
    async syncSystemAppRaw(requestParameters: SyncSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling syncSystemApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/system-apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Sync managed app
     */
    async syncSystemApp(requestParameters: SyncSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.syncSystemAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update agent instance
     */
    async updateAgentInstanceRaw(requestParameters: UpdateAgentInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentInstance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAgentInstance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/agents/{id}/instances`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentInstanceParametersToJSON(requestParameters.agentInstanceParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentInstanceFromJSON(jsonValue));
    }

    /**
     * Update agent instance
     */
    async updateAgentInstance(requestParameters: UpdateAgentInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentInstance> {
        const response = await this.updateAgentInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
