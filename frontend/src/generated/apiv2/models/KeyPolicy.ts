/* tslint:disable */
/* eslint-disable */
/**
 * Cryptocat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JsonWebKeySpec } from './JsonWebKeySpec';
import {
    JsonWebKeySpecFromJSON,
    JsonWebKeySpecFromJSONTyped,
    JsonWebKeySpecToJSON,
} from './JsonWebKeySpec';

/**
 * 
 * @export
 * @interface KeyPolicy
 */
export interface KeyPolicy {
    /**
     * 
     * @type {string}
     * @memberof KeyPolicy
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof KeyPolicy
     */
    updated: Date;
    /**
     * 
     * @type {string}
     * @memberof KeyPolicy
     */
    updatedBy: string;
    /**
     * 
     * @type {Date}
     * @memberof KeyPolicy
     */
    deleted?: Date;
    /**
     * 
     * @type {string}
     * @memberof KeyPolicy
     */
    displayName?: string;
    /**
     * 
     * @type {JsonWebKeySpec}
     * @memberof KeyPolicy
     */
    keySpec: JsonWebKeySpec;
    /**
     * 
     * @type {string}
     * @memberof KeyPolicy
     */
    expiryTime?: string;
}

/**
 * Check if a given object implements the KeyPolicy interface.
 */
export function instanceOfKeyPolicy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "keySpec" in value;

    return isInstance;
}

export function KeyPolicyFromJSON(json: any): KeyPolicy {
    return KeyPolicyFromJSONTyped(json, false);
}

export function KeyPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): KeyPolicy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'updated': (new Date(json['updated'])),
        'updatedBy': json['updatedBy'],
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'keySpec': JsonWebKeySpecFromJSON(json['keySpec']),
        'expiryTime': !exists(json, 'expiryTime') ? undefined : json['expiryTime'],
    };
}

export function KeyPolicyToJSON(value?: KeyPolicy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'updated': (value.updated.toISOString()),
        'updatedBy': value.updatedBy,
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'displayName': value.displayName,
        'keySpec': JsonWebKeySpecToJSON(value.keySpec),
        'expiryTime': value.expiryTime,
    };
}

