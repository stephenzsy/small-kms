/* tslint:disable */
/* eslint-disable */
/**
 * Cryptocat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RequestHeaderEntry } from './RequestHeaderEntry';
import {
    RequestHeaderEntryFromJSON,
    RequestHeaderEntryFromJSONTyped,
    RequestHeaderEntryToJSON,
} from './RequestHeaderEntry';
import type { ServiceRuntimeInfo } from './ServiceRuntimeInfo';
import {
    ServiceRuntimeInfoFromJSON,
    ServiceRuntimeInfoFromJSONTyped,
    ServiceRuntimeInfoToJSON,
} from './ServiceRuntimeInfo';

/**
 * 
 * @export
 * @interface RequestDiagnostics
 */
export interface RequestDiagnostics {
    /**
     * 
     * @type {string}
     * @memberof RequestDiagnostics
     */
    requestProtocol: string;
    /**
     * 
     * @type {Array<RequestHeaderEntry>}
     * @memberof RequestDiagnostics
     */
    requestHeaders: Array<RequestHeaderEntry>;
    /**
     * 
     * @type {ServiceRuntimeInfo}
     * @memberof RequestDiagnostics
     */
    serviceRuntime: ServiceRuntimeInfo;
}

/**
 * Check if a given object implements the RequestDiagnostics interface.
 */
export function instanceOfRequestDiagnostics(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "requestProtocol" in value;
    isInstance = isInstance && "requestHeaders" in value;
    isInstance = isInstance && "serviceRuntime" in value;

    return isInstance;
}

export function RequestDiagnosticsFromJSON(json: any): RequestDiagnostics {
    return RequestDiagnosticsFromJSONTyped(json, false);
}

export function RequestDiagnosticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestDiagnostics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'requestProtocol': json['requestProtocol'],
        'requestHeaders': ((json['requestHeaders'] as Array<any>).map(RequestHeaderEntryFromJSON)),
        'serviceRuntime': ServiceRuntimeInfoFromJSON(json['serviceRuntime']),
    };
}

export function RequestDiagnosticsToJSON(value?: RequestDiagnostics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'requestProtocol': value.requestProtocol,
        'requestHeaders': ((value.requestHeaders as Array<any>).map(RequestHeaderEntryToJSON)),
        'serviceRuntime': ServiceRuntimeInfoToJSON(value.serviceRuntime),
    };
}

