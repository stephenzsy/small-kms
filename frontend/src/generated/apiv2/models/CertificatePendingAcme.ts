/* tslint:disable */
/* eslint-disable */
/**
 * Cryptocat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CertificatePendingAcmeChallenge } from './CertificatePendingAcmeChallenge';
import {
    CertificatePendingAcmeChallengeFromJSON,
    CertificatePendingAcmeChallengeFromJSONTyped,
    CertificatePendingAcmeChallengeToJSON,
} from './CertificatePendingAcmeChallenge';

/**
 * 
 * @export
 * @interface CertificatePendingAcme
 */
export interface CertificatePendingAcme {
    /**
     * 
     * @type {Array<CertificatePendingAcmeChallenge>}
     * @memberof CertificatePendingAcme
     */
    challenges?: Array<CertificatePendingAcmeChallenge>;
}

/**
 * Check if a given object implements the CertificatePendingAcme interface.
 */
export function instanceOfCertificatePendingAcme(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CertificatePendingAcmeFromJSON(json: any): CertificatePendingAcme {
    return CertificatePendingAcmeFromJSONTyped(json, false);
}

export function CertificatePendingAcmeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificatePendingAcme {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challenges': !exists(json, 'challenges') ? undefined : ((json['challenges'] as Array<any>).map(CertificatePendingAcmeChallengeFromJSON)),
    };
}

export function CertificatePendingAcmeToJSON(value?: CertificatePendingAcme | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenges': value.challenges === undefined ? undefined : ((value.challenges as Array<any>).map(CertificatePendingAcmeChallengeToJSON)),
    };
}

