/* tslint:disable */
/* eslint-disable */
/**
 * Cryptocat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AgentConfigRef } from './AgentConfigRef';
import {
    AgentConfigRefFromJSON,
    AgentConfigRefFromJSONTyped,
    AgentConfigRefToJSON,
} from './AgentConfigRef';

/**
 * 
 * @export
 * @interface AgentConfigBundle
 */
export interface AgentConfigBundle {
    /**
     * 
     * @type {string}
     * @memberof AgentConfigBundle
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgentConfigBundle
     */
    envGuards: Array<string>;
    /**
     * 
     * @type {Array<AgentConfigRef>}
     * @memberof AgentConfigBundle
     */
    items?: Array<AgentConfigRef>;
    /**
     * 
     * @type {Date}
     * @memberof AgentConfigBundle
     */
    expires?: Date;
}

/**
 * Check if a given object implements the AgentConfigBundle interface.
 */
export function instanceOfAgentConfigBundle(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "envGuards" in value;

    return isInstance;
}

export function AgentConfigBundleFromJSON(json: any): AgentConfigBundle {
    return AgentConfigBundleFromJSONTyped(json, false);
}

export function AgentConfigBundleFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentConfigBundle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'envGuards': json['envGuards'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(AgentConfigRefFromJSON)),
        'expires': !exists(json, 'expires') ? undefined : (new Date(json['expires'])),
    };
}

export function AgentConfigBundleToJSON(value?: AgentConfigBundle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'envGuards': value.envGuards,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(AgentConfigRefToJSON)),
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
    };
}

