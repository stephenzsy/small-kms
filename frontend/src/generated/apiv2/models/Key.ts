/* tslint:disable */
/* eslint-disable */
/**
 * Cryptocat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JsonWebKey } from './JsonWebKey';
import {
    JsonWebKeyFromJSON,
    JsonWebKeyFromJSONTyped,
    JsonWebKeyToJSON,
} from './JsonWebKey';
import type { KeyStatus } from './KeyStatus';
import {
    KeyStatusFromJSON,
    KeyStatusFromJSONTyped,
    KeyStatusToJSON,
} from './KeyStatus';

/**
 * 
 * @export
 * @interface Key
 */
export interface Key {
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Key
     */
    updated: Date;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    updatedBy: string;
    /**
     * 
     * @type {Date}
     * @memberof Key
     */
    deleted?: Date;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    displayName?: string;
    /**
     * 
     * @type {KeyStatus}
     * @memberof Key
     */
    status: KeyStatus;
    /**
     * 
     * @type {number}
     * @memberof Key
     */
    iat: number;
    /**
     * 
     * @type {number}
     * @memberof Key
     */
    exp?: number;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    policyIdentifier: string;
    /**
     * 
     * @type {string}
     * @memberof Key
     */
    identififier: string;
    /**
     * 
     * @type {number}
     * @memberof Key
     */
    nbf?: number;
    /**
     * 
     * @type {JsonWebKey}
     * @memberof Key
     */
    jwk: JsonWebKey;
    /**
     * Key Vault Secret ID
     * @type {string}
     * @memberof Key
     */
    sid?: string;
}

/**
 * Check if a given object implements the Key interface.
 */
export function instanceOfKey(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "updated" in value;
    isInstance = isInstance && "updatedBy" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "iat" in value;
    isInstance = isInstance && "policyIdentifier" in value;
    isInstance = isInstance && "identififier" in value;
    isInstance = isInstance && "jwk" in value;

    return isInstance;
}

export function KeyFromJSON(json: any): Key {
    return KeyFromJSONTyped(json, false);
}

export function KeyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Key {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'updated': (new Date(json['updated'])),
        'updatedBy': json['updatedBy'],
        'deleted': !exists(json, 'deleted') ? undefined : (new Date(json['deleted'])),
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'status': KeyStatusFromJSON(json['status']),
        'iat': json['iat'],
        'exp': !exists(json, 'exp') ? undefined : json['exp'],
        'policyIdentifier': json['policyIdentifier'],
        'identififier': json['identififier'],
        'nbf': !exists(json, 'nbf') ? undefined : json['nbf'],
        'jwk': JsonWebKeyFromJSON(json['jwk']),
        'sid': !exists(json, 'sid') ? undefined : json['sid'],
    };
}

export function KeyToJSON(value?: Key | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'updated': (value.updated.toISOString()),
        'updatedBy': value.updatedBy,
        'deleted': value.deleted === undefined ? undefined : (value.deleted.toISOString()),
        'displayName': value.displayName,
        'status': KeyStatusToJSON(value.status),
        'iat': value.iat,
        'exp': value.exp,
        'policyIdentifier': value.policyIdentifier,
        'identififier': value.identififier,
        'nbf': value.nbf,
        'jwk': JsonWebKeyToJSON(value.jwk),
        'sid': value.sid,
    };
}

