/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentConfigName,
  AgentConfiguration,
  AgentConfigurationParameters,
  AgentProfile,
  AgentProfileParameters,
  AgentProxyInfo,
  AzureRoleAssignment,
  CertPolicy,
  CertPolicyParameters,
  CertPolicyRef,
  Certificate,
  CertificateRef,
  CertificateTemplate,
  CreateLinkedCertificateTemplateParameters,
  ManagedAppParameters,
  ManagedAppRef,
  NamespaceKind,
  NamespaceKind1,
  PolicyIssuerCertRequest,
  ProfileParameters,
  ProfileRef,
  ResourceKind,
  ServiceConfig,
} from '../models/index';
import {
    AgentConfigNameFromJSON,
    AgentConfigNameToJSON,
    AgentConfigurationFromJSON,
    AgentConfigurationToJSON,
    AgentConfigurationParametersFromJSON,
    AgentConfigurationParametersToJSON,
    AgentProfileFromJSON,
    AgentProfileToJSON,
    AgentProfileParametersFromJSON,
    AgentProfileParametersToJSON,
    AgentProxyInfoFromJSON,
    AgentProxyInfoToJSON,
    AzureRoleAssignmentFromJSON,
    AzureRoleAssignmentToJSON,
    CertPolicyFromJSON,
    CertPolicyToJSON,
    CertPolicyParametersFromJSON,
    CertPolicyParametersToJSON,
    CertPolicyRefFromJSON,
    CertPolicyRefToJSON,
    CertificateFromJSON,
    CertificateToJSON,
    CertificateRefFromJSON,
    CertificateRefToJSON,
    CertificateTemplateFromJSON,
    CertificateTemplateToJSON,
    CreateLinkedCertificateTemplateParametersFromJSON,
    CreateLinkedCertificateTemplateParametersToJSON,
    ManagedAppParametersFromJSON,
    ManagedAppParametersToJSON,
    ManagedAppRefFromJSON,
    ManagedAppRefToJSON,
    NamespaceKindFromJSON,
    NamespaceKindToJSON,
    NamespaceKind1FromJSON,
    NamespaceKind1ToJSON,
    PolicyIssuerCertRequestFromJSON,
    PolicyIssuerCertRequestToJSON,
    ProfileParametersFromJSON,
    ProfileParametersToJSON,
    ProfileRefFromJSON,
    ProfileRefToJSON,
    ResourceKindFromJSON,
    ResourceKindToJSON,
    ServiceConfigFromJSON,
    ServiceConfigToJSON,
} from '../models/index';

export interface AddKeyVaultRoleAssignmentRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    templateId: string;
    roleDefinitionId: string;
}

export interface AgentCallbackRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    configName: AgentConfigName;
    agentConfiguration: AgentConfiguration;
}

export interface CreateCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface CreateLinkedCertificateTemplateRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    createLinkedCertificateTemplateParameters: CreateLinkedCertificateTemplateParameters;
}

export interface CreateManagedAppRequest {
    managedAppParameters: ManagedAppParameters;
}

export interface DeleteCertificateRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    certificateId: string;
}

export interface DeleteCertificateTemplateRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    templateId: string;
}

export interface GetAgentConfigurationRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    configName: AgentConfigName;
    xSmallkmsIfVersionNotMatch?: string;
    refreshToken?: string;
}

export interface GetAgentProfileRequest {
    namespaceId: string;
}

export interface GetAgentProxyInfoRequest {
    namespaceId: string;
}

export interface GetCertPolicyRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface GetCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface GetDockerInfoRequest {
    namespaceId: string;
}

export interface GetProfileRequest {
    profileResourceKind: ResourceKind;
    namespaceIdentifier: string;
}

export interface ImportProfileRequest {
    profileResourceKind: ResourceKind;
    namespaceIdentifier: string;
}

export interface ListCertPoliciesRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
}

export interface ListCertificatesRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    policyId?: string;
}

export interface ListKeyVaultRoleAssignmentsRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    templateId: string;
}

export interface ListProfilesRequest {
    profileResourceKind: ResourceKind;
}

export interface PatchServiceConfigRequest {
    configPath: PatchServiceConfigConfigPathEnum;
    body: any | null;
}

export interface ProvisionAgentProfileRequest {
    namespaceId: string;
    agentProfileParameters: AgentProfileParameters;
}

export interface PutAgentConfigurationRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    configName: AgentConfigName;
    agentConfigurationParameters: AgentConfigurationParameters;
}

export interface PutCertPolicyRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
    certPolicyParameters: CertPolicyParameters;
}

export interface PutProfileRequest {
    profileResourceKind: ResourceKind;
    namespaceIdentifier: string;
    profileParameters: ProfileParameters;
}

export interface RemoveKeyVaultRoleAssignmentRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    templateId: string;
    roleAssignmentId: string;
}

export interface SetIssuerCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
    policyIssuerCertRequest: PolicyIssuerCertRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Add Key Vault role assignment
     */
    async addKeyVaultRoleAssignmentRaw(requestParameters: AddKeyVaultRoleAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AzureRoleAssignment>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.roleDefinitionId === null || requestParameters.roleDefinitionId === undefined) {
            throw new runtime.RequiredError('roleDefinitionId','Required parameter requestParameters.roleDefinitionId was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        const queryParameters: any = {};

        if (requestParameters.roleDefinitionId !== undefined) {
            queryParameters['roleDefinitionId'] = requestParameters.roleDefinitionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/certificate-template/{templateId}/keyvault-role-assignments`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Add Key Vault role assignment
     */
    async addKeyVaultRoleAssignment(requestParameters: AddKeyVaultRoleAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AzureRoleAssignment> {
        const response = await this.addKeyVaultRoleAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agentCallbackRaw(requestParameters: AgentCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling agentCallback.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling agentCallback.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling agentCallback.');
        }

        if (requestParameters.agentConfiguration === null || requestParameters.agentConfiguration === undefined) {
            throw new runtime.RequiredError('agentConfiguration','Required parameter requestParameters.agentConfiguration was null or undefined when calling agentCallback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/agent-callback/{configName}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigurationToJSON(requestParameters.agentConfiguration),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async agentCallback(requestParameters: AgentCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.agentCallbackRaw(requestParameters, initOverrides);
    }

    /**
     * Create certificate
     */
    async createCertificateRaw(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling createCertificate.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling createCertificate.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling createCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}/create-cert`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * Create certificate
     */
    async createCertificate(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.createCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create linked certificate template
     */
    async createLinkedCertificateTemplateRaw(requestParameters: CreateLinkedCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateTemplate>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling createLinkedCertificateTemplate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling createLinkedCertificateTemplate.');
        }

        if (requestParameters.createLinkedCertificateTemplateParameters === null || requestParameters.createLinkedCertificateTemplateParameters === undefined) {
            throw new runtime.RequiredError('createLinkedCertificateTemplateParameters','Required parameter requestParameters.createLinkedCertificateTemplateParameters was null or undefined when calling createLinkedCertificateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/certificate-templates`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLinkedCertificateTemplateParametersToJSON(requestParameters.createLinkedCertificateTemplateParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateTemplateFromJSON(jsonValue));
    }

    /**
     * Create linked certificate template
     */
    async createLinkedCertificateTemplate(requestParameters: CreateLinkedCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateTemplate> {
        const response = await this.createLinkedCertificateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a managed app
     */
    async createManagedAppRaw(requestParameters: CreateManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagedAppRef>> {
        if (requestParameters.managedAppParameters === null || requestParameters.managedAppParameters === undefined) {
            throw new runtime.RequiredError('managedAppParameters','Required parameter requestParameters.managedAppParameters was null or undefined when calling createManagedApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/managed-app`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagedAppParametersToJSON(requestParameters.managedAppParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagedAppRefFromJSON(jsonValue));
    }

    /**
     * Create a managed app
     */
    async createManagedApp(requestParameters: CreateManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagedAppRef> {
        const response = await this.createManagedAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete certificate
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling deleteCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/certificate/{certificateId}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete certificate
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Delete certificate template
     */
    async deleteCertificateTemplateRaw(requestParameters: DeleteCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling deleteCertificateTemplate.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling deleteCertificateTemplate.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling deleteCertificateTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/certificate-template/{templateId}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete certificate template
     */
    async deleteCertificateTemplate(requestParameters: DeleteCertificateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCertificateTemplateRaw(requestParameters, initOverrides);
    }

    /**
     * Get agent autoconfig
     */
    async getAgentConfigurationRaw(requestParameters: GetAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling getAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling getAgentConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.refreshToken !== undefined) {
            queryParameters['refreshToken'] = requestParameters.refreshToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSmallkmsIfVersionNotMatch !== undefined && requestParameters.xSmallkmsIfVersionNotMatch !== null) {
            headerParameters['X-Smallkms-If-Version-Not-Match'] = String(requestParameters.xSmallkmsIfVersionNotMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async getAgentConfiguration(requestParameters: GetAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.getAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provision agent
     */
    async getAgentProfileRaw(requestParameters: GetAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentProfile>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/application/{namespaceId}/agent`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentProfileFromJSON(jsonValue));
    }

    /**
     * Provision agent
     */
    async getAgentProfile(requestParameters: GetAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentProfile> {
        const response = await this.getAgentProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent proxy information
     */
    async getAgentProxyInfoRaw(requestParameters: GetAgentProxyInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentProxyInfo>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentProxyInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/servicePrincipal/{namespaceId}/agent-proxy`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentProxyInfoFromJSON(jsonValue));
    }

    /**
     * Get agent proxy information
     */
    async getAgentProxyInfo(requestParameters: GetAgentProxyInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentProxyInfo> {
        const response = await this.getAgentProxyInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cert policy
     */
    async getCertPolicyRaw(requestParameters: GetCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertPolicy>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertPolicy.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getCertPolicy.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling getCertPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertPolicyFromJSON(jsonValue));
    }

    /**
     * Get cert policy
     */
    async getCertPolicy(requestParameters: GetCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertPolicy> {
        const response = await this.getCertPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificate.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getCertificate.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling getCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * Get certificate
     */
    async getCertificate(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.getCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get docker info
     */
    async getDockerInfoRaw(requestParameters: GetDockerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getDockerInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/servicePrincipal/{namespaceId}/agent-proxy/docker/info`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get docker info
     */
    async getDockerInfo(requestParameters: GetDockerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getDockerInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get profile
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRef>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling getProfile.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}/{namespaceIdentifier}`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRefFromJSON(jsonValue));
    }

    /**
     * Get profile
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRef> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service config
     */
    async getServiceConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/service/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConfigFromJSON(jsonValue));
    }

    /**
     * Get service config
     */
    async getServiceConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceConfig> {
        const response = await this.getServiceConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Import profile
     */
    async importProfileRaw(requestParameters: ImportProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRef>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling importProfile.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling importProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}/{namespaceIdentifier}/import`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRefFromJSON(jsonValue));
    }

    /**
     * Import profile
     */
    async importProfile(requestParameters: ImportProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRef> {
        const response = await this.importProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List cert policies
     */
    async listCertPoliciesRaw(requestParameters: ListCertPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertPolicyRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listCertPolicies.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling listCertPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertPolicyRefFromJSON));
    }

    /**
     * List cert policies
     */
    async listCertPolicies(requestParameters: ListCertPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertPolicyRef>> {
        const response = await this.listCertPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificates
     */
    async listCertificatesRaw(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listCertificates.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling listCertificates.');
        }

        const queryParameters: any = {};

        if (requestParameters.policyId !== undefined) {
            queryParameters['policyId'] = requestParameters.policyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateRefFromJSON));
    }

    /**
     * List certificates
     */
    async listCertificates(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateRef>> {
        const response = await this.listCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Key Vault role assignments
     */
    async listKeyVaultRoleAssignmentsRaw(requestParameters: ListKeyVaultRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AzureRoleAssignment>>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/certificate-template/{templateId}/keyvault-role-assignments`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AzureRoleAssignmentFromJSON));
    }

    /**
     * List Key Vault role assignments
     */
    async listKeyVaultRoleAssignments(requestParameters: ListKeyVaultRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AzureRoleAssignment>> {
        const response = await this.listKeyVaultRoleAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List managed apps
     */
    async listManagedAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ManagedAppRef>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/managed-app`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ManagedAppRefFromJSON));
    }

    /**
     * List managed apps
     */
    async listManagedApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ManagedAppRef>> {
        const response = await this.listManagedAppsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List profiles
     */
    async listProfilesRaw(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProfileRef>>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling listProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileRefFromJSON));
    }

    /**
     * List profiles
     */
    async listProfiles(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProfileRef>> {
        const response = await this.listProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update service config
     */
    async patchServiceConfigRaw(requestParameters: PatchServiceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceConfig>> {
        if (requestParameters.configPath === null || requestParameters.configPath === undefined) {
            throw new runtime.RequiredError('configPath','Required parameter requestParameters.configPath was null or undefined when calling patchServiceConfig.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchServiceConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/service/config/{configPath}`.replace(`{${"configPath"}}`, encodeURIComponent(String(requestParameters.configPath))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConfigFromJSON(jsonValue));
    }

    /**
     * Update service config
     */
    async patchServiceConfig(requestParameters: PatchServiceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceConfig> {
        const response = await this.patchServiceConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provision agent
     */
    async provisionAgentProfileRaw(requestParameters: ProvisionAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentProfile>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling provisionAgentProfile.');
        }

        if (requestParameters.agentProfileParameters === null || requestParameters.agentProfileParameters === undefined) {
            throw new runtime.RequiredError('agentProfileParameters','Required parameter requestParameters.agentProfileParameters was null or undefined when calling provisionAgentProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/application/{namespaceId}/agent`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentProfileParametersToJSON(requestParameters.agentProfileParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentProfileFromJSON(jsonValue));
    }

    /**
     * Provision agent
     */
    async provisionAgentProfile(requestParameters: ProvisionAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentProfile> {
        const response = await this.provisionAgentProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfigurationRaw(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.agentConfigurationParameters === null || requestParameters.agentConfigurationParameters === undefined) {
            throw new runtime.RequiredError('agentConfigurationParameters','Required parameter requestParameters.agentConfigurationParameters was null or undefined when calling putAgentConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigurationParametersToJSON(requestParameters.agentConfigurationParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfiguration(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.putAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put cert policy
     */
    async putCertPolicyRaw(requestParameters: PutCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertPolicy>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putCertPolicy.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putCertPolicy.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling putCertPolicy.');
        }

        if (requestParameters.certPolicyParameters === null || requestParameters.certPolicyParameters === undefined) {
            throw new runtime.RequiredError('certPolicyParameters','Required parameter requestParameters.certPolicyParameters was null or undefined when calling putCertPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertPolicyParametersToJSON(requestParameters.certPolicyParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertPolicyFromJSON(jsonValue));
    }

    /**
     * Put cert policy
     */
    async putCertPolicy(requestParameters: PutCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertPolicy> {
        const response = await this.putCertPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put profile
     */
    async putProfileRaw(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRef>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling putProfile.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putProfile.');
        }

        if (requestParameters.profileParameters === null || requestParameters.profileParameters === undefined) {
            throw new runtime.RequiredError('profileParameters','Required parameter requestParameters.profileParameters was null or undefined when calling putProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}/{namespaceIdentifier}`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileParametersToJSON(requestParameters.profileParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRefFromJSON(jsonValue));
    }

    /**
     * Put profile
     */
    async putProfile(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRef> {
        const response = await this.putProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Key Vault role assignment
     */
    async removeKeyVaultRoleAssignmentRaw(requestParameters: RemoveKeyVaultRoleAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling removeKeyVaultRoleAssignment.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling removeKeyVaultRoleAssignment.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling removeKeyVaultRoleAssignment.');
        }

        if (requestParameters.roleAssignmentId === null || requestParameters.roleAssignmentId === undefined) {
            throw new runtime.RequiredError('roleAssignmentId','Required parameter requestParameters.roleAssignmentId was null or undefined when calling removeKeyVaultRoleAssignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/certificate-template/{templateId}/keyvault-role-assignments/{roleAssignmentId}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))).replace(`{${"roleAssignmentId"}}`, encodeURIComponent(String(requestParameters.roleAssignmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Key Vault role assignment
     */
    async removeKeyVaultRoleAssignment(requestParameters: RemoveKeyVaultRoleAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeKeyVaultRoleAssignmentRaw(requestParameters, initOverrides);
    }

    /**
     * Set issuer certificate
     */
    async setIssuerCertificateRaw(requestParameters: SetIssuerCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling setIssuerCertificate.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling setIssuerCertificate.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling setIssuerCertificate.');
        }

        if (requestParameters.policyIssuerCertRequest === null || requestParameters.policyIssuerCertRequest === undefined) {
            throw new runtime.RequiredError('policyIssuerCertRequest','Required parameter requestParameters.policyIssuerCertRequest was null or undefined when calling setIssuerCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}/issuer-cert`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyIssuerCertRequestToJSON(requestParameters.policyIssuerCertRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set issuer certificate
     */
    async setIssuerCertificate(requestParameters: SetIssuerCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setIssuerCertificateRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const PatchServiceConfigConfigPathEnum = {
    ServiceConfigPathAzureSubscriptionId: 'azureSubscriptionId',
    ServiceConfigPathKeyvaultArmResourceId: 'keyvaultArmResourceId',
    ServiceConfigPathAppRoleIds: 'appRoleIds',
    ServiceConfigPathAzureContainerRegistry: 'azureContainerRegistry'
} as const;
export type PatchServiceConfigConfigPathEnum = typeof PatchServiceConfigConfigPathEnum[keyof typeof PatchServiceConfigConfigPathEnum];
