/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificateTemplate,
  CertificateTemplateParameters,
  DeviceServicePrincipal,
  NamespaceTypeShortName,
} from '../models';
import {
    CertificateTemplateFromJSON,
    CertificateTemplateToJSON,
    CertificateTemplateParametersFromJSON,
    CertificateTemplateParametersToJSON,
    DeviceServicePrincipalFromJSON,
    DeviceServicePrincipalToJSON,
    NamespaceTypeShortNameFromJSON,
    NamespaceTypeShortNameToJSON,
} from '../models';

export interface LinkDeviceServicePrincipalV2Request {
    namespaceId: string;
}

export interface PutCertificateTemplateV2Request {
    namespaceType: NamespaceTypeShortName;
    namespaceId: string;
    templateId: string;
    certificateTemplateParameters: CertificateTemplateParameters;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Link device service principal
     */
    async linkDeviceServicePrincipalV2Raw(requestParameters: LinkDeviceServicePrincipalV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceServicePrincipal>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling linkDeviceServicePrincipalV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/device/{namespaceId}/link-service-principal`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceServicePrincipalFromJSON(jsonValue));
    }

    /**
     * Link device service principal
     */
    async linkDeviceServicePrincipalV2(requestParameters: LinkDeviceServicePrincipalV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceServicePrincipal> {
        const response = await this.linkDeviceServicePrincipalV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put certificate template
     */
    async putCertificateTemplateV2Raw(requestParameters: PutCertificateTemplateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateTemplate>> {
        if (requestParameters.namespaceType === null || requestParameters.namespaceType === undefined) {
            throw new runtime.RequiredError('namespaceType','Required parameter requestParameters.namespaceType was null or undefined when calling putCertificateTemplateV2.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putCertificateTemplateV2.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling putCertificateTemplateV2.');
        }

        if (requestParameters.certificateTemplateParameters === null || requestParameters.certificateTemplateParameters === undefined) {
            throw new runtime.RequiredError('certificateTemplateParameters','Required parameter requestParameters.certificateTemplateParameters was null or undefined when calling putCertificateTemplateV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/{namespaceType}/{namespaceId}/certificate-template/{templateId}`.replace(`{${"namespaceType"}}`, encodeURIComponent(String(requestParameters.namespaceType))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateTemplateParametersToJSON(requestParameters.certificateTemplateParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateTemplateFromJSON(jsonValue));
    }

    /**
     * Put certificate template
     */
    async putCertificateTemplateV2(requestParameters: PutCertificateTemplateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateTemplate> {
        const response = await this.putCertificateTemplateV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
