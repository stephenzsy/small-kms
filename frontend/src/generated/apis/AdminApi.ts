/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentConfigName,
  AgentConfigServer,
  AgentConfigServerFields,
  AgentConfiguration,
  AgentConfigurationParameters,
  AgentProxyInfo,
  AzureKeyvaultResourceCategory,
  AzureRoleAssignment,
  CertPolicy,
  CertPolicyParameters,
  CertPolicyRef,
  Certificate,
  CertificateRef,
  CertificateRuleIssuer,
  CertificateRuleMsEntraClientCredential,
  ManagedAppParameters,
  ManagedAppRef,
  NamespaceKind,
  NamespaceKind1,
  ProfileParameters,
  ProfileRef,
  RequestDiagnostics,
  ResourceKind,
  SystemAppName,
} from '../models/index';
import {
    AgentConfigNameFromJSON,
    AgentConfigNameToJSON,
    AgentConfigServerFromJSON,
    AgentConfigServerToJSON,
    AgentConfigServerFieldsFromJSON,
    AgentConfigServerFieldsToJSON,
    AgentConfigurationFromJSON,
    AgentConfigurationToJSON,
    AgentConfigurationParametersFromJSON,
    AgentConfigurationParametersToJSON,
    AgentProxyInfoFromJSON,
    AgentProxyInfoToJSON,
    AzureKeyvaultResourceCategoryFromJSON,
    AzureKeyvaultResourceCategoryToJSON,
    AzureRoleAssignmentFromJSON,
    AzureRoleAssignmentToJSON,
    CertPolicyFromJSON,
    CertPolicyToJSON,
    CertPolicyParametersFromJSON,
    CertPolicyParametersToJSON,
    CertPolicyRefFromJSON,
    CertPolicyRefToJSON,
    CertificateFromJSON,
    CertificateToJSON,
    CertificateRefFromJSON,
    CertificateRefToJSON,
    CertificateRuleIssuerFromJSON,
    CertificateRuleIssuerToJSON,
    CertificateRuleMsEntraClientCredentialFromJSON,
    CertificateRuleMsEntraClientCredentialToJSON,
    ManagedAppParametersFromJSON,
    ManagedAppParametersToJSON,
    ManagedAppRefFromJSON,
    ManagedAppRefToJSON,
    NamespaceKindFromJSON,
    NamespaceKindToJSON,
    NamespaceKind1FromJSON,
    NamespaceKind1ToJSON,
    ProfileParametersFromJSON,
    ProfileParametersToJSON,
    ProfileRefFromJSON,
    ProfileRefToJSON,
    RequestDiagnosticsFromJSON,
    RequestDiagnosticsToJSON,
    ResourceKindFromJSON,
    ResourceKindToJSON,
    SystemAppNameFromJSON,
    SystemAppNameToJSON,
} from '../models/index';

export interface AddKeyVaultRoleAssignmentRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
    resourceCategory: AzureKeyvaultResourceCategory;
    roleDefinitionId: string;
}

export interface AgentCallbackRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    configName: AgentConfigName;
    agentConfiguration: AgentConfiguration;
}

export interface CreateCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface CreateManagedAppRequest {
    managedAppParameters: ManagedAppParameters;
}

export interface DeleteCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface GetAgentConfigServerRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
}

export interface GetAgentConfigurationRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    configName: AgentConfigName;
    xSmallkmsIfVersionNotMatch?: string;
    refreshToken?: string;
}

export interface GetAgentProxyInfoRequest {
    namespaceId: string;
}

export interface GetCertPolicyRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface GetCertificateRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
}

export interface GetCertificateRuleIssuerRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
}

export interface GetCertificateRuleMsEntraClientCredentialRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
}

export interface GetDockerInfoRequest {
    namespaceId: string;
}

export interface GetManagedAppRequest {
    managedAppId: string;
}

export interface GetProfileRequest {
    profileResourceKind: ResourceKind;
    namespaceIdentifier: string;
}

export interface GetSystemAppRequest {
    systemAppName: SystemAppName;
}

export interface ImportProfileRequest {
    profileResourceKind: ResourceKind;
    namespaceIdentifier: string;
}

export interface ListCertPoliciesRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
}

export interface ListCertificatesRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    policyId?: string;
}

export interface ListKeyVaultRoleAssignmentsRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
    resourceCategory: AzureKeyvaultResourceCategory;
    principalId?: string;
}

export interface ListProfilesRequest {
    profileResourceKind: ResourceKind;
}

export interface PutAgentConfigServerRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    agentConfigServerFields: AgentConfigServerFields;
}

export interface PutAgentConfigurationRequest {
    namespaceKindLegacy: NamespaceKind1;
    namespaceId: string;
    configName: AgentConfigName;
    agentConfigurationParameters: AgentConfigurationParameters;
}

export interface PutCertPolicyRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    resourceIdentifier: string;
    certPolicyParameters: CertPolicyParameters;
}

export interface PutCertificateRuleIssuerRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    certificateRuleIssuer: CertificateRuleIssuer;
}

export interface PutCertificateRuleMsEntraClientCredentialRequest {
    namespaceKind: NamespaceKind;
    namespaceIdentifier: string;
    certificateRuleMsEntraClientCredential: CertificateRuleMsEntraClientCredential;
}

export interface PutProfileRequest {
    profileResourceKind: ResourceKind;
    namespaceIdentifier: string;
    profileParameters: ProfileParameters;
}

export interface SyncManagedAppRequest {
    managedAppId: string;
}

export interface SyncSystemAppRequest {
    systemAppName: SystemAppName;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Add Key Vault role assignment
     */
    async addKeyVaultRoleAssignmentRaw(requestParameters: AddKeyVaultRoleAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AzureRoleAssignment>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.resourceCategory === null || requestParameters.resourceCategory === undefined) {
            throw new runtime.RequiredError('resourceCategory','Required parameter requestParameters.resourceCategory was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        if (requestParameters.roleDefinitionId === null || requestParameters.roleDefinitionId === undefined) {
            throw new runtime.RequiredError('roleDefinitionId','Required parameter requestParameters.roleDefinitionId was null or undefined when calling addKeyVaultRoleAssignment.');
        }

        const queryParameters: any = {};

        if (requestParameters.roleDefinitionId !== undefined) {
            queryParameters['roleDefinitionId'] = requestParameters.roleDefinitionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}/keyvault-role-assignments/{resourceCategory}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))).replace(`{${"resourceCategory"}}`, encodeURIComponent(String(requestParameters.resourceCategory))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureRoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Add Key Vault role assignment
     */
    async addKeyVaultRoleAssignment(requestParameters: AddKeyVaultRoleAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AzureRoleAssignment> {
        const response = await this.addKeyVaultRoleAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agentCallbackRaw(requestParameters: AgentCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling agentCallback.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling agentCallback.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling agentCallback.');
        }

        if (requestParameters.agentConfiguration === null || requestParameters.agentConfiguration === undefined) {
            throw new runtime.RequiredError('agentConfiguration','Required parameter requestParameters.agentConfiguration was null or undefined when calling agentCallback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/agent-callback/{configName}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigurationToJSON(requestParameters.agentConfiguration),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async agentCallback(requestParameters: AgentCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.agentCallbackRaw(requestParameters, initOverrides);
    }

    /**
     * Create certificate
     */
    async createCertificateRaw(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling createCertificate.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling createCertificate.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling createCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}/create-cert`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * Create certificate
     */
    async createCertificate(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.createCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a managed app
     */
    async createManagedAppRaw(requestParameters: CreateManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagedAppRef>> {
        if (requestParameters.managedAppParameters === null || requestParameters.managedAppParameters === undefined) {
            throw new runtime.RequiredError('managedAppParameters','Required parameter requestParameters.managedAppParameters was null or undefined when calling createManagedApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/managed-app`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManagedAppParametersToJSON(requestParameters.managedAppParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagedAppRefFromJSON(jsonValue));
    }

    /**
     * Create a managed app
     */
    async createManagedApp(requestParameters: CreateManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagedAppRef> {
        const response = await this.createManagedAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete certificate
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling deleteCertificate.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling deleteCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete certificate
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Get agent config server
     */
    async getAgentConfigServerRaw(requestParameters: GetAgentConfigServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfigServer>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getAgentConfigServer.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getAgentConfigServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/agent-config/server`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigServerFromJSON(jsonValue));
    }

    /**
     * Get agent config server
     */
    async getAgentConfigServer(requestParameters: GetAgentConfigServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfigServer> {
        const response = await this.getAgentConfigServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent autoconfig
     */
    async getAgentConfigurationRaw(requestParameters: GetAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling getAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling getAgentConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.refreshToken !== undefined) {
            queryParameters['refreshToken'] = requestParameters.refreshToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSmallkmsIfVersionNotMatch !== undefined && requestParameters.xSmallkmsIfVersionNotMatch !== null) {
            headerParameters['X-Smallkms-If-Version-Not-Match'] = String(requestParameters.xSmallkmsIfVersionNotMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async getAgentConfiguration(requestParameters: GetAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.getAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent proxy information
     */
    async getAgentProxyInfoRaw(requestParameters: GetAgentProxyInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentProxyInfo>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getAgentProxyInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/servicePrincipal/{namespaceId}/agent-proxy`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentProxyInfoFromJSON(jsonValue));
    }

    /**
     * Get agent proxy information
     */
    async getAgentProxyInfo(requestParameters: GetAgentProxyInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentProxyInfo> {
        const response = await this.getAgentProxyInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cert policy
     */
    async getCertPolicyRaw(requestParameters: GetCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertPolicy>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertPolicy.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getCertPolicy.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling getCertPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertPolicyFromJSON(jsonValue));
    }

    /**
     * Get cert policy
     */
    async getCertPolicy(requestParameters: GetCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertPolicy> {
        const response = await this.getCertPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate
     */
    async getCertificateRaw(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Certificate>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificate.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getCertificate.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling getCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateFromJSON(jsonValue));
    }

    /**
     * Get certificate
     */
    async getCertificate(requestParameters: GetCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Certificate> {
        const response = await this.getCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate rules for namespace
     */
    async getCertificateRuleIssuerRaw(requestParameters: GetCertificateRuleIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateRuleIssuer>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificateRuleIssuer.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getCertificateRuleIssuer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-rule/issuer`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateRuleIssuerFromJSON(jsonValue));
    }

    /**
     * Get certificate rules for namespace
     */
    async getCertificateRuleIssuer(requestParameters: GetCertificateRuleIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateRuleIssuer> {
        const response = await this.getCertificateRuleIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificate rules for namespace
     */
    async getCertificateRuleMsEntraClientCredentialRaw(requestParameters: GetCertificateRuleMsEntraClientCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateRuleMsEntraClientCredential>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling getCertificateRuleMsEntraClientCredential.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getCertificateRuleMsEntraClientCredential.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-rule/ms-entra-client-credential`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateRuleMsEntraClientCredentialFromJSON(jsonValue));
    }

    /**
     * Get certificate rules for namespace
     */
    async getCertificateRuleMsEntraClientCredential(requestParameters: GetCertificateRuleMsEntraClientCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateRuleMsEntraClientCredential> {
        const response = await this.getCertificateRuleMsEntraClientCredentialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get diagnostics
     */
    async getDiagnosticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestDiagnostics>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/diagnostics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestDiagnosticsFromJSON(jsonValue));
    }

    /**
     * Get diagnostics
     */
    async getDiagnostics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestDiagnostics> {
        const response = await this.getDiagnosticsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get docker info
     */
    async getDockerInfoRaw(requestParameters: GetDockerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getDockerInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/servicePrincipal/{namespaceId}/agent-proxy/docker/info`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get docker info
     */
    async getDockerInfo(requestParameters: GetDockerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getDockerInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get managed app
     */
    async getManagedAppRaw(requestParameters: GetManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagedAppRef>> {
        if (requestParameters.managedAppId === null || requestParameters.managedAppId === undefined) {
            throw new runtime.RequiredError('managedAppId','Required parameter requestParameters.managedAppId was null or undefined when calling getManagedApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/managed-app/{managedAppId}`.replace(`{${"managedAppId"}}`, encodeURIComponent(String(requestParameters.managedAppId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagedAppRefFromJSON(jsonValue));
    }

    /**
     * Get managed app
     */
    async getManagedApp(requestParameters: GetManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagedAppRef> {
        const response = await this.getManagedAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get profile
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRef>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling getProfile.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}/{namespaceIdentifier}`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRefFromJSON(jsonValue));
    }

    /**
     * Get profile
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRef> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get system app
     */
    async getSystemAppRaw(requestParameters: GetSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagedAppRef>> {
        if (requestParameters.systemAppName === null || requestParameters.systemAppName === undefined) {
            throw new runtime.RequiredError('systemAppName','Required parameter requestParameters.systemAppName was null or undefined when calling getSystemApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/system-app/{systemAppName}`.replace(`{${"systemAppName"}}`, encodeURIComponent(String(requestParameters.systemAppName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagedAppRefFromJSON(jsonValue));
    }

    /**
     * Get system app
     */
    async getSystemApp(requestParameters: GetSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagedAppRef> {
        const response = await this.getSystemAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import profile
     */
    async importProfileRaw(requestParameters: ImportProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRef>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling importProfile.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling importProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}/{namespaceIdentifier}/import`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRefFromJSON(jsonValue));
    }

    /**
     * Import profile
     */
    async importProfile(requestParameters: ImportProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRef> {
        const response = await this.importProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List cert policies
     */
    async listCertPoliciesRaw(requestParameters: ListCertPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertPolicyRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listCertPolicies.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling listCertPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertPolicyRefFromJSON));
    }

    /**
     * List cert policies
     */
    async listCertPolicies(requestParameters: ListCertPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertPolicyRef>> {
        const response = await this.listCertPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificates
     */
    async listCertificatesRaw(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateRef>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listCertificates.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling listCertificates.');
        }

        const queryParameters: any = {};

        if (requestParameters.policyId !== undefined) {
            queryParameters['policyId'] = requestParameters.policyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateRefFromJSON));
    }

    /**
     * List certificates
     */
    async listCertificates(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateRef>> {
        const response = await this.listCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Key Vault role assignments
     */
    async listKeyVaultRoleAssignmentsRaw(requestParameters: ListKeyVaultRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AzureRoleAssignment>>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        if (requestParameters.resourceCategory === null || requestParameters.resourceCategory === undefined) {
            throw new runtime.RequiredError('resourceCategory','Required parameter requestParameters.resourceCategory was null or undefined when calling listKeyVaultRoleAssignments.');
        }

        const queryParameters: any = {};

        if (requestParameters.principalId !== undefined) {
            queryParameters['principalId'] = requestParameters.principalId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}/keyvault-role-assignments/{resourceCategory}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))).replace(`{${"resourceCategory"}}`, encodeURIComponent(String(requestParameters.resourceCategory))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AzureRoleAssignmentFromJSON));
    }

    /**
     * List Key Vault role assignments
     */
    async listKeyVaultRoleAssignments(requestParameters: ListKeyVaultRoleAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AzureRoleAssignment>> {
        const response = await this.listKeyVaultRoleAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List managed apps
     */
    async listManagedAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ManagedAppRef>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/managed-app`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ManagedAppRefFromJSON));
    }

    /**
     * List managed apps
     */
    async listManagedApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ManagedAppRef>> {
        const response = await this.listManagedAppsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List profiles
     */
    async listProfilesRaw(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProfileRef>>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling listProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileRefFromJSON));
    }

    /**
     * List profiles
     */
    async listProfiles(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProfileRef>> {
        const response = await this.listProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put agent config server
     */
    async putAgentConfigServerRaw(requestParameters: PutAgentConfigServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfigServer>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putAgentConfigServer.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putAgentConfigServer.');
        }

        if (requestParameters.agentConfigServerFields === null || requestParameters.agentConfigServerFields === undefined) {
            throw new runtime.RequiredError('agentConfigServerFields','Required parameter requestParameters.agentConfigServerFields was null or undefined when calling putAgentConfigServer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/agent-config/server`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigServerFieldsToJSON(requestParameters.agentConfigServerFields),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigServerFromJSON(jsonValue));
    }

    /**
     * Put agent config server
     */
    async putAgentConfigServer(requestParameters: PutAgentConfigServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfigServer> {
        const response = await this.putAgentConfigServerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfigurationRaw(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentConfiguration>> {
        if (requestParameters.namespaceKindLegacy === null || requestParameters.namespaceKindLegacy === undefined) {
            throw new runtime.RequiredError('namespaceKindLegacy','Required parameter requestParameters.namespaceKindLegacy was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.configName === null || requestParameters.configName === undefined) {
            throw new runtime.RequiredError('configName','Required parameter requestParameters.configName was null or undefined when calling putAgentConfiguration.');
        }

        if (requestParameters.agentConfigurationParameters === null || requestParameters.agentConfigurationParameters === undefined) {
            throw new runtime.RequiredError('agentConfigurationParameters','Required parameter requestParameters.agentConfigurationParameters was null or undefined when calling putAgentConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/{namespaceKindLegacy}/{namespaceId}/agent-config/{configName}`.replace(`{${"namespaceKindLegacy"}}`, encodeURIComponent(String(requestParameters.namespaceKindLegacy))).replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"configName"}}`, encodeURIComponent(String(requestParameters.configName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentConfigurationParametersToJSON(requestParameters.agentConfigurationParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentConfigurationFromJSON(jsonValue));
    }

    /**
     * Get agent autoconfig
     */
    async putAgentConfiguration(requestParameters: PutAgentConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentConfiguration> {
        const response = await this.putAgentConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put cert policy
     */
    async putCertPolicyRaw(requestParameters: PutCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertPolicy>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putCertPolicy.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putCertPolicy.');
        }

        if (requestParameters.resourceIdentifier === null || requestParameters.resourceIdentifier === undefined) {
            throw new runtime.RequiredError('resourceIdentifier','Required parameter requestParameters.resourceIdentifier was null or undefined when calling putCertPolicy.');
        }

        if (requestParameters.certPolicyParameters === null || requestParameters.certPolicyParameters === undefined) {
            throw new runtime.RequiredError('certPolicyParameters','Required parameter requestParameters.certPolicyParameters was null or undefined when calling putCertPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-policy/{resourceIdentifier}`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))).replace(`{${"resourceIdentifier"}}`, encodeURIComponent(String(requestParameters.resourceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertPolicyParametersToJSON(requestParameters.certPolicyParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertPolicyFromJSON(jsonValue));
    }

    /**
     * Put cert policy
     */
    async putCertPolicy(requestParameters: PutCertPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertPolicy> {
        const response = await this.putCertPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update certificate rules for namespace
     */
    async putCertificateRuleIssuerRaw(requestParameters: PutCertificateRuleIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateRuleIssuer>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putCertificateRuleIssuer.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putCertificateRuleIssuer.');
        }

        if (requestParameters.certificateRuleIssuer === null || requestParameters.certificateRuleIssuer === undefined) {
            throw new runtime.RequiredError('certificateRuleIssuer','Required parameter requestParameters.certificateRuleIssuer was null or undefined when calling putCertificateRuleIssuer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-rule/issuer`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateRuleIssuerToJSON(requestParameters.certificateRuleIssuer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateRuleIssuerFromJSON(jsonValue));
    }

    /**
     * Update certificate rules for namespace
     */
    async putCertificateRuleIssuer(requestParameters: PutCertificateRuleIssuerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateRuleIssuer> {
        const response = await this.putCertificateRuleIssuerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update certificate rules for namespace
     */
    async putCertificateRuleMsEntraClientCredentialRaw(requestParameters: PutCertificateRuleMsEntraClientCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateRuleMsEntraClientCredential>> {
        if (requestParameters.namespaceKind === null || requestParameters.namespaceKind === undefined) {
            throw new runtime.RequiredError('namespaceKind','Required parameter requestParameters.namespaceKind was null or undefined when calling putCertificateRuleMsEntraClientCredential.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putCertificateRuleMsEntraClientCredential.');
        }

        if (requestParameters.certificateRuleMsEntraClientCredential === null || requestParameters.certificateRuleMsEntraClientCredential === undefined) {
            throw new runtime.RequiredError('certificateRuleMsEntraClientCredential','Required parameter requestParameters.certificateRuleMsEntraClientCredential was null or undefined when calling putCertificateRuleMsEntraClientCredential.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceKind}/{namespaceIdentifier}/cert-rule/ms-entra-client-credential`.replace(`{${"namespaceKind"}}`, encodeURIComponent(String(requestParameters.namespaceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertificateRuleMsEntraClientCredentialToJSON(requestParameters.certificateRuleMsEntraClientCredential),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateRuleMsEntraClientCredentialFromJSON(jsonValue));
    }

    /**
     * Update certificate rules for namespace
     */
    async putCertificateRuleMsEntraClientCredential(requestParameters: PutCertificateRuleMsEntraClientCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateRuleMsEntraClientCredential> {
        const response = await this.putCertificateRuleMsEntraClientCredentialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put profile
     */
    async putProfileRaw(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRef>> {
        if (requestParameters.profileResourceKind === null || requestParameters.profileResourceKind === undefined) {
            throw new runtime.RequiredError('profileResourceKind','Required parameter requestParameters.profileResourceKind was null or undefined when calling putProfile.');
        }

        if (requestParameters.namespaceIdentifier === null || requestParameters.namespaceIdentifier === undefined) {
            throw new runtime.RequiredError('namespaceIdentifier','Required parameter requestParameters.namespaceIdentifier was null or undefined when calling putProfile.');
        }

        if (requestParameters.profileParameters === null || requestParameters.profileParameters === undefined) {
            throw new runtime.RequiredError('profileParameters','Required parameter requestParameters.profileParameters was null or undefined when calling putProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/profile/{profileResourceKind}/{namespaceIdentifier}`.replace(`{${"profileResourceKind"}}`, encodeURIComponent(String(requestParameters.profileResourceKind))).replace(`{${"namespaceIdentifier"}}`, encodeURIComponent(String(requestParameters.namespaceIdentifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileParametersToJSON(requestParameters.profileParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRefFromJSON(jsonValue));
    }

    /**
     * Put profile
     */
    async putProfile(requestParameters: PutProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRef> {
        const response = await this.putProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync managed app
     */
    async syncManagedAppRaw(requestParameters: SyncManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagedAppRef>> {
        if (requestParameters.managedAppId === null || requestParameters.managedAppId === undefined) {
            throw new runtime.RequiredError('managedAppId','Required parameter requestParameters.managedAppId was null or undefined when calling syncManagedApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/managed-app/{managedAppId}`.replace(`{${"managedAppId"}}`, encodeURIComponent(String(requestParameters.managedAppId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagedAppRefFromJSON(jsonValue));
    }

    /**
     * Sync managed app
     */
    async syncManagedApp(requestParameters: SyncManagedAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagedAppRef> {
        const response = await this.syncManagedAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync managed app
     */
    async syncSystemAppRaw(requestParameters: SyncSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManagedAppRef>> {
        if (requestParameters.systemAppName === null || requestParameters.systemAppName === undefined) {
            throw new runtime.RequiredError('systemAppName','Required parameter requestParameters.systemAppName was null or undefined when calling syncSystemApp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/system-app/{systemAppName}`.replace(`{${"systemAppName"}}`, encodeURIComponent(String(requestParameters.systemAppName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManagedAppRefFromJSON(jsonValue));
    }

    /**
     * Sync managed app
     */
    async syncSystemApp(requestParameters: SyncSystemAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManagedAppRef> {
        const response = await this.syncSystemAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
