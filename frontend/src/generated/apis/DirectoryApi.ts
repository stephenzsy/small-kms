/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NamespacePermissionKey,
  NamespacePermissions,
  NamespaceProfile,
  NamespaceRef,
  NamespaceType,
} from '../models';
import {
    NamespacePermissionKeyFromJSON,
    NamespacePermissionKeyToJSON,
    NamespacePermissionsFromJSON,
    NamespacePermissionsToJSON,
    NamespaceProfileFromJSON,
    NamespaceProfileToJSON,
    NamespaceRefFromJSON,
    NamespaceRefToJSON,
    NamespaceTypeFromJSON,
    NamespaceTypeToJSON,
} from '../models';

export interface GetNamespaceProfileV1Request {
    namespaceId: string;
}

export interface HasPermissionV1Request {
    namespaceId: string;
    permissionKey: NamespacePermissionKey;
}

export interface ListNamespacesV1Request {
    namespaceType: NamespaceType;
}

export interface MyHasPermissionV1Request {
    permissionKey: NamespacePermissionKey;
}

export interface PutPermissionsV1Request {
    namespaceId: string;
    objectId: string;
    namespacePermissions: NamespacePermissions;
}

export interface RegisterNamespaceProfileV1Request {
    namespaceId: string;
}

/**
 * 
 */
export class DirectoryApi extends runtime.BaseAPI {

    /**
     * Get my profiles
     */
    async getMyProfilesV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NamespaceProfile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/my/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NamespaceProfileFromJSON));
    }

    /**
     * Get my profiles
     */
    async getMyProfilesV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NamespaceProfile>> {
        const response = await this.getMyProfilesV1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get namespace profile
     */
    async getNamespaceProfileV1Raw(requestParameters: GetNamespaceProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NamespaceProfile>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getNamespaceProfileV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceId}/profile`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NamespaceProfileFromJSON(jsonValue));
    }

    /**
     * Get namespace profile
     */
    async getNamespaceProfileV1(requestParameters: GetNamespaceProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NamespaceProfile> {
        const response = await this.getNamespaceProfileV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Has permission
     */
    async hasPermissionV1Raw(requestParameters: HasPermissionV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NamespaceRef>>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling hasPermissionV1.');
        }

        if (requestParameters.permissionKey === null || requestParameters.permissionKey === undefined) {
            throw new runtime.RequiredError('permissionKey','Required parameter requestParameters.permissionKey was null or undefined when calling hasPermissionV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceId}/hasPermission/{permissionKey}`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"permissionKey"}}`, encodeURIComponent(String(requestParameters.permissionKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NamespaceRefFromJSON));
    }

    /**
     * Has permission
     */
    async hasPermissionV1(requestParameters: HasPermissionV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NamespaceRef>> {
        const response = await this.hasPermissionV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List namespaces
     */
    async listNamespacesV1Raw(requestParameters: ListNamespacesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NamespaceRef>>> {
        if (requestParameters.namespaceType === null || requestParameters.namespaceType === undefined) {
            throw new runtime.RequiredError('namespaceType','Required parameter requestParameters.namespaceType was null or undefined when calling listNamespacesV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/namespaces/{namespaceType}`.replace(`{${"namespaceType"}}`, encodeURIComponent(String(requestParameters.namespaceType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NamespaceRefFromJSON));
    }

    /**
     * List namespaces
     */
    async listNamespacesV1(requestParameters: ListNamespacesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NamespaceRef>> {
        const response = await this.listNamespacesV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * My Has permission
     */
    async myHasPermissionV1Raw(requestParameters: MyHasPermissionV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NamespaceRef>>> {
        if (requestParameters.permissionKey === null || requestParameters.permissionKey === undefined) {
            throw new runtime.RequiredError('permissionKey','Required parameter requestParameters.permissionKey was null or undefined when calling myHasPermissionV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/my/hasPermission/{permissionKey}`.replace(`{${"permissionKey"}}`, encodeURIComponent(String(requestParameters.permissionKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NamespaceRefFromJSON));
    }

    /**
     * My Has permission
     */
    async myHasPermissionV1(requestParameters: MyHasPermissionV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NamespaceRef>> {
        const response = await this.myHasPermissionV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Put permissions
     */
    async putPermissionsV1Raw(requestParameters: PutPermissionsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NamespacePermissions>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling putPermissionsV1.');
        }

        if (requestParameters.objectId === null || requestParameters.objectId === undefined) {
            throw new runtime.RequiredError('objectId','Required parameter requestParameters.objectId was null or undefined when calling putPermissionsV1.');
        }

        if (requestParameters.namespacePermissions === null || requestParameters.namespacePermissions === undefined) {
            throw new runtime.RequiredError('namespacePermissions','Required parameter requestParameters.namespacePermissions was null or undefined when calling putPermissionsV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceId}/permissions/{objectId}`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))).replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters.objectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NamespacePermissionsToJSON(requestParameters.namespacePermissions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NamespacePermissionsFromJSON(jsonValue));
    }

    /**
     * Put permissions
     */
    async putPermissionsV1(requestParameters: PutPermissionsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NamespacePermissions> {
        const response = await this.putPermissionsV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register namespace
     */
    async registerNamespaceProfileV1Raw(requestParameters: RegisterNamespaceProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NamespaceProfile>> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new runtime.RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling registerNamespaceProfileV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{namespaceId}/profile`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NamespaceProfileFromJSON(jsonValue));
    }

    /**
     * Register namespace
     */
    async registerNamespaceProfileV1(requestParameters: RegisterNamespaceProfileV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NamespaceProfile> {
        const response = await this.registerNamespaceProfileV1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sync my profiles
     */
    async syncMyProfilesV1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NamespaceProfile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/my/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NamespaceProfileFromJSON));
    }

    /**
     * Sync my profiles
     */
    async syncMyProfilesV1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NamespaceProfile>> {
        const response = await this.syncMyProfilesV1Raw(initOverrides);
        return await response.value();
    }

}
