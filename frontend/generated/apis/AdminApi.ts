/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificateCategory,
  CertificateFileFormat,
  CertificateRef,
  CreateCertificateParameters,
} from '../models';
import {
    CertificateCategoryFromJSON,
    CertificateCategoryToJSON,
    CertificateFileFormatFromJSON,
    CertificateFileFormatToJSON,
    CertificateRefFromJSON,
    CertificateRefToJSON,
    CreateCertificateParametersFromJSON,
    CreateCertificateParametersToJSON,
} from '../models';

export interface CreateCertificateRequest {
    xCallerPrincipalName: string;
    xCallerPrincipalId: string;
    force?: boolean;
    createCertificateParameters?: CreateCertificateParameters;
}

export interface DownloadCertificateRequest {
    xCallerPrincipalName: string;
    xCallerPrincipalId: string;
    id: string;
    format?: CertificateFileFormat;
}

export interface ListCertificatesRequest {
    xCallerPrincipalName: string;
    xCallerPrincipalId: string;
    category: CertificateCategory;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Create certificate
     */
    async createCertificateRaw(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateRef>> {
        if (requestParameters.xCallerPrincipalName === null || requestParameters.xCallerPrincipalName === undefined) {
            throw new runtime.RequiredError('xCallerPrincipalName','Required parameter requestParameters.xCallerPrincipalName was null or undefined when calling createCertificate.');
        }

        if (requestParameters.xCallerPrincipalId === null || requestParameters.xCallerPrincipalId === undefined) {
            throw new runtime.RequiredError('xCallerPrincipalId','Required parameter requestParameters.xCallerPrincipalId was null or undefined when calling createCertificate.');
        }

        const queryParameters: any = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCallerPrincipalName !== undefined && requestParameters.xCallerPrincipalName !== null) {
            headerParameters['X-Caller-Principal-Name'] = String(requestParameters.xCallerPrincipalName);
        }

        if (requestParameters.xCallerPrincipalId !== undefined && requestParameters.xCallerPrincipalId !== null) {
            headerParameters['X-Caller-Principal-Id'] = String(requestParameters.xCallerPrincipalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/certificate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCertificateParametersToJSON(requestParameters.createCertificateParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateRefFromJSON(jsonValue));
    }

    /**
     * Create certificate
     */
    async createCertificate(requestParameters: CreateCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateRef> {
        const response = await this.createCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download certificate
     */
    async downloadCertificateRaw(requestParameters: DownloadCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.xCallerPrincipalName === null || requestParameters.xCallerPrincipalName === undefined) {
            throw new runtime.RequiredError('xCallerPrincipalName','Required parameter requestParameters.xCallerPrincipalName was null or undefined when calling downloadCertificate.');
        }

        if (requestParameters.xCallerPrincipalId === null || requestParameters.xCallerPrincipalId === undefined) {
            throw new runtime.RequiredError('xCallerPrincipalId','Required parameter requestParameters.xCallerPrincipalId was null or undefined when calling downloadCertificate.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadCertificate.');
        }

        const queryParameters: any = {};

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCallerPrincipalName !== undefined && requestParameters.xCallerPrincipalName !== null) {
            headerParameters['X-Caller-Principal-Name'] = String(requestParameters.xCallerPrincipalName);
        }

        if (requestParameters.xCallerPrincipalId !== undefined && requestParameters.xCallerPrincipalId !== null) {
            headerParameters['X-Caller-Principal-Id'] = String(requestParameters.xCallerPrincipalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/certificate/{id}/download`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download certificate
     */
    async downloadCertificate(requestParameters: DownloadCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List certificates
     */
    async listCertificatesRaw(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CertificateRef>>> {
        if (requestParameters.xCallerPrincipalName === null || requestParameters.xCallerPrincipalName === undefined) {
            throw new runtime.RequiredError('xCallerPrincipalName','Required parameter requestParameters.xCallerPrincipalName was null or undefined when calling listCertificates.');
        }

        if (requestParameters.xCallerPrincipalId === null || requestParameters.xCallerPrincipalId === undefined) {
            throw new runtime.RequiredError('xCallerPrincipalId','Required parameter requestParameters.xCallerPrincipalId was null or undefined when calling listCertificates.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling listCertificates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCallerPrincipalName !== undefined && requestParameters.xCallerPrincipalName !== null) {
            headerParameters['X-Caller-Principal-Name'] = String(requestParameters.xCallerPrincipalName);
        }

        if (requestParameters.xCallerPrincipalId !== undefined && requestParameters.xCallerPrincipalId !== null) {
            headerParameters['X-Caller-Principal-Id'] = String(requestParameters.xCallerPrincipalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/certificates/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CertificateRefFromJSON));
    }

    /**
     * List certificates
     */
    async listCertificates(requestParameters: ListCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CertificateRef>> {
        const response = await this.listCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
