/* tslint:disable */
/* eslint-disable */
/**
 * Small KMS Admin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CertificateRef
 */
export interface CertificateRef {
    /**
     * Unique ID of the certificate
     * @type {string}
     * @memberof CertificateRef
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateRef
     */
    commonName: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateRef
     */
    serialNumber: string;
    /**
     * 
     * @type {boolean}
     * @memberof CertificateRef
     */
    enabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CertificateRef
     */
    notBefore: Date;
    /**
     * 
     * @type {Date}
     * @memberof CertificateRef
     */
    notAfter: Date;
    /**
     * 
     * @type {string}
     * @memberof CertificateRef
     */
    issuerId: string;
}

/**
 * Check if a given object implements the CertificateRef interface.
 */
export function instanceOfCertificateRef(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "commonName" in value;
    isInstance = isInstance && "serialNumber" in value;
    isInstance = isInstance && "notBefore" in value;
    isInstance = isInstance && "notAfter" in value;
    isInstance = isInstance && "issuerId" in value;

    return isInstance;
}

export function CertificateRefFromJSON(json: any): CertificateRef {
    return CertificateRefFromJSONTyped(json, false);
}

export function CertificateRefFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateRef {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'commonName': json['commonName'],
        'serialNumber': json['serialNumber'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'notBefore': (new Date(json['notBefore'])),
        'notAfter': (new Date(json['notAfter'])),
        'issuerId': json['issuerId'],
    };
}

export function CertificateRefToJSON(value?: CertificateRef | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'commonName': value.commonName,
        'serialNumber': value.serialNumber,
        'enabled': value.enabled,
        'notBefore': (value.notBefore.toISOString()),
        'notAfter': (value.notAfter.toISOString()),
        'issuerId': value.issuerId,
    };
}

