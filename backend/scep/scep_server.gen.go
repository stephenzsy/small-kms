// Package scep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package scep

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// Defines values for ScepGetParamsOperation.
const (
	GetCACaps ScepGetParamsOperation = "GetCACaps"
	GetCaCert ScepGetParamsOperation = "GetCaCert"
)

// Defines values for ScepPostParamsOperation.
const (
	PKIOperation ScepPostParamsOperation = "PKIOperation"
)

// ScepGetParams defines parameters for ScepGet.
type ScepGetParams struct {
	Operation ScepGetParamsOperation `form:"operation" json:"operation"`
}

// ScepGetParamsOperation defines parameters for ScepGet.
type ScepGetParamsOperation string

// ScepPostParams defines parameters for ScepPost.
type ScepPostParams struct {
	Operation ScepPostParamsOperation `form:"operation" json:"operation"`
}

// ScepPostParamsOperation defines parameters for ScepPost.
type ScepPostParamsOperation string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// SCEP GET handler
	// (GET /scep)
	ScepGet(c *gin.Context, params ScepGetParams)
	// SCEP POST Handler
	// (POST /scep)
	ScepPost(c *gin.Context, params ScepPostParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ScepGet operation middleware
func (siw *ServerInterfaceWrapper) ScepGet(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScepGetParams

	// ------------- Required query parameter "operation" -------------

	if paramValue := c.Query("operation"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument operation is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "operation", c.Request.URL.Query(), &params.Operation)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter operation: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ScepGet(c, params)
}

// ScepPost operation middleware
func (siw *ServerInterfaceWrapper) ScepPost(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScepPostParams

	// ------------- Required query parameter "operation" -------------

	if paramValue := c.Query("operation"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument operation is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "operation", c.Request.URL.Query(), &params.Operation)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter operation: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ScepPost(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/scep", wrapper.ScepGet)
	router.POST(options.BaseURL+"/scep", wrapper.ScepPost)
}
