// Package agentendpoint provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package agentendpoint

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	externalRef0 "github.com/stephenzsy/small-kms/backend/models"
	externalRef1 "github.com/stephenzsy/small-kms/backend/models/agent"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// IdParameter defines model for IdParameter.
type IdParameter = string

// NamespaceIdParameter defines model for NamespaceIdParameter.
type NamespaceIdParameter = string

// NamespaceProviderParameter defines model for NamespaceProviderParameter.
type NamespaceProviderParameter = externalRef0.NamespaceProvider

// AgentDockerImagePullJSONRequestBody defines body for AgentDockerImagePull for application/json ContentType.
type AgentDockerImagePullJSONRequestBody = externalRef1.PullImageRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAgentDiagnostics request
	GetAgentDiagnostics(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentDockerContainerList request
	AgentDockerContainerList(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentDockerImagePullWithBody request with any body
	AgentDockerImagePullWithBody(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgentDockerImagePull(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, body AgentDockerImagePullJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentDockerImageList request
	AgentDockerImageList(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentDockerSystemInformation request
	GetAgentDockerSystemInformation(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgentDockerNetowks request
	ListAgentDockerNetowks(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAgentDiagnostics(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentDiagnosticsRequest(c.Server, namespaceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentDockerContainerList(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentDockerContainerListRequest(c.Server, namespaceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentDockerImagePullWithBody(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentDockerImagePullRequestWithBody(c.Server, namespaceId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentDockerImagePull(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, body AgentDockerImagePullJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentDockerImagePullRequest(c.Server, namespaceId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentDockerImageList(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentDockerImageListRequest(c.Server, namespaceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentDockerSystemInformation(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentDockerSystemInformationRequest(c.Server, namespaceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgentDockerNetowks(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentDockerNetowksRequest(c.Server, namespaceId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAgentDiagnosticsRequest generates requests for GetAgentDiagnostics
func NewGetAgentDiagnosticsRequest(server string, namespaceId NamespaceIdParameter, id IdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/service-principal/%s/agent-instances/%s/diagnostics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentDockerContainerListRequest generates requests for AgentDockerContainerList
func NewAgentDockerContainerListRequest(server string, namespaceId NamespaceIdParameter, id IdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/service-principal/%s/agent-instances/%s/docker/containers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentDockerImagePullRequest calls the generic AgentDockerImagePull builder with application/json body
func NewAgentDockerImagePullRequest(server string, namespaceId NamespaceIdParameter, id IdParameter, body AgentDockerImagePullJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAgentDockerImagePullRequestWithBody(server, namespaceId, id, "application/json", bodyReader)
}

// NewAgentDockerImagePullRequestWithBody generates requests for AgentDockerImagePull with any type of body
func NewAgentDockerImagePullRequestWithBody(server string, namespaceId NamespaceIdParameter, id IdParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/service-principal/%s/agent-instances/%s/docker/image-pull", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAgentDockerImageListRequest generates requests for AgentDockerImageList
func NewAgentDockerImageListRequest(server string, namespaceId NamespaceIdParameter, id IdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/service-principal/%s/agent-instances/%s/docker/images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentDockerSystemInformationRequest generates requests for GetAgentDockerSystemInformation
func NewGetAgentDockerSystemInformationRequest(server string, namespaceId NamespaceIdParameter, id IdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/service-principal/%s/agent-instances/%s/docker/info", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAgentDockerNetowksRequest generates requests for ListAgentDockerNetowks
func NewListAgentDockerNetowksRequest(server string, namespaceId NamespaceIdParameter, id IdParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/service-principal/%s/agent-instances/%s/docker/networks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAgentDiagnosticsWithResponse request
	GetAgentDiagnosticsWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*GetAgentDiagnosticsResponse, error)

	// AgentDockerContainerListWithResponse request
	AgentDockerContainerListWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*AgentDockerContainerListResponse, error)

	// AgentDockerImagePullWithBodyWithResponse request with any body
	AgentDockerImagePullWithBodyWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentDockerImagePullResponse, error)

	AgentDockerImagePullWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, body AgentDockerImagePullJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentDockerImagePullResponse, error)

	// AgentDockerImageListWithResponse request
	AgentDockerImageListWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*AgentDockerImageListResponse, error)

	// GetAgentDockerSystemInformationWithResponse request
	GetAgentDockerSystemInformationWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*GetAgentDockerSystemInformationResponse, error)

	// ListAgentDockerNetowksWithResponse request
	ListAgentDockerNetowksWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*ListAgentDockerNetowksResponse, error)
}

type GetAgentDiagnosticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.RequestDiagnosticsResponse
}

// Status returns HTTPResponse.Status
func (r GetAgentDiagnosticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentDiagnosticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentDockerContainerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef1.DockerContainer
}

// Status returns HTTPResponse.Status
func (r AgentDockerContainerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentDockerContainerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentDockerImagePullResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AgentDockerImagePullResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentDockerImagePullResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentDockerImageListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef1.DockerImageSummary
}

// Status returns HTTPResponse.Status
func (r AgentDockerImageListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentDockerImageListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentDockerSystemInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef1.DockerInfo
}

// Status returns HTTPResponse.Status
func (r GetAgentDockerSystemInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentDockerSystemInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentDockerNetowksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef1.DockerNetworkResource
}

// Status returns HTTPResponse.Status
func (r ListAgentDockerNetowksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentDockerNetowksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAgentDiagnosticsWithResponse request returning *GetAgentDiagnosticsResponse
func (c *ClientWithResponses) GetAgentDiagnosticsWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*GetAgentDiagnosticsResponse, error) {
	rsp, err := c.GetAgentDiagnostics(ctx, namespaceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentDiagnosticsResponse(rsp)
}

// AgentDockerContainerListWithResponse request returning *AgentDockerContainerListResponse
func (c *ClientWithResponses) AgentDockerContainerListWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*AgentDockerContainerListResponse, error) {
	rsp, err := c.AgentDockerContainerList(ctx, namespaceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentDockerContainerListResponse(rsp)
}

// AgentDockerImagePullWithBodyWithResponse request with arbitrary body returning *AgentDockerImagePullResponse
func (c *ClientWithResponses) AgentDockerImagePullWithBodyWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentDockerImagePullResponse, error) {
	rsp, err := c.AgentDockerImagePullWithBody(ctx, namespaceId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentDockerImagePullResponse(rsp)
}

func (c *ClientWithResponses) AgentDockerImagePullWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, body AgentDockerImagePullJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentDockerImagePullResponse, error) {
	rsp, err := c.AgentDockerImagePull(ctx, namespaceId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentDockerImagePullResponse(rsp)
}

// AgentDockerImageListWithResponse request returning *AgentDockerImageListResponse
func (c *ClientWithResponses) AgentDockerImageListWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*AgentDockerImageListResponse, error) {
	rsp, err := c.AgentDockerImageList(ctx, namespaceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentDockerImageListResponse(rsp)
}

// GetAgentDockerSystemInformationWithResponse request returning *GetAgentDockerSystemInformationResponse
func (c *ClientWithResponses) GetAgentDockerSystemInformationWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*GetAgentDockerSystemInformationResponse, error) {
	rsp, err := c.GetAgentDockerSystemInformation(ctx, namespaceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentDockerSystemInformationResponse(rsp)
}

// ListAgentDockerNetowksWithResponse request returning *ListAgentDockerNetowksResponse
func (c *ClientWithResponses) ListAgentDockerNetowksWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, id IdParameter, reqEditors ...RequestEditorFn) (*ListAgentDockerNetowksResponse, error) {
	rsp, err := c.ListAgentDockerNetowks(ctx, namespaceId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentDockerNetowksResponse(rsp)
}

// ParseGetAgentDiagnosticsResponse parses an HTTP response from a GetAgentDiagnosticsWithResponse call
func ParseGetAgentDiagnosticsResponse(rsp *http.Response) (*GetAgentDiagnosticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentDiagnosticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.RequestDiagnosticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAgentDockerContainerListResponse parses an HTTP response from a AgentDockerContainerListWithResponse call
func ParseAgentDockerContainerListResponse(rsp *http.Response) (*AgentDockerContainerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentDockerContainerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef1.DockerContainer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAgentDockerImagePullResponse parses an HTTP response from a AgentDockerImagePullWithResponse call
func ParseAgentDockerImagePullResponse(rsp *http.Response) (*AgentDockerImagePullResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentDockerImagePullResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAgentDockerImageListResponse parses an HTTP response from a AgentDockerImageListWithResponse call
func ParseAgentDockerImageListResponse(rsp *http.Response) (*AgentDockerImageListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentDockerImageListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef1.DockerImageSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentDockerSystemInformationResponse parses an HTTP response from a GetAgentDockerSystemInformationWithResponse call
func ParseGetAgentDockerSystemInformationResponse(rsp *http.Response) (*GetAgentDockerSystemInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentDockerSystemInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef1.DockerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAgentDockerNetowksResponse parses an HTTP response from a ListAgentDockerNetowksWithResponse call
func ParseListAgentDockerNetowksResponse(rsp *http.Response) (*ListAgentDockerNetowksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentDockerNetowksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef1.DockerNetworkResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get agent diagnostics
	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/diagnostics)
	GetAgentDiagnostics(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error

	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/containers)
	AgentDockerContainerList(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error

	// (POST /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/image-pull)
	AgentDockerImagePull(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error

	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/images)
	AgentDockerImageList(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error
	// Get agent docker system information
	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/info)
	GetAgentDockerSystemInformation(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error

	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/networks)
	ListAgentDockerNetowks(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAgentDiagnostics converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentDiagnostics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentDiagnostics(ctx, namespaceId, id)
	return err
}

// AgentDockerContainerList converts echo context to params.
func (w *ServerInterfaceWrapper) AgentDockerContainerList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentDockerContainerList(ctx, namespaceId, id)
	return err
}

// AgentDockerImagePull converts echo context to params.
func (w *ServerInterfaceWrapper) AgentDockerImagePull(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentDockerImagePull(ctx, namespaceId, id)
	return err
}

// AgentDockerImageList converts echo context to params.
func (w *ServerInterfaceWrapper) AgentDockerImageList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentDockerImageList(ctx, namespaceId, id)
	return err
}

// GetAgentDockerSystemInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentDockerSystemInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentDockerSystemInformation(ctx, namespaceId, id)
	return err
}

// ListAgentDockerNetowks converts echo context to params.
func (w *ServerInterfaceWrapper) ListAgentDockerNetowks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAgentDockerNetowks(ctx, namespaceId, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/diagnostics", wrapper.GetAgentDiagnostics)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/containers", wrapper.AgentDockerContainerList)
	router.POST(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/image-pull", wrapper.AgentDockerImagePull)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/images", wrapper.AgentDockerImageList)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/info", wrapper.GetAgentDockerSystemInformation)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/networks", wrapper.ListAgentDockerNetowks)

}
