/*
 * Small KMS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/stephenzsy/small-kms/backend/api"
	"github.com/stephenzsy/small-kms/backend/base"
	"github.com/stephenzsy/small-kms/backend/cert"
	"github.com/stephenzsy/small-kms/backend/internal/auth"
	requestcontext "github.com/stephenzsy/small-kms/backend/internal/context"
	"github.com/stephenzsy/small-kms/backend/managedapp"
	"github.com/stephenzsy/small-kms/backend/models"
	"github.com/stephenzsy/small-kms/backend/profile"
	"github.com/stephenzsy/small-kms/backend/taskmanager"
)

var BuildID = "dev"

func main() {

	// Find .env file
	envFilePathPtr := flag.String("env", "", "path to .env file")
	envPrettyLog := flag.Bool("pretty-log", false, "pretty log")
	flag.Parse()

	zerolog.SetGlobalLevel(zerolog.DebugLevel)
	logger := log.Logger
	if *envPrettyLog {
		output := zerolog.ConsoleWriter{Out: os.Stderr}
		output.FormatLevel = func(i interface{}) string {
			return strings.ToUpper(fmt.Sprintf("| %-6s|", i))
		}
		output.FormatMessage = func(i interface{}) string {
			return fmt.Sprintf("%s", i)
		}
		output.FormatFieldName = func(i interface{}) string {
			return fmt.Sprintf("%s:", i)
		}
		logger = zerolog.New(output).With().Timestamp().Logger()

	}

	args := flag.Args()

	if len(args) < 2 {
		log.Info().Msg("Usage: smallkms <role> <listenerAddress>")
		os.Exit(1)
	}

	// Find .env file
	if *envFilePathPtr != "" {
		err := godotenv.Load("./.env")
		if err != nil {
			log.Printf("Error loading .env file: %s\n", err)
		}
	}

	logger.Info().Msgf("Server starting, version: %s", BuildID)
	role := args[0]
	listenerAddress := args[1]
	if len(listenerAddress) == 0 {
		log.Error().Msg("listernerAddress is required")
		os.Exit(1)
	}

	switch role {
	case "admin":
		e := echo.New()
		e.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{
			LogURI:    true,
			LogStatus: true,
			LogValuesFunc: func(c echo.Context, v middleware.RequestLoggerValues) error {
				logger.Info().
					Str("URI", v.URI).
					Int("status", v.Status).
					Msg("request")
				return nil
			},
		}))
		e.Use(middleware.Recover())

		if os.Getenv("ENABLE_CORS") == "true" {
			e.Use(middleware.CORS())
		}
		ctx := logger.WithContext(context.Background())
		server := api.NewServer()
		apiServer, err := api.NewApiServer(ctx, BuildID, server)
		if err != nil {
			logger.Fatal().Err(err).Msg("failed to initialize api server")
		}
		e.Use(base.HandleResponseError)
		e.Use(requestcontext.InjectServiceContextMiddleware(apiServer))
		if os.Getenv("ENABLE_DEV_AUTH") == "true" {
			e.Use(auth.UnverifiedAADJwtAuth)
		} else {
			e.Use(auth.ProxiedAADAuth)
		}
		e.Use(server.GetAfterAuthMiddleware())
		models.RegisterHandlers(e, server)
		base.RegisterHandlers(e, base.NewBaseServer(BuildID))
		profile.RegisterHandlers(e, profile.NewServer(apiServer))
		managedapp.RegisterHandlers(e, managedapp.NewServer(apiServer))
		cert.RegisterHandlers(e, cert.NewServer(apiServer))
		//key.RegisterHandlers(e, key.NewServer(apiServer))

		tm := taskmanager.NewChainedTaskManager().WithTask(
			taskmanager.NewTask("echo", func(c context.Context, sigCh <-chan os.Signal) error {
				go e.Start(listenerAddress)
				<-sigCh
				return e.Shutdown(c)
			}))
		logger.Fatal().Err(taskmanager.StartWithGracefulShutdown(ctx, tm)).Msg("task manager exited")
	}

}
