/*
 * Small KMS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"os"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/stephenzsy/small-kms/backend/admin"
	"github.com/stephenzsy/small-kms/backend/auth"
)

func main() {
	if len(os.Args) < 3 {
		log.Println("Usage: smallkms <role> <listenerAddress>")
		os.Exit(1)
	}

	log.Println("Server started")
	role := os.Args[1]
	listenerAddress := os.Args[2]
	if len(listenerAddress) == 0 {
		log.Println("listernerAddress is required")
		os.Exit(1)
	}

	router := gin.Default()

	switch role {
	case "admin":
		if os.Getenv("ENABLE_CORS") == "true" {
			corsConfig := cors.DefaultConfig()
			corsConfig.AllowAllOrigins = true
			corsConfig.AllowHeaders = append(corsConfig.AllowHeaders,
				"Authorization", "X-Ms-Client-Principal", "X-Ms-Client-Principal-Name", "X-Ms-Client-Principal-Id")
			corsConfig.AllowCredentials = true
			router.Use(cors.New(corsConfig))
		}
		if os.Getenv("ENABLE_DEV_AUTH") == "true" {
			router.Use(auth.HandleDevJWTMiddleware)
		} else {
			router.Use(auth.HandleAadAuthMiddleware)
		}
		admin.RegisterHandlers(router, admin.NewAdminServer())
	}

	log.Fatal(router.Run(listenerAddress))
}
