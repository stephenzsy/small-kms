// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package models

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/stephenzsy/small-kms/backend/shared"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AgentHostRole.
const (
	AgentHostRoleRadiusServer AgentHostRole = "radiusServer"
)

// Defines values for CreateProfileRequestType.
const (
	ProfileTypeManagedApplication CreateProfileRequestType = "managed-application"
)

// Defines values for IncludeCertificate.
const (
	IncludeJWK IncludeCertificate = "jwk"
	IncludePEM IncludeCertificate = "pem"
)

// Defines values for PatchServiceConfigParamsConfigPath.
const (
	ServiceConfigPathAppRoleIds             PatchServiceConfigParamsConfigPath = "appRoleIds"
	ServiceConfigPathAzureContainerRegistry PatchServiceConfigParamsConfigPath = "azureContainerRegistry"
	ServiceConfigPathAzureSubscriptionId    PatchServiceConfigParamsConfigPath = "azureSubscriptionId"
	ServiceConfigPathKeyvaultArmResourceId  PatchServiceConfigParamsConfigPath = "keyvaultArmResourceId"
)

// AgentCheckInResult defines model for AgentCheckInResult.
type AgentCheckInResult struct {
	Message *string `json:"message,omitempty"`
}

// AgentHostRole defines model for AgentHostRole.
type AgentHostRole string

// CertificateLifetimeTrigger defines model for CertificateLifetimeTrigger.
type CertificateLifetimeTrigger struct {
	DaysBeforeExpiry   *int32 `json:"days_before_expiry,omitempty"`
	LifetimePercentage *int32 `json:"lifetime_percentage,omitempty"`
}

// CertificateTemplate defines model for CertificateTemplate.
type CertificateTemplate struct {
	// Deleted Time when the deleted was deleted
	Deleted        *time.Time                   `json:"deleted,omitempty"`
	Id             Identifier                   `json:"id"`
	IssuerTemplate externalRef0.ResourceLocator `json:"issuerTemplate"`

	// KeyProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	KeyProperties   externalRef0.JwkProperties `json:"keyProperties"`
	KeyStorePath    *string                    `json:"keyStorePath,omitempty"`
	LifetimeTrigger CertificateLifetimeTrigger `json:"lifetimeTrigger"`
	Locator         ResourceLocator            `json:"locator"`
	Metadata        map[string]interface{}     `json:"metadata,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string `json:"subjectCommonName"`

	// Updated Time when the resoruce was last updated
	Updated          *time.Time                      `json:"updated,omitempty"`
	UpdatedBy        *string                         `json:"updatedBy,omitempty"`
	Usages           []externalRef0.CertificateUsage `json:"usages"`
	ValidityInMonths int32                           `json:"validity_months"`
}

// CertificateTemplateFields Certificate fields, may accept template substitutions
type CertificateTemplateFields struct {
	IssuerTemplate externalRef0.ResourceLocator `json:"issuerTemplate"`

	// KeyProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	KeyProperties    externalRef0.JwkProperties      `json:"keyProperties"`
	KeyStorePath     *string                         `json:"keyStorePath,omitempty"`
	LifetimeTrigger  CertificateLifetimeTrigger      `json:"lifetimeTrigger"`
	Usages           []externalRef0.CertificateUsage `json:"usages"`
	ValidityInMonths int32                           `json:"validity_months"`
}

// CertificateTemplateParameters Certificate fields, may accept template substitutions
type CertificateTemplateParameters struct {
	IssuerTemplate *externalRef0.ResourceLocator `json:"issuerTemplate,omitempty"`
	KeyExportable  *bool                         `json:"keyExportable,omitempty"`

	// KeyProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	KeyProperties   *externalRef0.JwkProperties `json:"keyProperties,omitempty"`
	KeyStorePath    *string                     `json:"keyStorePath,omitempty"`
	LifetimeTrigger *CertificateLifetimeTrigger `json:"lifetimeTrigger,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string                          `json:"subjectCommonName"`
	Usages            []externalRef0.CertificateUsage `json:"usages"`
	ValidityInMonths  *int32                          `json:"validity_months,omitempty"`
}

// CertificateTemplateRef defines model for CertificateTemplateRef.
type CertificateTemplateRef struct {
	// Deleted Time when the deleted was deleted
	Deleted  *time.Time                   `json:"deleted,omitempty"`
	Id       externalRef0.Identifier      `json:"id"`
	Locator  externalRef0.ResourceLocator `json:"locator"`
	Metadata map[string]interface{}       `json:"metadata,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string `json:"subjectCommonName"`

	// Updated Time when the resoruce was last updated
	Updated   *time.Time `json:"updated,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
}

// CertificateTemplateRefFields defines model for CertificateTemplateRefFields.
type CertificateTemplateRefFields struct {
	// SubjectCommonName Common name
	SubjectCommonName string `json:"subjectCommonName"`
}

// CreateManagedApplicationProfileRequest defines model for CreateManagedApplicationProfileRequest.
type CreateManagedApplicationProfileRequest struct {
	Name string                   `json:"name"`
	Type CreateProfileRequestType `json:"type"`
}

// CreateProfileRequest defines model for CreateProfileRequest.
type CreateProfileRequest struct {
	union json.RawMessage
}

// CreateProfileRequestType defines model for CreateProfileRequestType.
type CreateProfileRequestType string

// IncludeCertificate defines model for IncludeCertificate.
type IncludeCertificate string

// KeyVaultRoleAssignment defines model for KeyVaultRoleAssignment.
type KeyVaultRoleAssignment struct {
	Id               *string `json:"id,omitempty"`
	Name             *string `json:"name,omitempty"`
	PrincipalId      *string `json:"principalId,omitempty"`
	RoleDefinitionId *string `json:"roleDefinitionId,omitempty"`
}

// Profile defines model for Profile.
type Profile = ProfileRef

// ProfileRef defines model for ProfileRef.
type ProfileRef struct {
	// Deleted Time when the deleted was deleted
	Deleted *time.Time `json:"deleted,omitempty"`

	// DisplayName Display name of the resource
	DisplayName string                  `json:"displayName"`
	Id          externalRef0.Identifier `json:"id"`

	// IsAppManaged Whether the resource is managed by the application
	IsAppManaged *bool                        `json:"isAppManaged,omitempty"`
	Locator      externalRef0.ResourceLocator `json:"locator"`
	Metadata     map[string]interface{}       `json:"metadata,omitempty"`
	Type         externalRef0.NamespaceKind   `json:"type"`

	// Updated Time when the resoruce was last updated
	Updated   *time.Time `json:"updated,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
}

// ProfileRefFields defines model for ProfileRefFields.
type ProfileRefFields struct {
	// DisplayName Display name of the resource
	DisplayName string `json:"displayName"`

	// IsAppManaged Whether the resource is managed by the application
	IsAppManaged *bool                      `json:"isAppManaged,omitempty"`
	Type         externalRef0.NamespaceKind `json:"type"`
}

// RequestDiagnostics defines model for RequestDiagnostics.
type RequestDiagnostics struct {
	RequestHeaders []RequestHeaderEntry              `json:"requestHeaders"`
	ServiceRuntime RequestDiagnostics_ServiceRuntime `json:"serviceRuntime"`
}

// RequestDiagnostics_ServiceRuntime defines model for RequestDiagnostics.ServiceRuntime.
type RequestDiagnostics_ServiceRuntime struct {
	GoVersion            string            `json:"goVersion"`
	AdditionalProperties map[string]string `json:"-"`
}

// RequestHeaderEntry defines model for RequestHeaderEntry.
type RequestHeaderEntry struct {
	Key   string   `json:"key"`
	Value []string `json:"value"`
}

// ServiceConfig defines model for ServiceConfig.
type ServiceConfig struct {
	AppRoleIds struct {
		AgentActiveHost openapi_types.UUID `json:"Agent.ActiveHost"`
		AppAdmin        openapi_types.UUID `json:"App.Admin"`
	} `json:"appRoleIds"`
	AzureContainerRegistry struct {
		ArmResourceId string `json:"armResourceId"`
		LoginServer   string `json:"loginServer"`
		Name          string `json:"name"`
	} `json:"azureContainerRegistry"`
	AzureSubscriptionId string `json:"azureSubscriptionId"`

	// Deleted Time when the deleted was deleted
	Deleted               *time.Time                   `json:"deleted,omitempty"`
	Id                    externalRef0.Identifier      `json:"id"`
	KeyvaultArmResourceId string                       `json:"keyvaultArmResourceId"`
	Locator               externalRef0.ResourceLocator `json:"locator"`
	Metadata              map[string]interface{}       `json:"metadata,omitempty"`

	// Updated Time when the resoruce was last updated
	Updated   *time.Time `json:"updated,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
}

// ServiceConfigFields defines model for ServiceConfigFields.
type ServiceConfigFields struct {
	AppRoleIds struct {
		AgentActiveHost openapi_types.UUID `json:"Agent.ActiveHost"`
		AppAdmin        openapi_types.UUID `json:"App.Admin"`
	} `json:"appRoleIds"`
	AzureContainerRegistry struct {
		ArmResourceId string `json:"armResourceId"`
		LoginServer   string `json:"loginServer"`
		Name          string `json:"name"`
	} `json:"azureContainerRegistry"`
	AzureSubscriptionId   string `json:"azureSubscriptionId"`
	KeyvaultArmResourceId string `json:"keyvaultArmResourceId"`
}

// CertificateIdPathParameter defines model for CertificateIdPathParameter.
type CertificateIdPathParameter = externalRef0.Identifier

// CertificateTemplateIdentifierParameter defines model for CertificateTemplateIdentifierParameter.
type CertificateTemplateIdentifierParameter = externalRef0.Identifier

// IncludeCertificateParameter defines model for IncludeCertificateParameter.
type IncludeCertificateParameter = IncludeCertificate

// NamespaceIdParameter defines model for NamespaceIdParameter.
type NamespaceIdParameter = externalRef0.Identifier

// NamespaceKindParameter defines model for NamespaceKindParameter.
type NamespaceKindParameter = externalRef0.NamespaceKind

// AgentConfigurationResponse defines model for AgentConfigurationResponse.
type AgentConfigurationResponse = externalRef0.AgentConfiguration

// CertificateResponse defines model for CertificateResponse.
type CertificateResponse = externalRef0.CertificateInfo

// AgentCheckInParams defines parameters for AgentCheckIn.
type AgentCheckInParams struct {
	HostRoles *[]AgentHostRole `form:"hostRoles,omitempty" json:"hostRoles,omitempty"`
}

// AgentGetConfigurationParams defines parameters for AgentGetConfiguration.
type AgentGetConfigurationParams struct {
	RefreshToken               *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty"`
	XSmallkmsIfVersionNotMatch *string `json:"X-Smallkms-If-Version-Not-Match,omitempty"`
}

// PatchServiceConfigJSONBody defines parameters for PatchServiceConfig.
type PatchServiceConfigJSONBody = interface{}

// PatchServiceConfigParamsConfigPath defines parameters for PatchServiceConfig.
type PatchServiceConfigParamsConfigPath string

// IssueCertificateFromTemplateParams defines parameters for IssueCertificateFromTemplate.
type IssueCertificateFromTemplateParams struct {
	IncludeCertificate *IncludeCertificate                     `form:"includeCertificate,omitempty" json:"includeCertificate,omitempty"`
	Force              *bool                                   `form:"force,omitempty" json:"force,omitempty"`
	Tags               *[]externalRef0.TemplatedCertificateTag `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetCertificateParams defines parameters for GetCertificate.
type GetCertificateParams struct {
	IncludeCertificate    *IncludeCertificateParameter `form:"includeCertificate,omitempty" json:"includeCertificate,omitempty"`
	TemplateId            *externalRef0.Identifier     `form:"templateId,omitempty" json:"templateId,omitempty"`
	TemplateNamespaceKind *externalRef0.NamespaceKind  `form:"templateNamespaceKind,omitempty" json:"templateNamespaceKind,omitempty"`
	TemplateNamespaceId   *externalRef0.Identifier     `form:"templateNamespaceId,omitempty" json:"templateNamespaceId,omitempty"`
}

// CreateProfileJSONRequestBody defines body for CreateProfile for application/json ContentType.
type CreateProfileJSONRequestBody = CreateProfileRequest

// PatchServiceConfigJSONRequestBody defines body for PatchServiceConfig for application/json ContentType.
type PatchServiceConfigJSONRequestBody = PatchServiceConfigJSONBody

// PutAgentConfigurationJSONRequestBody defines body for PutAgentConfiguration for application/json ContentType.
type PutAgentConfigurationJSONRequestBody = externalRef0.AgentConfigurationParameters

// PutCertificateTemplateJSONRequestBody defines body for PutCertificateTemplate for application/json ContentType.
type PutCertificateTemplateJSONRequestBody = CertificateTemplateParameters

// Getter for additional properties for RequestDiagnostics_ServiceRuntime. Returns the specified
// element and whether it was found
func (a RequestDiagnostics_ServiceRuntime) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestDiagnostics_ServiceRuntime
func (a *RequestDiagnostics_ServiceRuntime) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestDiagnostics_ServiceRuntime to handle AdditionalProperties
func (a *RequestDiagnostics_ServiceRuntime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["goVersion"]; found {
		err = json.Unmarshal(raw, &a.GoVersion)
		if err != nil {
			return fmt.Errorf("error reading 'goVersion': %w", err)
		}
		delete(object, "goVersion")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestDiagnostics_ServiceRuntime to handle AdditionalProperties
func (a RequestDiagnostics_ServiceRuntime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["goVersion"], err = json.Marshal(a.GoVersion)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'goVersion': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsCreateManagedApplicationProfileRequest returns the union data inside the CreateProfileRequest as a CreateManagedApplicationProfileRequest
func (t CreateProfileRequest) AsCreateManagedApplicationProfileRequest() (CreateManagedApplicationProfileRequest, error) {
	var body CreateManagedApplicationProfileRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateManagedApplicationProfileRequest overwrites any union data inside the CreateProfileRequest as the provided CreateManagedApplicationProfileRequest
func (t *CreateProfileRequest) FromCreateManagedApplicationProfileRequest(v CreateManagedApplicationProfileRequest) error {
	v.Type = "managed-application"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateManagedApplicationProfileRequest performs a merge with any union data inside the CreateProfileRequest, using the provided CreateManagedApplicationProfileRequest
func (t *CreateProfileRequest) MergeCreateManagedApplicationProfileRequest(v CreateManagedApplicationProfileRequest) error {
	v.Type = "managed-application"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateProfileRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateProfileRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "managed-application":
		return t.AsCreateManagedApplicationProfileRequest()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateProfileRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateProfileRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
