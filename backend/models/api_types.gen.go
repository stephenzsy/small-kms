// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package models

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
	kmscommon "github.com/stephenzsy/small-kms/backend/common"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CertificateUsage.
const (
	CertUsageCA         CertificateUsage = "ca"
	CertUsageCARoot     CertificateUsage = "caRoot"
	CertUsageClientAuth CertificateUsage = "clientAuth"
	CertUsageServerAuth CertificateUsage = "serverAuth"
)

// Defines values for IncludeCertificate.
const (
	IncludeJWK IncludeCertificate = "jwk"
	IncludePEM IncludeCertificate = "pem"
)

// Defines values for JwkAlg.
const (
	AlgES256 JwkAlg = "ES256"
	AlgES384 JwkAlg = "ES384"
	AlgRS256 JwkAlg = "RS256"
	AlgRS384 JwkAlg = "RS384"
	AlgRS512 JwkAlg = "RS512"
)

// Defines values for KeyOp.
const (
	KeyOpDecrypt   KeyOp = "decrypt"
	KeyOpEncrypt   KeyOp = "encrypt"
	KeyOpSign      KeyOp = "sign"
	KeyOpUnwrapKey KeyOp = "unwrapKey"
	KeyOpVerify    KeyOp = "verify"
	KeyOpWrapKey   KeyOp = "wrapKey"
)

// Defines values for JwtCrv.
const (
	CurveNameP256 JwtCrv = "P-256"
	CurveNameP384 JwtCrv = "P-384"
)

// Defines values for JwtKty.
const (
	KeyTypeEC  JwtKty = "EC"
	KeyTypeRSA JwtKty = "RSA"
)

// Defines values for ProfileType.
const (
	ProfileTypeApplication      ProfileType = "application"
	ProfileTypeDevice           ProfileType = "device"
	ProfileTypeGroup            ProfileType = "group"
	ProfileTypeIntermediateCA   ProfileType = "intermediate-ca"
	ProfileTypeRootCA           ProfileType = "root-ca"
	ProfileTypeServicePrincipal ProfileType = "service-principal"
	ProfileTypeUser             ProfileType = "user"
)

// CertificateId defines model for CertificateId.
type CertificateId = openapi_types.UUID

// CertificateInfo defines model for CertificateInfo.
type CertificateInfo struct {
	Id                  CertificateId     `json:"id"`
	Issuer              CertificateIssuer `json:"issuer"`
	IssuerCertificateId CertificateId     `json:"issuerCertificateId"`

	// Jwk Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	Jwk      *JwkProperties   `json:"jwk,omitempty"`
	Metadata ResourceMetadata `json:"metadata"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time `json:"notAfter"`

	// NotBefore Expiration date of the certificate
	NotBefore time.Time `json:"notBefore"`
	Pem       *string   `json:"pem,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string `json:"subjectCommonName"`

	// TemplateId Identifier of the resource
	TemplateId Identifier `json:"templateId"`

	// Thumbprint X.509 certificate SHA-1 thumbprint
	CertificateThumbprint string             `json:"thumbprint"`
	Usages                []CertificateUsage `json:"usages"`
}

// CertificateIssuer defines model for CertificateIssuer.
type CertificateIssuer struct {
	// ProfileId Identifier of the resource
	ProfileId   Identifier  `json:"profileId"`
	ProfileType ProfileType `json:"profileType"`

	// TemplateId Identifier of the resource
	TemplateId *Identifier `json:"templateId,omitempty"`
}

// CertificateLifetimeTrigger defines model for CertificateLifetimeTrigger.
type CertificateLifetimeTrigger struct {
	DaysBeforeExpiry   *int32 `json:"days_before_expiry,omitempty"`
	LifetimePercentage *int32 `json:"lifetime_percentage,omitempty"`
}

// CertificateRef defines model for CertificateRef.
type CertificateRef struct {
	Id       CertificateId    `json:"id"`
	Metadata ResourceMetadata `json:"metadata"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time `json:"notAfter"`

	// SubjectCommonName Common name
	SubjectCommonName string `json:"subjectCommonName"`

	// TemplateId Identifier of the resource
	TemplateId Identifier `json:"templateId"`

	// Thumbprint X.509 certificate SHA-1 thumbprint
	CertificateThumbprint string `json:"thumbprint"`
}

// CertificateTemplate defines model for CertificateTemplate.
type CertificateTemplate struct {
	// Id Identifier of the resource
	Id     Identifier         `json:"id"`
	Issuer *CertificateIssuer `json:"issuer,omitempty"`

	// KeyProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	KeyProperties   *JwkProperties              `json:"keyProperties,omitempty"`
	KeyStorePath    *string                     `json:"keyStorePath,omitempty"`
	LifetimeTrigger *CertificateLifetimeTrigger `json:"lifetimeTrigger,omitempty"`
	Metadata        *ResourceMetadata           `json:"metadata,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string             `json:"subjectCommonName"`
	Usages            []CertificateUsage `json:"usages"`
	ValidityInMonths  *int32             `json:"validity_months,omitempty"`
}

// CertificateTemplateParameters Certificate fields, may accept template substitutions
type CertificateTemplateParameters struct {
	Issuer *CertificateIssuer `json:"issuer,omitempty"`

	// KeyProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	KeyProperties   *JwkProperties              `json:"keyProperties,omitempty"`
	KeyStorePath    *string                     `json:"keyStorePath,omitempty"`
	LifetimeTrigger *CertificateLifetimeTrigger `json:"lifetimeTrigger,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string             `json:"subjectCommonName"`
	Usages            []CertificateUsage `json:"usages"`
	ValidityInMonths  *int32             `json:"validity_months,omitempty"`
}

// CertificateTemplateRef defines model for CertificateTemplateRef.
type CertificateTemplateRef struct {
	// Id Identifier of the resource
	Id       Identifier        `json:"id"`
	Metadata *ResourceMetadata `json:"metadata,omitempty"`

	// SubjectCommonName Common name
	SubjectCommonName string `json:"subjectCommonName"`
}

// CertificateUsage defines model for CertificateUsage.
type CertificateUsage string

// Identifier Identifier of the resource
type Identifier = kmscommon.Identifier

// IncludeCertificate defines model for IncludeCertificate.
type IncludeCertificate string

// JwkAlg defines model for JwkAlg.
type JwkAlg string

// KeyOp defines model for JwkKeyOperation.
type KeyOp string

// JwkProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
type JwkProperties struct {
	Alg *JwkAlg `json:"alg,omitempty"`
	Crv *JwtCrv `json:"crv,omitempty"`

	// E RSA exponent
	E     *string `json:"e,omitempty"`
	KeyOp *KeyOp  `json:"key_ops,omitempty"`

	// KeySize RSA key size
	KeySize *int `json:"key_size,omitempty"`

	// Kid Key ID
	KeyID *string `json:"kid,omitempty"`
	Kty   JwtKty  `json:"kty"`

	// N RSA modulus
	N *string `json:"n,omitempty"`

	// X EC x coordinate
	X *string `json:"x,omitempty"`

	// X5c X.509 certificate chain
	CertificateChain []string `json:"x5c,omitempty"`

	// X5t X.509 certificate SHA-1 thumbprint
	CertificateThumbprint *string `json:"x5t,omitempty"`

	// X5tS256 X.509 certificate SHA-256 thumbprint
	CertificateThumbprintSHA256 *string `json:"x5t#S256,omitempty"`

	// X5u X.509 certificate URL
	CertificateURL *string `json:"x5u,omitempty"`

	// Y EC y coordinate
	Y *string `json:"y,omitempty"`
}

// JwtCrv defines model for JwtCrv.
type JwtCrv string

// JwtKty defines model for JwtKty.
type JwtKty string

// Profile defines model for Profile.
type Profile = ProfileRef

// ProfileRef defines model for ProfileRef.
type ProfileRef struct {
	// DisplayName Display name of the resource
	DisplayName string `json:"displayName"`

	// Id Identifier of the resource
	Id       Identifier        `json:"id"`
	Metadata *ResourceMetadata `json:"metadata,omitempty"`
	Type     ProfileType       `json:"type"`
}

// ProfileType defines model for ProfileType.
type ProfileType string

// ResourceMetadata defines model for ResourceMetadata.
type ResourceMetadata struct {
	// Deleted Time when the deleted was deleted
	Deleted *time.Time `json:"deleted,omitempty"`

	// Updated Time when the resoruce was last updated
	Updated              *time.Time        `json:"updated,omitempty"`
	UpdatedBy            *string           `json:"updatedBy,omitempty"`
	AdditionalProperties map[string]string `json:"-"`
}

// CertificateTemplateIdentifierParameter Identifier of the resource
type CertificateTemplateIdentifierParameter = Identifier

// IncludeCertificateParameter defines model for IncludeCertificateParameter.
type IncludeCertificateParameter = IncludeCertificate

// ProfileIdentifierParameter Identifier of the resource
type ProfileIdentifierParameter = Identifier

// ProfileTypeParameter defines model for ProfileTypeParameter.
type ProfileTypeParameter = ProfileType

// CertificateResponse defines model for CertificateResponse.
type CertificateResponse = CertificateInfo

// IssueCertificateFromTemplateParams defines parameters for IssueCertificateFromTemplate.
type IssueCertificateFromTemplateParams struct {
	IncludeCertificate *IncludeCertificateParameter `form:"includeCertificate,omitempty" json:"includeCertificate,omitempty"`
}

// PutCertificateTemplateJSONRequestBody defines body for PutCertificateTemplate for application/json ContentType.
type PutCertificateTemplateJSONRequestBody = CertificateTemplateParameters

// Getter for additional properties for ResourceMetadata. Returns the specified
// element and whether it was found
func (a ResourceMetadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceMetadata
func (a *ResourceMetadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceMetadata to handle AdditionalProperties
func (a *ResourceMetadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["deleted"]; found {
		err = json.Unmarshal(raw, &a.Deleted)
		if err != nil {
			return fmt.Errorf("error reading 'deleted': %w", err)
		}
		delete(object, "deleted")
	}

	if raw, found := object["updated"]; found {
		err = json.Unmarshal(raw, &a.Updated)
		if err != nil {
			return fmt.Errorf("error reading 'updated': %w", err)
		}
		delete(object, "updated")
	}

	if raw, found := object["updatedBy"]; found {
		err = json.Unmarshal(raw, &a.UpdatedBy)
		if err != nil {
			return fmt.Errorf("error reading 'updatedBy': %w", err)
		}
		delete(object, "updatedBy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceMetadata to handle AdditionalProperties
func (a ResourceMetadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Deleted != nil {
		object["deleted"], err = json.Marshal(a.Deleted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deleted': %w", err)
		}
	}

	if a.Updated != nil {
		object["updated"], err = json.Marshal(a.Updated)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated': %w", err)
		}
	}

	if a.UpdatedBy != nil {
		object["updatedBy"], err = json.Marshal(a.UpdatedBy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updatedBy': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
