// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package models

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List profiles by type
	// (GET /v3/{profileType})
	ListProfiles(c *gin.Context, profileType ProfileTypeParameter)
	// Get namespace info with ms graph
	// (GET /v3/{profileType}/{profileId})
	GetProfile(c *gin.Context, profileType ProfileTypeParameter, profileId ProfileIdentifierParameter)
	// Sync namespace info with ms graph
	// (POST /v3/{profileType}/{profileId})
	SyncProfile(c *gin.Context, profileType ProfileTypeParameter, profileId ProfileIdentifierParameter)
	// List certificate templates
	// (GET /v3/{profileType}/{profileId}/certificate-template)
	ListCertificateTemplates(c *gin.Context, profileType ProfileTypeParameter, profileId ProfileIdentifierParameter)
	// Get certificate template
	// (GET /v3/{profileType}/{profileId}/certificate-template/{templateId})
	GetCertificateTemplate(c *gin.Context, profileType ProfileTypeParameter, profileId ProfileIdentifierParameter, templateId CertificateTemplateIdentifierParameter)
	// Put certificate template
	// (PUT /v3/{profileType}/{profileId}/certificate-template/{templateId})
	PutCertificateTemplate(c *gin.Context, profileType ProfileTypeParameter, profileId ProfileIdentifierParameter, templateId CertificateTemplateIdentifierParameter)
	// Create certificate
	// (POST /v3/{profileType}/{profileId}/certificate-template/{templateId}/certificate)
	IssueCertificateFromTemplate(c *gin.Context, profileType ProfileTypeParameter, profileId ProfileIdentifierParameter, templateId CertificateTemplateIdentifierParameter, params IssueCertificateFromTemplateParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListProfiles operation middleware
func (siw *ServerInterfaceWrapper) ListProfiles(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProfiles(c, profileType)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "profileId" -------------
	var profileId ProfileIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "profileId", c.Param("profileId"), &profileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfile(c, profileType, profileId)
}

// SyncProfile operation middleware
func (siw *ServerInterfaceWrapper) SyncProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "profileId" -------------
	var profileId ProfileIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "profileId", c.Param("profileId"), &profileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SyncProfile(c, profileType, profileId)
}

// ListCertificateTemplates operation middleware
func (siw *ServerInterfaceWrapper) ListCertificateTemplates(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "profileId" -------------
	var profileId ProfileIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "profileId", c.Param("profileId"), &profileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCertificateTemplates(c, profileType, profileId)
}

// GetCertificateTemplate operation middleware
func (siw *ServerInterfaceWrapper) GetCertificateTemplate(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "profileId" -------------
	var profileId ProfileIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "profileId", c.Param("profileId"), &profileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "templateId" -------------
	var templateId CertificateTemplateIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "templateId", c.Param("templateId"), &templateId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCertificateTemplate(c, profileType, profileId, templateId)
}

// PutCertificateTemplate operation middleware
func (siw *ServerInterfaceWrapper) PutCertificateTemplate(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "profileId" -------------
	var profileId ProfileIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "profileId", c.Param("profileId"), &profileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "templateId" -------------
	var templateId CertificateTemplateIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "templateId", c.Param("templateId"), &templateId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCertificateTemplate(c, profileType, profileId, templateId)
}

// IssueCertificateFromTemplate operation middleware
func (siw *ServerInterfaceWrapper) IssueCertificateFromTemplate(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileType" -------------
	var profileType ProfileTypeParameter

	err = runtime.BindStyledParameter("simple", false, "profileType", c.Param("profileType"), &profileType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "profileId" -------------
	var profileId ProfileIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "profileId", c.Param("profileId"), &profileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "templateId" -------------
	var templateId CertificateTemplateIdentifierParameter

	err = runtime.BindStyledParameter("simple", false, "templateId", c.Param("templateId"), &templateId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params IssueCertificateFromTemplateParams

	// ------------- Optional query parameter "includeCertificate" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeCertificate", c.Request.URL.Query(), &params.IncludeCertificate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter includeCertificate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IssueCertificateFromTemplate(c, profileType, profileId, templateId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v3/:profileType", wrapper.ListProfiles)
	router.GET(options.BaseURL+"/v3/:profileType/:profileId", wrapper.GetProfile)
	router.POST(options.BaseURL+"/v3/:profileType/:profileId", wrapper.SyncProfile)
	router.GET(options.BaseURL+"/v3/:profileType/:profileId/certificate-template", wrapper.ListCertificateTemplates)
	router.GET(options.BaseURL+"/v3/:profileType/:profileId/certificate-template/:templateId", wrapper.GetCertificateTemplate)
	router.PUT(options.BaseURL+"/v3/:profileType/:profileId/certificate-template/:templateId", wrapper.PutCertificateTemplate)
	router.POST(options.BaseURL+"/v3/:profileType/:profileId/certificate-template/:templateId/certificate", wrapper.IssueCertificateFromTemplate)
}
