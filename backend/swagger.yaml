openapi: 3.0.3
info:
  title: Small KMS Admin API
  version: 0.1.0
servers:
  - url: http://localhost:9000
    description: Local server
paths:
  /v1/{namespaceId}/certificates:
    get:
      tags:
        - certs
      summary: List certificates
      operationId: ListCertificatesV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: A JSON array of Certificate Refs
          content:
            application/json:
              schema:
                title: ListCertificatesResponse
                type: array
                items:
                  $ref: "#/components/schemas/CertificateRef"
  /v1/{namespaceId}/certificates/{id}:
    get:
      tags:
        - certs
      summary: Get certificate
      operationId: GetCertificateV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
        - in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - application/x-pem-file
              - application/x-x509-ca-cert
            x-enum-varnames:
              - Accept_Json
              - Accept_Pem
              - Accept_X509CaCert
      responses:
        "200":
          description: Get certificate response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateRef"
            application/x-pem-file:
              schema:
                type: string
                format: binary
            application/x-x509-ca-cert:
              schema:
                type: string
                format: binary
  /v1/{namespaceId}/policies/{policyId}:
    put:
      tags:
        - policy
      summary: Put Policy
      operationId: PutPolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyParameters"
        required: true
      responses:
        "200":
          description: Certificate policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
    get:
      tags:
        - policy
      summary: Get Certificate Policy
      operationId: GetPolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Certificate policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
  /v1/{namespaceId}/policies/{policyId}/apply:
    post:
      tags:
        - policy
      summary: Apply policy
      operationId: ApplyPolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyPolicyRequest"
        required: false
      responses:
        "200":
          description: Create certificate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyState"
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    ApplyPolicyRequest:
      type: object
      properties:
        checkConsistency:
          description: Check consistency of the policy
          type: boolean
        forceRenewCertificate:
          description: Force certificate renewal
          type: boolean
    CertificateSubject:
      type: object
      properties:
        cn:
          description: Common name
          type: string
          x-go-name: CN
        ou:
          description: Organizational unit
          type: string
          x-go-name: OU
        o:
          description: Organization
          type: string
        c:
          description: Country or region
          type: string
      required:
        - cn
    CreateCertificateOptions:
      type: object
      properties:
        newKeyName:
          description: Create new key name instead of a new version if exists
          type: boolean
        keepKeyVersion:
          description: Keep using the same key version if exists
          type: boolean
    KeyProperties:
      type: object
      properties:
        kty:
          type: string
          enum:
            - RSA
            - EC
          x-enum-varnames:
            - Kty_RSA
            - Kty_EC
          x-go-name: KeyType
        key_size:
          type: integer
          format: int32
          enum:
            - 2048
            - 3072
            - 4096
          x-enum-varnames:
            - KeySize_2048
            - KeySize_3072
            - KeySize_4096
          x-go-name: KeySize
        crv:
          type: string
          enum:
            - P-256
            - P-384
          x-enum-varnames:
            - EcCurve_P256
            - EcCurve_P384
          x-go-name: CurveName
        reuse_key:
          description: Keep using the same key version if exists
          type: boolean
          x-go-name: ReuseKey
      required:
        - kty
    CertificateUsage:
      type: string
      enum:
        - root-ca
        - intermediate-ca
        - server-and-client
        - server-only
        - client-only
      x-enum-varnames:
        - Usage_RootCA
        - Usage_IntCA
        - Usage_ServerAndClient
        - Usage_ServerOnly
        - Usage_ClientOnly
    CertificateRef:
      type: object
      properties:
        namespaceId:
          description: Unique ID of the namespace
          type: string
          format: uuid
          x-go-name: NamespaceID
        id:
          description: Unique ID of the certificate, also the serial number of the certificate
          type: string
          format: uuid
          x-go-name: ID
        name:
          description: Name of the certificate, also the common name (CN) of the certificate
          type: string
        usage:
          $ref: "#/components/schemas/CertificateUsage"
        notAfter:
          description: Expiration date of the certificate
          type: string
          format: date-time
        issuerNamespace:
          description: Issuer of the certificate
          type: string
          format: uuid
        issuer:
          description: Issuer of the certificate
          type: string
          format: uuid
        createdBy:
          description: Unique ID of the user who created the certificate
          type: string
      required:
        - namespaceId
        - id
        - name
        - usage
        - notAfter
        - issuerNamespace
        - issuer
        - createdBy
    PolicyType:
      type: string
      enum:
        - certIssue
        - certRequest
      x-enum-varnames:
        - PolicyType_CertIssue
        - PolicyType_CertRequest
    ResourceRef:
      type: object
      properties:
        namespaceId:
          description: Unique ID of the namespace
          type: string
          format: uuid
          x-go-name: NamespaceID
        id:
          type: string
          format: uuid
          x-go-name: ID
        updatedBy:
          description: Unique ID of the user who created the policy
          type: string
        updated:
          description: Time when the policy was last updated
          type: string
          format: date-time
      required:
        - namespaceId
        - id
        - updatedBy
        - updated
    PolicyStateCertRequest:
      type: object
      properties:
        lastCertId:
          type: string
          format: uuid
          x-go-name: LastCertID
        lastCertIssued:
          type: string
          format: date-time
        lastCertExpires:
          type: string
          format: date-time
        lastAction:
          type: string
      required:
        - lastCertId
        - lastCertIssued
        - lastCertExpires
        - lastAction
    PolicyState:
      allOf:
        - $ref: "#/components/schemas/ResourceRef"
        - type: object
          properties:
            policyType:
              $ref: "#/components/schemas/PolicyType"
            status:
              type: string
            message:
              type: string
            certRequest:
              $ref: "#/components/schemas/PolicyStateCertRequest"
          required:
            - policyType
            - string
            - message
    CertificateIssurancePolicyParameters:
      type: object
      properties:
        issuerId:
          description: ID of the current issuer certificate
          type: string
          format: uuid
          x-go-name: IssuerID
        allowedKeyProperties:
          type: array
          items:
            $ref: "#/components/schemas/KeyProperties"
        allowedUsages:
          type: array
          items:
            $ref: "#/components/schemas/CertificateUsage"
        allowedNamespaceIds:
          type: array
          items:
            type: string
            format: uuid
          x-go-name: AllowedNamespaceIDs
      required:
        - issuerId
        - maxValidity
        - allowedKeyTypes
        - allowedUsages
        - allowedNamespaceIds
    CertificateLifetimeTrigger:
      type: object
      properties:
        days_before_expiry:
          x-go-name: DaysBeforeExpiry
          type: integer
          format: int32
        lifetime_percentage:
          x-go-name: LifetimePercentage
          type: integer
          format: int32
    CertificateSubjectAlternativeNames:
      type: object
      properties:
        dns_names:
          x-go-name: DNSNames
          type: array
          items:
            type: string
        emails:
          x-go-name: Emails
          type: array
          items:
            type: string
        upns:
          x-go-name: UserPrincipalNames
          type: array
          items:
            type: string
    CertificateRequestPolicyParameters:
      type: object
      properties:
        issuerNamespaceId:
          description: ID of the issuer namespace
          type: string
          format: uuid
          x-go-name: IssuerNamespaceID
        validity_months:
          x-go-name: ValidityInMonths
          type: integer
          format: int32
        keyStorePath:
          type: string
        keyProperties:
          $ref: "#/components/schemas/KeyProperties"
        subject:
          $ref: "#/components/schemas/CertificateSubject"
        subjectAlternativeNames:
          $ref: "#/components/schemas/CertificateSubjectAlternativeNames"
        usage:
          $ref: "#/components/schemas/CertificateUsage"
        lifetimeTrigger:
          $ref: "#/components/schemas/CertificateLifetimeTrigger"
      required:
        - issuerNamespaceId
        - subject
        - usage
        - keyStorePath
    PolicyParameters:
      type: object
      properties:
        policyType:
          $ref: "#/components/schemas/PolicyType"
        certIssue:
          $ref: "#/components/schemas/CertificateIssurancePolicyParameters"
        certRequest:
          $ref: "#/components/schemas/CertificateRequestPolicyParameters"
      required:
        - policyType
    Policy:
      allOf:
        - $ref: "#/components/schemas/ResourceRef"
        - $ref: "#/components/schemas/PolicyParameters"
