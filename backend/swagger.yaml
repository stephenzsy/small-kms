openapi: 3.0.3
info:
  title: Small KMS Admin API
  version: 0.1.0
servers:
  - url: http://localhost:9000
    description: Local server
paths:
  /v2/device/{namespaceId}/link-service-principal:
    parameters:      
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      summary: Link device service principal
      operationId: GetDeviceServicePrincipalLinkV2
      parameters:
        - in: query
          name: "apply"
          schema:
            type: boolean
      responses:
        200:
          description: Link device service principal response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePrincipalLinkedDevice"
  /v2/{namespaceType}:
    parameters:
      - $ref: "#/components/parameters/NamespaceTypeParameter"    
    get:
      tags:
        - admin
      summary: List namespaces by type
      operationId: ListNamespacesByTypeV2
      responses:
        200:
          $ref: "#/components/responses/RefListResponse"
  /v2/{namespaceType}/{namespaceId}/certificate-templates:
    parameters:
      - $ref: "#/components/parameters/NamespaceTypeParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    get:
      tags:
        - admin
      summary: List certificate templates
      operationId: ListCertificateTemplatesV2
      responses:
        200:
          $ref: "#/components/responses/RefListResponse"
  /v2/{namespaceType}/{namespaceId}/certificate-templates/{templateId}:
    parameters:
      - $ref: "#/components/parameters/NamespaceTypeParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/TemplateIdParameter"
    get:
      tags:
        - admin
      summary: Get certificate template
      operationId: GetCertificateTemplateV2
      responses:
        200:
          description: Certificate template response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateTemplate"
    put:
      tags:
        - admin
      summary: Put certificate template
      operationId: PutCertificateTemplateV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateTemplateParameters"
        required: true
      responses:
        201:
          description: Certificate template response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateTemplate"
  /v2/{namespaceType}/{namespaceId}/certificate-templates/{templateId}/certificates:
    parameters:
      - $ref: "#/components/parameters/NamespaceTypeParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/TemplateIdParameter"
    get:
      tags:
        - admin
      summary: List certificates
      operationId: ListCertificatesV2
      responses:
        200:
          $ref: "#/components/responses/RefListResponse"
  /v2/{namespaceType}/{namespaceId}/certificate-templates/{templateId}/certificates/{certId}:
    parameters:
      - $ref: "#/components/parameters/NamespaceTypeParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
      - $ref: "#/components/parameters/TemplateIdParameter"
      - $ref: "#/components/parameters/CertIdParameter"
      - $ref: "#/components/parameters/IncludeCertificateParameter"
    get:
      tags:
        - admin
      summary: Get certificate
      operationId: GetCertificateV2
      responses:
        200:
          description: CertificateResponse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateInfo"
    post:
      tags:
        - admin
      summary: Create certificate
      operationId: CreateCertificateV2
      responses:
        200:
          description: CertificateResponse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateInfo"
  /v2/{namespaceType}/{namespaceId}/graph-sync:
    parameters:
      - $ref: "#/components/parameters/NamespaceTypeParameter"
      - $ref: "#/components/parameters/NamespaceIdParameter"
    post:
      tags:
        - directory
      summary: Sync namespace info with ms graph
      operationId: SyncNamespaceInfoV2
      responses:
        "200":
          description: register namespace profile response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceInfo"
  /v1/{namespaceId}/certificates/{id}:
    get:
      tags:
        - certs
      summary: Get certificate
      operationId: GetCertificateV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
        - in: query
          name: byType
          schema:
            $ref: "#/components/schemas/CertificateIdentifierType"
        - in: query
          name: format
          schema:
            type: string
            enum:
              - jwk
              - pem
            x-enum-varnames:
              - FormatJWK
              - FormatPEM
      responses:
        "200":
          description: Get certificate response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateRef"
  # /v1/{namespaceId}/hasPermission/{permissionKey}:
  #   parameters:
  #     - in: path
  #       description: AAD directory object ID
  #       name: namespaceId
  #       schema:
  #         type: string
  #         format: uuid
  #       required: true
  #     - in: path
  #       description: AAD directory object ID
  #       name: permissionKey
  #       schema:
  #         $ref: "#/components/schemas/NamespacePermissionKey"
  #       required: true
  #   get:
  #     tags:
  #       - directory
  #     summary: Has permission
  #     operationId: HasPermissionV1
  #     responses:
  #       "200":
  #         description: Permission response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/NamespaceRef"
  # /v1/{namespaceId}/permissions/{objectId}:
  #   parameters:
  #     - in: path
  #       description: AAD directory object ID
  #       name: namespaceId
  #       schema:
  #         type: string
  #         format: uuid
  #       required: true
  #     - in: path
  #       description: AAD directory object ID
  #       name: objectId
  #       schema:
  #         type: string
  #         format: uuid
  #       required: true
  #   put:
  #     tags:
  #       - directory
  #     summary: Put permissions
  #     operationId: PutPermissionsV1
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/NamespacePermissions"
  #       required: true
  #     responses:
  #       "200":
  #         description: Permission response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/NamespacePermissions"
  /v1/{namespaceId}/profile:
    parameters:
      - in: path
        description: AAD directory object ID
        name: namespaceId
        schema:
          type: string
          format: uuid
        required: true
    get:
      tags:
        - directory
      summary: Get namespace profile
      operationId: GetNamespaceProfileV1
      responses:
        "200":
          description: Get namespace resposne profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceProfile"
    post:
      tags:
        - directory
      summary: Register namespace
      operationId: RegisterNamespaceProfileV1
      responses:
        "200":
          description: register namespace profile response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceProfile"
  /v1/namespaces/{namespaceType}:
    get:
      tags:
        - directory
      summary: List namespaces
      operationId: ListNamespacesV1
      parameters:
        - in: path
          name: namespaceType
          schema:
            $ref: "#/components/schemas/NamespaceType"
          required: true
      responses:
        "200":
          description: List namespace response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NamespaceRef"
  # /v1/my/hasPermission/{permissionKey}:
  #   parameters:
  #     - in: path
  #       description: permission key
  #       name: permissionKey
  #       schema:
  #         $ref: "#/components/schemas/NamespacePermissionKey"
  #       required: true
  #   get:
  #     tags:
  #       - directory
  #     summary: My Has permission
  #     operationId: MyHasPermissionV1
  #     responses:
  #       "200":
  #         description: Permission response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/NamespaceRef"
  /v1/my/profiles:
    get:
      tags:
        - directory
      summary: Get my profiles
      operationId: GetMyProfilesV1
      responses:
        "200":
          description: Get my profiles info response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NamespaceProfile"
    post:
      tags:
        - directory
      summary: Sync my profiles
      operationId: SyncMyProfilesV1
      responses:
        "200":
          description: Get my profiles info response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NamespaceProfile"
  /v1/{namespaceId}/policies:
    get:
      tags:
        - policy
      summary: List policies
      operationId: ListPoliciesV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: List policies response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyRef"
  /v1/{namespaceId}/policies/{policyIdentifier}:
    put:
      tags:
        - policy
      summary: Put Policy
      operationId: PutPolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyIdentifier
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyParameters"
        required: true
      responses:
        "200":
          description: Certificate policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        400:
          $ref: "#/components/responses/ErrorResponse"
    get:
      tags:
        - policy
      summary: Get Certificate Policy
      operationId: GetPolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyIdentifier
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Certificate policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        404:
          $ref: "#/components/responses/ErrorResponse"
    delete:
      tags:
        - policy
      summary: Delete Certificate Policy
      operationId: DeletePolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyIdentifier
          schema:
            type: string
          required: true
        - in: query
          name: purge
          schema:
            type: boolean
      responses:
        200:
          description: Certificate policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        204:
          description: No content
  /v1/{namespaceId}/policies/{policyId}/apply:
    post:
      tags:
        - policy
      summary: Apply policy
      operationId: ApplyPolicyV1
      parameters:
        - in: path
          name: namespaceId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: policyId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyPolicyRequest"
        required: false
      responses:
        "200":
          description: Create certificate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyState"
  /v1/diagnostics:
    get:
      tags:
        - diagnostics
      summary: Get diagnostics
      operationId: GetDiagnosticsV1
      responses:
        "200":
          description: Diagnostics response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDiagnostics"
  /v1/certificates/enroll/{targetId}:
    post:
      tags:
        - certs
      summary: Enroll certificate
      operationId: EnrollCertificateV1
      parameters:
        - in: path
          name: targetId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateEnrollRequest"
        required: true
      responses:
        200:
          description: Enroll certificate response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateRef"
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  parameters:
    NamespaceIdParameter:
      in: path
      name: namespaceId
      schema:
        type: string
        format: uuid
      required: true
    NamespaceTypeParameter:
      in: path
      name: namespaceType
      schema:
        $ref: "#/components/schemas/NamespaceTypeShortName"
      required: true
    TemplateIdParameter:
      in: path
      name: templateId
      schema:
        type: string
        format: uuid
      required: true      
    CertIdParameter:
      in: path
      name: certId
      schema:
        type: string
        format: uuid
      required: true    
    IncludeCertificateParameter:
      in: query
      name: "includeCertificate"
      schema:
        type: string
        enum:
          - jwk
          - pem
        x-enum-varnames:
          - IncludeJWK
          - IncludePEM
  schemas:
    NamespaceTypeShortName:
      type: string
      enum:
        - unknown
        - root-ca
        - intermediate-ca
        - service-principal
        - group
        - device
        - user
        - application
      x-enum-varnames:
        - NSType_Unknown
        - NSType_RootCA
        - NSType_IntCA
        - NSType_ServicePrincipal
        - NSType_Group
        - NSType_Device
        - NSType_User
        - NSType_Application
    CertificateIssuer:
      type: object
      properties:
        namespaceType:
          $ref: "#/components/schemas/NamespaceTypeShortName"
        namespaceId:
          type: string
          format: uuid
          x-go-name: NamespaceID
        templateId:
          description: if certificate ID is not specified, use template ID to find the latest certificate, use default value if not specified
          type: string
          format: uuid
          x-go-name: TemplateID
      required:
        - namespaceType
        - namespaceId
    RefType:
      type: string
      enum:
        - namespace
        - certificate-template
        - certificate
      x-enum-varnames:
        - RefTypeNamespace
        - RefTypeCertificateTemplate
        - RefTypeCertificate
    Ref:
      type: object
      properties:
        namespaceId:
          type: string
          format: uuid
          x-go-name: NamespaceID
        type:
          $ref: "#/components/schemas/RefType"
        id:
          type: string
          format: uuid
          x-go-name: ID
      required:
        - namespaceId
        - type
        - id
    RefWithMetadata:
      allOf:
        - $ref: "#/components/schemas/Ref"
        - type: object
          properties:
            namespaceType:
              $ref: "#/components/schemas/NamespaceTypeShortName"
            updatedBy:
              description: Unique ID of the user who last updated the object
              type: string
            updated:
              description: Time when the object was last updated
              type: string
              format: date-time
            deleted:
              description: Time when the object was deleted
              type: string
              format: date-time
            metadata:
              type: object
              additionalProperties:
                type: string
              x-go-type-skip-optional-pointer: true
          required:
            - namespaceType
            - updated
            - updatedBy
    CertificateTemplateParameters:
      type: object
      description: Certificate fields, may accept template substitutions
      properties:
        displayName:
          type: string
        issuer:
          $ref: "#/components/schemas/CertificateIssuer"
        keyProperties:
          $ref: "#/components/schemas/JwkProperties"
        subject:
          $ref: "#/components/schemas/CertificateSubject"
        subjectAlternativeNames:
          $ref: "#/components/schemas/CertificateSubjectAlternativeNames"
        usage:
          $ref: "#/components/schemas/CertificateUsage"
        validity_months:
          x-go-name: ValidityInMonths
          type: integer
          format: int32
          minimum: 1
          maximum: 120
        keyStorePath:
          type: string
        lifetimeTrigger:
          $ref: "#/components/schemas/CertificateLifetimeTrigger"
        reuse_key:
          description: Keep using the same key version if exists
          type: boolean
          x-go-name: ReuseKey
      required:
        - displayName
        - issuer
        - subject
        - usage
    CertificateTemplate:
      allOf:
        - type: object
          properties:
            ref:
              $ref: "#/components/schemas/RefWithMetadata"
          required:
            - ref
        - $ref: "#/components/schemas/CertificateTemplateParameters"
    NamespaceType:
      type: string
      enum:
        - "#builtin.ca.root"
        - "#builtin.ca.intermediate"
        - "#microsoft.graph.servicePrincipal"
        - "#microsoft.graph.user"
        - "#microsoft.graph.group"
        - "#microsoft.graph.device"
        - "#microsoft.graph.application"
      x-enum-varnames:
        - NamespaceType_BuiltInCaRoot
        - NamespaceType_BuiltInCaInt
        - NamespaceType_MsGraphServicePrincipal
        - NamespaceType_MsGraphUser
        - NamespaceType_MsGraphGroup
        - NamespaceType_MsGraphDevice
        - NamespaceType_MsGraphApplication
    NamespaceInfo:
      type: object
      properties:
        ref:
          $ref: "#/components/schemas/RefWithMetadata"
        objectType:
          $ref: "#/components/schemas/NamespaceType"
      required:
        - ref
        - objectType
    ServicePrincipalLinkedDevice:
      type: object
      properties:
        deviceId:
          type: string
          format: uuid
        applicationClientId:
          type: string
          format: uuid
          x-go-name: ApplicationClientID
        applicationObjectId:
          type: string
          format: uuid
          x-go-name: ApplicationObjectID
        servicePrincipalObjectId:
          type: string
          format: uuid
          x-go-name: ServicePrincipalObjectID
      required:
        - deviceId
        - applicationClientId
        - applicationObjectId
        - servicePrincipalObjectId
    ApplyPolicyRequest:
      type: object
      properties:
        checkConsistency:
          description: Check consistency of the policy
          type: boolean
        forceRenewCertificate:
          description: Force certificate renewal
          type: boolean
    CertificateSubject:
      type: object
      properties:
        cn:
          description: Common name
          type: string
          x-go-name: CN
        ou:
          description: Organizational unit
          type: string
          x-go-name: OU
        o:
          description: Organization
          type: string
        c:
          description: Country or region
          type: string
      required:
        - cn
    KeyProperties:
      type: object
      properties:
        kty:
          x-go-name: KeyType
          $ref: "#/components/schemas/KeyType"
        key_size:
          x-go-name: KeySize
          $ref: "#/components/schemas/JwkKeySize"
        crv:
          $ref: "#/components/schemas/CurveName"
          x-go-name: CurveName
        reuse_key:
          description: Keep using the same key version if exists
          type: boolean
          x-go-name: ReuseKey
      required:
        - kty
    CertificateUsage:
      type: string
      enum:
        - root-ca
        - intermediate-ca
        - server-and-client
        - server-only
        - client-only
        - aad-client-credential
      x-enum-varnames:
        - Usage_RootCA
        - Usage_IntCA
        - Usage_ServerAndClient
        - Usage_ServerOnly
        - Usage_ClientOnly
        - Usage_AADClientCredential
    CertificateRef:
      allOf:
        - $ref: "#/components/schemas/ResourceRef"
        - title: CertificateRefParameters
          type: object
          properties:
            name:
              description: Name of the certificate, also the common name (CN) in the subject of the certificate
              type: string
            usage:
              $ref: "#/components/schemas/CertificateUsage"
            notAfter:
              description: Expiration date of the certificate
              type: string
              format: date-time
            issuerNamespace:
              description: Issuer namespace ID
              type: string
              format: uuid
            issuer:
              description: Issuer certificate ID
              type: string
              format: uuid
            createdBy:
              description: Unique ID of the user who created the certificate
              type: string
          required:
            - name
            - usage
            - notAfter
            - issuerNamespace
            - issuer
            - createdBy
    PolicyType:
      type: string
      enum:
        - certEnroll
        - certAadAppCred
      x-enum-varnames:
        - PolicyType_CertEnroll
        - PolicyType_CertAadAppClientCredential
    ResourceRef:
      type: object
      properties:
        namespaceId:
          description: Unique ID of the namespace
          type: string
          format: uuid
          x-go-name: NamespaceID
        id:
          type: string
          format: uuid
          x-go-name: ID
        updatedBy:
          description: Unique ID of the user who created the policy
          type: string
        updated:
          description: Time when the policy was last updated
          type: string
          format: date-time
        deleted:
          description: Time when the policy was deleted
          type: string
          format: date-time
      required:
        - namespaceId
        - id
        - updatedBy
        - updated
    PolicyStateCertRequest:
      type: object
      properties:
        lastCertId:
          type: string
          format: uuid
          x-go-name: LastCertID
        lastCertIssued:
          type: string
          format: date-time
        lastCertExpires:
          type: string
          format: date-time
        lastAction:
          type: string
      required:
        - lastCertId
        - lastCertIssued
        - lastCertExpires
        - lastAction
    PolicyState:
      allOf:
        - $ref: "#/components/schemas/ResourceRef"
        - type: object
          properties:
            policyType:
              $ref: "#/components/schemas/PolicyType"
            status:
              type: string
            message:
              type: string
            certRequest:
              $ref: "#/components/schemas/PolicyStateCertRequest"
          required:
            - policyType
            - string
            - message
    CertificateLifetimeTrigger:
      type: object
      properties:
        days_before_expiry:
          x-go-name: DaysBeforeExpiry
          type: integer
          format: int32
        lifetime_percentage:
          x-go-name: LifetimePercentage
          type: integer
          format: int32
    CertificateSubjectAlternativeNames:
      type: object
      properties:
        dns_names:
          x-go-name: DNSNames
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
        emails:
          x-go-name: EmailAddresses
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
        ipAddrs:
          x-go-name: IPAddresses
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
        uris:
          x-go-name: URIs
          type: array
          items:
            type: string
          x-go-type-skip-optional-pointer: true
    KeyType:
      type: string
      enum:
        - RSA
        - EC
      x-enum-varnames:
        - KeyTypeRSA
        - KeyTypeEC
    CurveName:
      type: string
      enum:
        - P-256
        - P-384
      x-enum-varnames:
        - CurveNameP256
        - CurveNameP384
    JwkAlg:
      type: string
      enum:
        - RS256
        - RS384
        - RS512
        - ES256
        - ES384
      x-enum-varnames:
        - AlgRS256
        - AlgRS384
        - AlgRS512
        - AlgES256
        - AlgES384
    JwkKeySize:
      type: integer
      format: int32
      enum:
        - 2048
        - 3072
        - 4096
      x-enum-varnames:
        - KeySize_2048
        - KeySize_3072
        - KeySize_4096
      x-go-name: KeySize
    JwkKeyOperation:
      type: string
      enum:
        - sign
        - verify
        - encrypt
        - decrypt
        - wrapKey
        - unwrapKey
      x-enum-varnames:
        - KeyOpSign
        - KeyOpVerify
        - KeyOpEncrypt
        - KeyOpDecrypt
        - KeyOpWrapKey
        - KeyOpUnwrapKey
      x-go-name: KeyOp
    JwkProperties:
      type: object
      description: Property bag of JSON Web Key (RFC 7517) with additional fields
      properties:
        alg:
          $ref: "#/components/schemas/JwkAlg"
        kty:
          $ref: "#/components/schemas/KeyType"
        key_size:
          description: RSA key size
          $ref: "#/components/schemas/JwkKeySize"
        key_ops:
          $ref: "#/components/schemas/JwkKeyOperation"
        n:
          description: RSA modulus
          type: string
          format: byteurl
        e:
          description: RSA exponent
          type: string
          format: byteurl
        crv:
          $ref: "#/components/schemas/CurveName"
        x:
          description: EC x coordinate
          type: string
          format: byteurl
        y:
          description: EC y coordinate
          type: string
          format: byteurl
        kid:
          description: Key ID
          type: string
          x-go-name: KeyID
        x5u:
          x-go-name: CertificateURL
          description: X.509 certificate URL
          type: string
        x5c:
          description: X.509 certificate chain
          type: array
          items:
            type: string
            format: byteurl
          x-go-name: CertificateChain
          x-go-type-skip-optional-pointer: true
        x5t:
          description: X.509 certificate SHA-1 thumbprint
          type: string
          format: byteurl
          x-go-name: CertificateThumbprint
        x5t#S256:
          description: X.509 certificate SHA-256 thumbprint
          type: string
          format: byteurl
          x-go-name: CertificateThumbprintSHA256
      required:
        - kty
    CertificateRenewalParameters:
      type: object
      properties:
        renewalCertificateId:
          type: string
          format: uuid
        signature:
          type: string
          format: byte
    CertificateEnrollRequest:
      type: object
      properties:
        issuer:
          $ref: "#/components/schemas/CertificateIssuerParameters"
        issueToUser:
          type: boolean
        policyId:
          description: ID of the policy to use for certificate enrollment
          type: string
          format: uuid
          x-go-name: PolicyID
        publicKey:
          $ref: "#/components/schemas/JwkProperties"
        targetFqdn:
          type: string
        usage:
          $ref: "#/components/schemas/CertificateUsage"
        renew:
          $ref: "#/components/schemas/CertificateRenewalParameters"
        validity_months:
          x-go-name: ValidityInMonths
          type: integer
          format: int32
      required:
        - issuer
        - policyId
        - publicKey
        - usage
        - validity_months
    CertificateIssuerParameters:
      type: object
      properties:
        issuerNamespaceId:
          description: ID of the issuer namespace
          type: string
          format: uuid
          x-go-name: IssuerNamespaceID
        issuerPolicyIdentifier:
          description: ID of the issuer policy
          type: string
      required:
        - issuerNamespaceId
    CertificateRequestPolicyParameters:
      allOf:
        - $ref: "#/components/schemas/CertificateIssuerParameters"
        - type: object
          properties:
            keyProperties:
              $ref: "#/components/schemas/KeyProperties"
            subject:
              $ref: "#/components/schemas/CertificateSubject"
            subjectAlternativeNames:
              $ref: "#/components/schemas/CertificateSubjectAlternativeNames"
            usage:
              $ref: "#/components/schemas/CertificateUsage"
            validity_months:
              x-go-name: ValidityInMonths
              type: integer
              format: int32
            lifetimeTrigger:
              $ref: "#/components/schemas/CertificateLifetimeTrigger"
          required:
            - subject
            - usage
    CertificateIdentifierType:
      type: string
      enum:
        - certId
        - policyId
      x-enum-varnames:
        - CertIdTypeCertId
        - CertIdTypePolicyId
    CertificateLinks:
      type: object
      properties:
        id:
          description: Key Vault certificate ID
          type: string
        kid:
          description: Key Vault key ID
          type: string
        sid:
          description: Key Vault secret ID
          type: string
        certBlob:
          description: Certificate link in Blob
          type: string
    CertificateFingerprints:
      type: object
      properties:
        sha256:
          description: SHA256 fingerprint of the certificate
          type: string
          format: hex
        sha1:
          description: SHA256 fingerprint of the certificate
          type: string
          format: hex
      required:
        - sha256
        - sha1
    CertificateInfo:
      type: object
      properties:
        ref:
          $ref: "#/components/schemas/RefWithMetadata"
        commonName:
          description: Common name
          type: string
        subject:
          type: string
        subjectAlternativeNames:
          $ref: "#/components/schemas/CertificateSubjectAlternativeNames"
        notBefore:
          description: Expiration date of the certificate
          type: string
          format: date-time
        notAfter:
          description: Expiration date of the certificate
          type: string
          format: date-time
        usage:
          $ref: "#/components/schemas/CertificateUsage"
        jwk:
          $ref: "#/components/schemas/JwkProperties"
        pem:
          type: string
        template:
          $ref: "#/components/schemas/Ref"
        issuerCertificate:
          $ref: "#/components/schemas/Ref"
      required:
        - ref
        - commonName
        - subject
        - notBefore
        - notAfter
        - usage
        - content
        - template
        - issuerCertificate
    CertificateIdentifier:
      type: object
      properties:
        id:
          description: ID of the issuer namespace
          type: string
          format: uuid
          x-go-name: ID
        type:
          $ref: "#/components/schemas/CertificateIdentifierType"
      required:
        - id
    CertificateAadAppCredPolicyParameters:
      type: object
      properties:
        certificateIdentifier:
          $ref: "#/components/schemas/CertificateIdentifier"
      required:
        - certificateIdentifier
    CertificateEnrollPolicyParameters:
      type: object
      properties:
        allowedUsages:
          type: array
          items:
            $ref: "#/components/schemas/CertificateUsage"
        maxValidityInMonths:
          type: integer
          format: int32
          minimum: 1
          maximum: 120
      required:
        - allowedUsages
        - maxValidityInMonths
    PolicyParameters:
      type: object
      properties:
        policyType:
          $ref: "#/components/schemas/PolicyType"
        certRequest:
          $ref: "#/components/schemas/CertificateRequestPolicyParameters"
        certEnroll:
          $ref: "#/components/schemas/CertificateEnrollPolicyParameters"
        certAadAppCred:
          $ref: "#/components/schemas/CertificateAadAppCredPolicyParameters"
      required:
        - policyType
    PolicyRef:
      allOf:
        - $ref: "#/components/schemas/ResourceRef"
        - type: object
          title: PolicyRefParameters
          properties:
            policyType:
              $ref: "#/components/schemas/PolicyType"
          required:
            - policyType
    Policy:
      allOf:
        - $ref: "#/components/schemas/PolicyRef"
        - $ref: "#/components/schemas/PolicyParameters"
    NamespaceRef:
      allOf:
        - $ref: "#/components/schemas/ResourceRef"
        - type: object
          properties:
            objectType:
              $ref: "#/components/schemas/NamespaceType"
            displayName:
              type: string
          required:
            - objectType
            - displayName
    NamespaceProfile:
      allOf:
        - $ref: "#/components/schemas/NamespaceRef"
        - type: object
          properties:
            servicePrincipalType:
              type: string
            userPrincipalName:
              type: string
            deviceOwnership:
              type: string
            deviceId:
              description: \#microsoft.graph.device deviceId
              x-go-name: DeviceID
              type: string
            operatingSystem:
              description: \#microsoft.graph.device operatingSystem
              type: string
            operatingSystemVersion:
              description: \#microsoft.graph.device operatingSystemVersion
              type: string
            isCompliant:
              description: \#microsoft.graph.device isCompliant
              type: boolean
            appId:
              description: \#microsoft.graph.application appId
              x-go-name: AppID
              type: string
    RequestHeaderEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: array
          items:
            type: string
      required:
        - key
        - value
    RequestDiagnostics:
      type: object
      properties:
        requestHeaders:
          type: array
          items:
            $ref: "#/components/schemas/RequestHeaderEntry"
        serviceRuntime:
          type: object
          title: ServiceRuntime
          properties:
            goVersion:
              type: string
          required:
            - goVersion
          additionalProperties:
            type: string
      required:
        - requestHeaders
        - serviceRuntime
    MyProfile:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/NamespaceProfile"
        device:
          $ref: "#/components/schemas/NamespaceProfile"
    NamespacePermissionKey:
      type: string
      enum:
        - allowEnrollDeviceCertificate
    NamespacePermissions:
      type: object
      properties:
        allowEnrollDeviceCertificate:
          type: boolean
  responses:
    RefListResponse:
      description: List RefsResponse
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RefWithMetadata"
    GenericResponse:
      description: generic response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
            additionalProperties: true
    ErrorResponse:
      description: error response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
            additionalProperties: true
