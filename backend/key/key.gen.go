// Package key provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package key

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	externalRef0 "github.com/stephenzsy/small-kms/backend/base"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for JsonWebKeyCurveName.
const (
	JsonWebKeyCurveNameP256  JsonWebKeyCurveName = "P-256"
	JsonWebKeyCurveNameP256K JsonWebKeyCurveName = "P-256K"
	JsonWebKeyCurveNameP384  JsonWebKeyCurveName = "P-384"
	JsonWebKeyCurveNameP521  JsonWebKeyCurveName = "P-521"
)

// Defines values for JsonWebKeyType.
const (
	JsonWebKeyTypeEC  JsonWebKeyType = "EC"
	JsonWebKeyTypeOct JsonWebKeyType = "oct"
	JsonWebKeyTypeRSA JsonWebKeyType = "RSA"
)

// JsonWebKeyCurveName defines model for JsonWebKeyCurveName.
type JsonWebKeyCurveName string

// JsonWebKeyType defines model for JsonWebKeyType.
type JsonWebKeyType string

// JsonWeyKeySize defines model for JsonWeyKeySize.
type JsonWeyKeySize = int32

// KeySpec defines model for KeySpec.
type KeySpec = keySpecComposed

// KeySpecFields defines model for KeySpecFields.
type KeySpecFields struct {
	Crv        *JsonWebKeyCurveName `json:"crv,omitempty"`
	ExpiryTime *externalRef0.Period `json:"expiryTime,omitempty"`
	Exportable bool                 `json:"exportable"`
	KeySize    *JsonWeyKeySize      `json:"key_size,omitempty"`
	Kty        JsonWebKeyType       `json:"kty"`
}

// KeySpecParameters defines model for KeySpecParameters.
type KeySpecParameters struct {
	Crv        *JsonWebKeyCurveName `json:"crv,omitempty"`
	ExpiryTime *externalRef0.Period `json:"expiryTime,omitempty"`
	Exportable *bool                `json:"exportable,omitempty"`
	KeySize    *JsonWeyKeySize      `json:"key_size,omitempty"`
	Kty        JsonWebKeyType       `json:"kty"`
	Name       *string              `json:"name,omitempty"`
}

// KeySpecRef defines model for KeySpecRef.
type KeySpecRef = keySpecRefComposed

// KeySpecRefFields defines model for KeySpecRefFields.
type KeySpecRefFields struct {
	Name string `json:"name"`
}

// KeySpecResponse defines model for KeySpecResponse.
type KeySpecResponse = KeySpec

// PutKeySpecJSONRequestBody defines body for PutKeySpec for application/json ContentType.
type PutKeySpecJSONRequestBody = KeySpecParameters

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List key specs
	// (GET /v1/{namespaceKind}/{namespaceIdentifier}/key-spec)
	ListKeySpecs(ctx echo.Context, namespaceKind externalRef0.NamespaceKindParameter, namespaceIdentifier externalRef0.NamespaceIdentifierParameter) error
	// Get key spec
	// (GET /v1/{namespaceKind}/{namespaceIdentifier}/key-spec/{resourceIdentifier})
	GetKeySpec(ctx echo.Context, namespaceKind externalRef0.NamespaceKindParameter, namespaceIdentifier externalRef0.NamespaceIdentifierParameter, resourceIdentifier externalRef0.ResourceIdentifierParameter) error
	// Put key spec
	// (PUT /v1/{namespaceKind}/{namespaceIdentifier}/key-spec/{resourceIdentifier})
	PutKeySpec(ctx echo.Context, namespaceKind externalRef0.NamespaceKindParameter, namespaceIdentifier externalRef0.NamespaceIdentifierParameter, resourceIdentifier externalRef0.ResourceIdentifierParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListKeySpecs converts echo context to params.
func (w *ServerInterfaceWrapper) ListKeySpecs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceKind" -------------
	var namespaceKind externalRef0.NamespaceKindParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceKind", runtime.ParamLocationPath, ctx.Param("namespaceKind"), &namespaceKind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceKind: %s", err))
	}

	// ------------- Path parameter "namespaceIdentifier" -------------
	var namespaceIdentifier externalRef0.NamespaceIdentifierParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceIdentifier", runtime.ParamLocationPath, ctx.Param("namespaceIdentifier"), &namespaceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceIdentifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListKeySpecs(ctx, namespaceKind, namespaceIdentifier)
	return err
}

// GetKeySpec converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeySpec(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceKind" -------------
	var namespaceKind externalRef0.NamespaceKindParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceKind", runtime.ParamLocationPath, ctx.Param("namespaceKind"), &namespaceKind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceKind: %s", err))
	}

	// ------------- Path parameter "namespaceIdentifier" -------------
	var namespaceIdentifier externalRef0.NamespaceIdentifierParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceIdentifier", runtime.ParamLocationPath, ctx.Param("namespaceIdentifier"), &namespaceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceIdentifier: %s", err))
	}

	// ------------- Path parameter "resourceIdentifier" -------------
	var resourceIdentifier externalRef0.ResourceIdentifierParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceIdentifier", runtime.ParamLocationPath, ctx.Param("resourceIdentifier"), &resourceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceIdentifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKeySpec(ctx, namespaceKind, namespaceIdentifier, resourceIdentifier)
	return err
}

// PutKeySpec converts echo context to params.
func (w *ServerInterfaceWrapper) PutKeySpec(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceKind" -------------
	var namespaceKind externalRef0.NamespaceKindParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceKind", runtime.ParamLocationPath, ctx.Param("namespaceKind"), &namespaceKind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceKind: %s", err))
	}

	// ------------- Path parameter "namespaceIdentifier" -------------
	var namespaceIdentifier externalRef0.NamespaceIdentifierParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceIdentifier", runtime.ParamLocationPath, ctx.Param("namespaceIdentifier"), &namespaceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceIdentifier: %s", err))
	}

	// ------------- Path parameter "resourceIdentifier" -------------
	var resourceIdentifier externalRef0.ResourceIdentifierParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceIdentifier", runtime.ParamLocationPath, ctx.Param("resourceIdentifier"), &resourceIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceIdentifier: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutKeySpec(ctx, namespaceKind, namespaceIdentifier, resourceIdentifier)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/:namespaceKind/:namespaceIdentifier/key-spec", wrapper.ListKeySpecs)
	router.GET(baseURL+"/v1/:namespaceKind/:namespaceIdentifier/key-spec/:resourceIdentifier", wrapper.GetKeySpec)
	router.PUT(baseURL+"/v1/:namespaceKind/:namespaceIdentifier/key-spec/:resourceIdentifier", wrapper.PutKeySpec)

}
