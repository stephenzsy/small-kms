// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for CreateCertificateParametersCategory.
const (
	Client         CreateCertificateParametersCategory = "client"
	IntermediateCa CreateCertificateParametersCategory = "intermediate-ca"
	RootCa         CreateCertificateParametersCategory = "root-ca"
	Server         CreateCertificateParametersCategory = "server"
)

// Defines values for CreateCertificateParametersCurve.
const (
	P256 CreateCertificateParametersCurve = "P-256"
	P384 CreateCertificateParametersCurve = "P-384"
)

// Defines values for CreateCertificateParametersKty.
const (
	EC  CreateCertificateParametersKty = "EC"
	RSA CreateCertificateParametersKty = "RSA"
)

// Defines values for CreateCertificateParametersSize.
const (
	N2048 CreateCertificateParametersSize = 2048
	N3072 CreateCertificateParametersSize = 3072
	N4096 CreateCertificateParametersSize = 4096
)

// CertificateRef defines model for CertificateRef.
type CertificateRef struct {
	CommonName string `json:"commonName"`
	Enabled    *bool  `json:"enabled,omitempty"`

	// Id Unique ID of the certificate
	ID           openapi_types.UUID `json:"id"`
	IssuerID     openapi_types.UUID `json:"issuerId"`
	NotAfter     time.Time          `json:"notAfter"`
	NotBefore    time.Time          `json:"notBefore"`
	SerialNumber string             `json:"serialNumber"`
}

// CertificateRefs defines model for CertificateRefs.
type CertificateRefs = []CertificateRef

// CreateCertificateParameters defines model for CreateCertificateParameters.
type CreateCertificateParameters struct {
	Category CreateCertificateParametersCategory `json:"category"`
	Curve    *CreateCertificateParametersCurve   `json:"curve,omitempty"`
	IssuerID *openapi_types.UUID                 `json:"issuer,omitempty"`
	Kty      *CreateCertificateParametersKty     `json:"kty,omitempty"`
	Name     string                              `json:"name"`
	Size     *CreateCertificateParametersSize    `json:"size,omitempty"`
	Subject  string                              `json:"subject"`
	Validity *string                             `json:"validity,omitempty"`
}

// CreateCertificateParametersCategory defines model for CreateCertificateParameters.Category.
type CreateCertificateParametersCategory string

// CreateCertificateParametersCurve defines model for CreateCertificateParameters.Curve.
type CreateCertificateParametersCurve string

// CreateCertificateParametersKty defines model for CreateCertificateParameters.Kty.
type CreateCertificateParametersKty string

// CreateCertificateParametersSize defines model for CreateCertificateParameters.Size.
type CreateCertificateParametersSize int32

// MsClientPrincipalId defines model for MsClientPrincipalId.
type MsClientPrincipalId = string

// MsClientPrincipalName defines model for MsClientPrincipalName.
type MsClientPrincipalName = string

// MsClientRoles defines model for MsClientRoles.
type MsClientRoles = string

// ListCACertificatesParams defines parameters for ListCACertificates.
type ListCACertificatesParams struct {
	XMsClientPrincipalName MsClientPrincipalName `json:"X-Ms-Client-Principal-Name"`
	XMsClientPrincipalId   MsClientPrincipalId   `json:"X-Ms-Client-Principal-Id"`
	XMsClientRoles         MsClientRoles         `json:"X-Ms-Client-Roles"`
}

// CreateCACertificateParams defines parameters for CreateCACertificate.
type CreateCACertificateParams struct {
	Force                  *bool                 `form:"force,omitempty" json:"force,omitempty"`
	XMsClientPrincipalName MsClientPrincipalName `json:"X-Ms-Client-Principal-Name"`
	XMsClientPrincipalId   MsClientPrincipalId   `json:"X-Ms-Client-Principal-Id"`
	XMsClientRoles         MsClientRoles         `json:"X-Ms-Client-Roles"`
}

// CreateCACertificateJSONRequestBody defines body for CreateCACertificate for application/json ContentType.
type CreateCACertificateJSONRequestBody = CreateCertificateParameters

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List CA Certificates
	// (GET /admin/ca)
	ListCACertificates(c *gin.Context, params ListCACertificatesParams)
	// Create CA Certificate
	// (POST /admin/ca/{id})
	CreateCACertificate(c *gin.Context, id string, params CreateCACertificateParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListCACertificates operation middleware
func (siw *ServerInterfaceWrapper) ListCACertificates(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCACertificatesParams

	headers := c.Request.Header

	// ------------- Required header parameter "X-Ms-Client-Principal-Name" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ms-Client-Principal-Name")]; found {
		var XMsClientPrincipalName MsClientPrincipalName
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Ms-Client-Principal-Name, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Ms-Client-Principal-Name", runtime.ParamLocationHeader, valueList[0], &XMsClientPrincipalName)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Ms-Client-Principal-Name: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientPrincipalName = XMsClientPrincipalName

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Ms-Client-Principal-Name is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Ms-Client-Principal-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ms-Client-Principal-Id")]; found {
		var XMsClientPrincipalId MsClientPrincipalId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Ms-Client-Principal-Id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Ms-Client-Principal-Id", runtime.ParamLocationHeader, valueList[0], &XMsClientPrincipalId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Ms-Client-Principal-Id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientPrincipalId = XMsClientPrincipalId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Ms-Client-Principal-Id is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Ms-Client-Roles" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ms-Client-Roles")]; found {
		var XMsClientRoles MsClientRoles
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Ms-Client-Roles, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Ms-Client-Roles", runtime.ParamLocationHeader, valueList[0], &XMsClientRoles)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Ms-Client-Roles: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRoles = XMsClientRoles

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Ms-Client-Roles is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCACertificates(c, params)
}

// CreateCACertificate operation middleware
func (siw *ServerInterfaceWrapper) CreateCACertificate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCACertificateParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter force: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "X-Ms-Client-Principal-Name" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ms-Client-Principal-Name")]; found {
		var XMsClientPrincipalName MsClientPrincipalName
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Ms-Client-Principal-Name, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Ms-Client-Principal-Name", runtime.ParamLocationHeader, valueList[0], &XMsClientPrincipalName)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Ms-Client-Principal-Name: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientPrincipalName = XMsClientPrincipalName

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Ms-Client-Principal-Name is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Ms-Client-Principal-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ms-Client-Principal-Id")]; found {
		var XMsClientPrincipalId MsClientPrincipalId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Ms-Client-Principal-Id, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Ms-Client-Principal-Id", runtime.ParamLocationHeader, valueList[0], &XMsClientPrincipalId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Ms-Client-Principal-Id: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientPrincipalId = XMsClientPrincipalId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Ms-Client-Principal-Id is required, but not found"), http.StatusBadRequest)
		return
	}

	// ------------- Required header parameter "X-Ms-Client-Roles" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Ms-Client-Roles")]; found {
		var XMsClientRoles MsClientRoles
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for X-Ms-Client-Roles, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Ms-Client-Roles", runtime.ParamLocationHeader, valueList[0], &XMsClientRoles)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter X-Ms-Client-Roles: %w", err), http.StatusBadRequest)
			return
		}

		params.XMsClientRoles = XMsClientRoles

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter X-Ms-Client-Roles is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCACertificate(c, id, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin/ca", wrapper.ListCACertificates)
	router.POST(options.BaseURL+"/admin/ca/:id", wrapper.CreateCACertificate)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/jNhD9K8K0RylS7XS7q5vX24PbTWokKFBg4QMjjW1uRVIhR8Gmhv57MaRj0bLb",
	"xm1RoDeZnDdf783QO6iMao1GTQ7KHbTCCoWE1v+6cfNGoqallbqSrWgWNR9LDSVsUdRoIQUtFEIJv2Q3",
	"Lgvm2cE+W9SQgsXHTlqsoSTbYQqu2qIS7ImeW8Y6slJvoO/T05C33v1FQT3k74W9Mw26V4ULlpdE6V8u",
	"fYA5WpJrWQnCO1z73lvT8mFIoDJKGf1S/chXCqjFQ4N1dPdgTINC86X05zW6ysqWpOFaftbyscNk8SEx",
	"64S2mFRDApDC2lglCEroOsmcHQdM4Uu2Mdm+DYsPPohzHdqgiIvQAed9aEOzNaE98lELwoyk5/Ckbm3o",
	"Pa6NxddDHFopmttOPYwCbfHLqX0fU/oJfDkRFyN3cUJROVF3VocI5uEzVsQZHXMf9Eao/MfXltUAX+XD",
	"YOZ72eQjzfQH18Ja8ew9WxSEkd3yaKBHEhOEG2Of+Rt1p7heawxlleAKNKFVWEvurT9xaJ98cZUfgai0",
	"odlVZ58wdrjMJt++gRSW2fTt9VlIaNU/kdGvdFTD3f0MUvh+fjaa/qOJcvK3OPFJcf02nRbfTdLr4t2b",
	"VTQhUtN0MmTHfdqg9S66QPE590+ikbUMiQ667azw8/lXMjxQtS9giHWqL8ZKvTY+DUkN390r0TTJjzf3",
	"yaxWUiez5QJSeELrwnYorr65KjhN06IWrYQSplfF1RRSaAVtvVxywdC88sttg75MlpOvgPcAfJSO5rNI",
	"fc7jBwV+Oq/vwSQ/v//79HLgor4EFtZ5v+K2u9ZoF0ZkUhRhGWtixZc7EG3bcG3S6Pyz4+btop3/+ul1",
	"gajjJT1Lfrj/6Tbx48x7OoIkewwzr5TgqfX9TuazZNRxEhvuNXi+YMWYA3f5Tta9XwXGnWFwvz9iDv9v",
	"FKb7x/uxw2FeSp65ys/N+H0+vJsHJCt+AMrL/sKsgjE6em/q539PPH+y2Ps+rIv/RLfnZBvLVCGJWpAY",
	"STXkPxLrOa32L+9M0NpxoI+mEk1yeIc62/AzTtSWed7w3dY4Kt8VRQH9qv89AAD//4duPY/dCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
