// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CertificateEnrollmentTargetType.
const (
	CertEnrollTargetTypeDeviceLinkedServicePrincipal CertificateEnrollmentTargetType = "device-linked-service-principal"
)

// Defines values for CertificateUsage.
const (
	UsageAADClientCredential CertificateUsage = "aad-client-credential"
	UsageClientOnly          CertificateUsage = "client-only"
	UsageIntCA               CertificateUsage = "intermediate-ca"
	UsageRootCA              CertificateUsage = "root-ca"
	UsageServerAndClient     CertificateUsage = "server-and-client"
	UsageServerOnly          CertificateUsage = "server-only"
)

// Defines values for IncludeCertificate.
const (
	IncludeJWK IncludeCertificate = "jwk"
	IncludePEM IncludeCertificate = "pem"
)

// Defines values for KeyOp.
const (
	KeyOpDecrypt   KeyOp = "decrypt"
	KeyOpEncrypt   KeyOp = "encrypt"
	KeyOpSign      KeyOp = "sign"
	KeyOpUnwrapKey KeyOp = "unwrapKey"
	KeyOpVerify    KeyOp = "verify"
	KeyOpWrapKey   KeyOp = "wrapKey"
)

// Defines values for JwtCrv.
const (
	CurveNameP256 JwtCrv = "P-256"
	CurveNameP384 JwtCrv = "P-384"
)

// Defines values for JwtKty.
const (
	KeyTypeEC  JwtKty = "EC"
	KeyTypeRSA JwtKty = "RSA"
)

// Defines values for RefType.
const (
	RefTypeCertificate              RefType = "certificate"
	RefTypeCertificateEnrollReceipt RefType = "certificate-enrollment-receipt"
	RefTypeCertificateTemplate      RefType = "certificate-template"
	RefTypeNamespace                RefType = "namespace"
)

// CertificateEnrollmentReceipt defines model for CertificateEnrollmentReceipt.
type CertificateEnrollmentReceipt struct {
	// Expires Time when the enrollment expires
	Expires time.Time `json:"expires"`

	// JwtClaims payload section of the certificate claims, in JWT format, base64url encoded
	JwtClaims string `json:"jwtClaims"`

	// KeyProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	KeyProperties JwkProperties   `json:"keyProperties"`
	Ref           RefWithMetadata `json:"ref"`

	// RequesterId Unique ID of the user who requested the certificate
	RequesterID openapi_types.UUID `json:"requesterId"`

	// TemplateId Consistent derived ID (UUID v5) of the certificate template
	TemplateID openapi_types.UUID `json:"templateId"`

	// TemplateNamespaceId Unique ID of the namespace of the certificate template
	TemplateNamespaceID openapi_types.UUID `json:"templateNamespaceId"`
}

// CertificateEnrollmentReplyFinalize defines model for CertificateEnrollmentReplyFinalize.
type CertificateEnrollmentReplyFinalize struct {
	// JwtHeader header section of the certificate claims, in JWT format, base64url encoded
	JwtHeader string `json:"jwtHeader"`

	// JwtSignature signature section of the jwt, serves as proof of confirmation finalize the enrollment and being issued a certificate, with header and signature, signed with the key pair with the public key in the same request
	JwtSignature string `json:"jwtSignature"`

	// PublicKey Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	PublicKey JwkProperties `json:"publicKey"`
}

// CertificateEnrollmentRequest defines model for CertificateEnrollmentRequest.
type CertificateEnrollmentRequest struct {
	union json.RawMessage
}

// CertificateEnrollmentRequestDeviceLinkedServicePrincipal defines model for CertificateEnrollmentRequestDeviceLinkedServicePrincipal.
type CertificateEnrollmentRequestDeviceLinkedServicePrincipal struct {
	// AppId Client ID of the application
	AppID openapi_types.UUID `json:"appId"`

	// CommonName Common Name to appear in the certificate
	CommonName *string `json:"commonName,omitempty"`

	// DeviceNamespaceId Object ID of the device
	DeviceNamespaceID openapi_types.UUID `json:"deviceNamespaceId"`

	// LinkId Unique ID of the device link
	DeviceLinkID openapi_types.UUID `json:"linkId"`

	// ServicePrincipalId Object ID of the service principal
	ServicePrincipalID openapi_types.UUID              `json:"servicePrincipalId"`
	Type               CertificateEnrollmentTargetType `json:"type"`
}

// CertificateEnrollmentTargetType defines model for CertificateEnrollmentTargetType.
type CertificateEnrollmentTargetType string

// CertificateInfo defines model for CertificateInfo.
type CertificateInfo struct {
	// CommonName Common name
	CommonName        string `json:"commonName"`
	IssuerCertificate Ref    `json:"issuerCertificate"`

	// Jwk Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
	Jwk *JwkProperties `json:"jwk,omitempty"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time `json:"notAfter"`

	// NotBefore Expiration date of the certificate
	NotBefore               time.Time                           `json:"notBefore"`
	Pem                     *string                             `json:"pem,omitempty"`
	Ref                     RefWithMetadata                     `json:"ref"`
	Subject                 string                              `json:"subject"`
	SubjectAlternativeNames *CertificateSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty"`
	Template                Ref                                 `json:"template"`
	Usage                   CertificateUsage                    `json:"usage"`
}

// CertificateSubjectAlternativeNames defines model for CertificateSubjectAlternativeNames.
type CertificateSubjectAlternativeNames struct {
	EmailAddresses []string `json:"emails,omitempty"`
	URIs           []string `json:"uris,omitempty"`
}

// CertificateUsage defines model for CertificateUsage.
type CertificateUsage string

// IncludeCertificate defines model for IncludeCertificate.
type IncludeCertificate string

// KeyOp defines model for JwkKeyOperation.
type KeyOp string

// JwkProperties Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
type JwkProperties struct {
	Crv *JwtCrv `json:"crv,omitempty"`

	// E RSA exponent
	E     *string `json:"e,omitempty"`
	KeyOp *KeyOp  `json:"key_ops,omitempty"`

	// KeySize RSA key size
	KeySize *int `json:"key_size,omitempty"`

	// Kid Key ID
	KeyID *string `json:"kid,omitempty"`
	Kty   JwtKty  `json:"kty"`

	// N RSA modulus
	N *string `json:"n,omitempty"`

	// X EC x coordinate
	X *string `json:"x,omitempty"`

	// X5c X.509 certificate chain
	CertificateChain []string `json:"x5c,omitempty"`

	// X5t X.509 certificate SHA-1 thumbprint
	CertificateThumbprint *string `json:"x5t,omitempty"`

	// X5tS256 X.509 certificate SHA-256 thumbprint
	CertificateThumbprintSHA256 *string `json:"x5t#S256,omitempty"`

	// X5u X.509 certificate URL
	CertificateURL *string `json:"x5u,omitempty"`

	// Y EC y coordinate
	Y *string `json:"y,omitempty"`
}

// JwtCrv defines model for JwtCrv.
type JwtCrv string

// JwtKty defines model for JwtKty.
type JwtKty string

// Ref defines model for Ref.
type Ref struct {
	ID          openapi_types.UUID `json:"id"`
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	Type        RefType            `json:"type"`
}

// RefType defines model for RefType.
type RefType string

// RefWithMetadata defines model for RefWithMetadata.
type RefWithMetadata struct {
	// Deleted Time when the object was deleted
	Deleted *time.Time `json:"deleted,omitempty"`

	// DisplayName Display name of the object
	DisplayName string             `json:"displayName"`
	ID          openapi_types.UUID `json:"id"`
	IsActive    *bool              `json:"isActive,omitempty"`
	IsDefault   *bool              `json:"isDefault,omitempty"`
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	Type        RefType            `json:"type"`

	// Updated Time when the object was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who last updated the object
	UpdatedBy string `json:"updatedBy"`
}

// CertIdParameter defines model for CertIdParameter.
type CertIdParameter = openapi_types.UUID

// IncludeCertificateParameter defines model for IncludeCertificateParameter.
type IncludeCertificateParameter = IncludeCertificate

// NamespaceIdParameter defines model for NamespaceIdParameter.
type NamespaceIdParameter = openapi_types.UUID

// TemplateIdParameter defines model for TemplateIdParameter.
type TemplateIdParameter = openapi_types.UUID

// CertificateResponse defines model for CertificateResponse.
type CertificateResponse = CertificateInfo

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse map[string]interface{}

// CompleteCertificateEnrollmentV2Params defines parameters for CompleteCertificateEnrollmentV2.
type CompleteCertificateEnrollmentV2Params struct {
	IncludeCertificate *IncludeCertificateParameter `form:"includeCertificate,omitempty" json:"includeCertificate,omitempty"`
}

// BeginEnrollCertificateV2JSONRequestBody defines body for BeginEnrollCertificateV2 for application/json ContentType.
type BeginEnrollCertificateV2JSONRequestBody = CertificateEnrollmentRequest

// CompleteCertificateEnrollmentV2JSONRequestBody defines body for CompleteCertificateEnrollmentV2 for application/json ContentType.
type CompleteCertificateEnrollmentV2JSONRequestBody = CertificateEnrollmentReplyFinalize

// AsCertificateEnrollmentRequestDeviceLinkedServicePrincipal returns the union data inside the CertificateEnrollmentRequest as a CertificateEnrollmentRequestDeviceLinkedServicePrincipal
func (t CertificateEnrollmentRequest) AsCertificateEnrollmentRequestDeviceLinkedServicePrincipal() (CertificateEnrollmentRequestDeviceLinkedServicePrincipal, error) {
	var body CertificateEnrollmentRequestDeviceLinkedServicePrincipal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCertificateEnrollmentRequestDeviceLinkedServicePrincipal overwrites any union data inside the CertificateEnrollmentRequest as the provided CertificateEnrollmentRequestDeviceLinkedServicePrincipal
func (t *CertificateEnrollmentRequest) FromCertificateEnrollmentRequestDeviceLinkedServicePrincipal(v CertificateEnrollmentRequestDeviceLinkedServicePrincipal) error {
	v.Type = "device-linked-service-principal"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCertificateEnrollmentRequestDeviceLinkedServicePrincipal performs a merge with any union data inside the CertificateEnrollmentRequest, using the provided CertificateEnrollmentRequestDeviceLinkedServicePrincipal
func (t *CertificateEnrollmentRequest) MergeCertificateEnrollmentRequestDeviceLinkedServicePrincipal(v CertificateEnrollmentRequestDeviceLinkedServicePrincipal) error {
	v.Type = "device-linked-service-principal"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CertificateEnrollmentRequest) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CertificateEnrollmentRequest) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "device-linked-service-principal":
		return t.AsCertificateEnrollmentRequestDeviceLinkedServicePrincipal()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CertificateEnrollmentRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CertificateEnrollmentRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BeginEnrollCertificateV2WithBody request with any body
	BeginEnrollCertificateV2WithBody(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BeginEnrollCertificateV2(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, body BeginEnrollCertificateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteCertificateEnrollmentV2WithBody request with any body
	CompleteCertificateEnrollmentV2WithBody(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteCertificateEnrollmentV2(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, body CompleteCertificateEnrollmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BeginEnrollCertificateV2WithBody(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBeginEnrollCertificateV2RequestWithBody(c.Server, namespaceId, templateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BeginEnrollCertificateV2(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, body BeginEnrollCertificateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBeginEnrollCertificateV2Request(c.Server, namespaceId, templateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCertificateEnrollmentV2WithBody(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCertificateEnrollmentV2RequestWithBody(c.Server, namespaceId, certId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteCertificateEnrollmentV2(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, body CompleteCertificateEnrollmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteCertificateEnrollmentV2Request(c.Server, namespaceId, certId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBeginEnrollCertificateV2Request calls the generic BeginEnrollCertificateV2 builder with application/json body
func NewBeginEnrollCertificateV2Request(server string, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, body BeginEnrollCertificateV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBeginEnrollCertificateV2RequestWithBody(server, namespaceId, templateId, "application/json", bodyReader)
}

// NewBeginEnrollCertificateV2RequestWithBody generates requests for BeginEnrollCertificateV2 with any type of body
func NewBeginEnrollCertificateV2RequestWithBody(server string, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "templateId", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/certificate-templates/%s/enroll", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteCertificateEnrollmentV2Request calls the generic CompleteCertificateEnrollmentV2 builder with application/json body
func NewCompleteCertificateEnrollmentV2Request(server string, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, body CompleteCertificateEnrollmentV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteCertificateEnrollmentV2RequestWithBody(server, namespaceId, certId, params, "application/json", bodyReader)
}

// NewCompleteCertificateEnrollmentV2RequestWithBody generates requests for CompleteCertificateEnrollmentV2 with any type of body
func NewCompleteCertificateEnrollmentV2RequestWithBody(server string, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "certId", runtime.ParamLocationPath, certId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/certificates/%s/pending", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeCertificate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeCertificate", runtime.ParamLocationQuery, *params.IncludeCertificate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BeginEnrollCertificateV2WithBodyWithResponse request with any body
	BeginEnrollCertificateV2WithBodyWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BeginEnrollCertificateV2Response, error)

	BeginEnrollCertificateV2WithResponse(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, body BeginEnrollCertificateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*BeginEnrollCertificateV2Response, error)

	// CompleteCertificateEnrollmentV2WithBodyWithResponse request with any body
	CompleteCertificateEnrollmentV2WithBodyWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCertificateEnrollmentV2Response, error)

	CompleteCertificateEnrollmentV2WithResponse(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, body CompleteCertificateEnrollmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCertificateEnrollmentV2Response, error)
}

type BeginEnrollCertificateV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEnrollmentReceipt
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BeginEnrollCertificateV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BeginEnrollCertificateV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteCertificateEnrollmentV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CompleteCertificateEnrollmentV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteCertificateEnrollmentV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BeginEnrollCertificateV2WithBodyWithResponse request with arbitrary body returning *BeginEnrollCertificateV2Response
func (c *ClientWithResponses) BeginEnrollCertificateV2WithBodyWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BeginEnrollCertificateV2Response, error) {
	rsp, err := c.BeginEnrollCertificateV2WithBody(ctx, namespaceId, templateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBeginEnrollCertificateV2Response(rsp)
}

func (c *ClientWithResponses) BeginEnrollCertificateV2WithResponse(ctx context.Context, namespaceId NamespaceIdParameter, templateId TemplateIdParameter, body BeginEnrollCertificateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*BeginEnrollCertificateV2Response, error) {
	rsp, err := c.BeginEnrollCertificateV2(ctx, namespaceId, templateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBeginEnrollCertificateV2Response(rsp)
}

// CompleteCertificateEnrollmentV2WithBodyWithResponse request with arbitrary body returning *CompleteCertificateEnrollmentV2Response
func (c *ClientWithResponses) CompleteCertificateEnrollmentV2WithBodyWithResponse(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteCertificateEnrollmentV2Response, error) {
	rsp, err := c.CompleteCertificateEnrollmentV2WithBody(ctx, namespaceId, certId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCertificateEnrollmentV2Response(rsp)
}

func (c *ClientWithResponses) CompleteCertificateEnrollmentV2WithResponse(ctx context.Context, namespaceId NamespaceIdParameter, certId CertIdParameter, params *CompleteCertificateEnrollmentV2Params, body CompleteCertificateEnrollmentV2JSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteCertificateEnrollmentV2Response, error) {
	rsp, err := c.CompleteCertificateEnrollmentV2(ctx, namespaceId, certId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteCertificateEnrollmentV2Response(rsp)
}

// ParseBeginEnrollCertificateV2Response parses an HTTP response from a BeginEnrollCertificateV2WithResponse call
func ParseBeginEnrollCertificateV2Response(rsp *http.Response) (*BeginEnrollCertificateV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BeginEnrollCertificateV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEnrollmentReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCompleteCertificateEnrollmentV2Response parses an HTTP response from a CompleteCertificateEnrollmentV2WithResponse call
func ParseCompleteCertificateEnrollmentV2Response(rsp *http.Response) (*CompleteCertificateEnrollmentV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteCertificateEnrollmentV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
