// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package admin

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CertificateUsage.
const (
	UsageClient CertificateUsage = "client"
	UsageIntCA  CertificateUsage = "intermediate-ca"
	UsageRootCA CertificateUsage = "root-ca"
	UsageServer CertificateUsage = "server"
)

// Defines values for KeyParametersCurve.
const (
	EcCurveP256 KeyParametersCurve = "P-256"
	EcCurveP384 KeyParametersCurve = "P-384"
)

// Defines values for KeyParametersKty.
const (
	KtyEC  KeyParametersKty = "EC"
	KtyRSA KeyParametersKty = "RSA"
)

// Defines values for KeyParametersSize.
const (
	KeySize2048 KeyParametersSize = 2048
	KeySize3072 KeyParametersSize = 3072
	KeySize4096 KeyParametersSize = 4096
)

// Defines values for PolicyID.
const (
	PolicyIDCertEnroll PolicyID = "cert-enrollment"
)

// Defines values for WellKnownNamespaceIDStr.
const (
	WellKnownNamespaceIDStrCertsInfra        WellKnownNamespaceIDStr = "00000000-0000-0000-0001-000000000010"
	WellKnownNamespaceIDStrCertsService      WellKnownNamespaceIDStr = "00000000-0000-0000-0001-000000000011"
	WellKnownNamespaceIDStrIntCAInfra        WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000010"
	WellKnownNamespaceIDStrIntCASCEPIntranet WellKnownNamespaceIDStr = "00000000-0000-0000-0000-100000000001"
	WellKnownNamespaceIDStrIntCAService      WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000011"
	WellKnownNamespaceIDStrRootCA            WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000001"
)

// Defines values for GetCertificateV1ParamsAccept.
const (
	AcceptJson       GetCertificateV1ParamsAccept = "application/json"
	AcceptPem        GetCertificateV1ParamsAccept = "application/x-pem-file"
	AcceptX509CaCert GetCertificateV1ParamsAccept = "application/x-x509-ca-cert"
)

// CertificateEnrollmentParameters defines model for CertificateEnrollmentParameters.
type CertificateEnrollmentParameters struct {
	DelegatedService *string            `json:"delegatedService,omitempty"`
	IssuerID         openapi_types.UUID `json:"issuerId"`
	KeyParameters    KeyParameters      `json:"keyParameters"`

	// Validity RFC3339 duration string
	Validity string `json:"validity"`
}

// CertificateEnrollmentPolicy defines model for CertificateEnrollmentPolicy.
type CertificateEnrollmentPolicy struct {
	DelegatedService *string            `json:"delegatedService,omitempty"`
	PolicyID         PolicyID           `json:"id"`
	IssuerID         openapi_types.UUID `json:"issuerId"`
	KeyParameters    KeyParameters      `json:"keyParameters"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// UpdatedAt Time when the policy was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`

	// Validity RFC3339 duration string
	Validity string `json:"validity"`
}

// CertificateRef defines model for CertificateRef.
type CertificateRef struct {
	// CreatedBy Unique ID of the user who created the certificate
	CreatedBy string `json:"createdBy"`

	// Id Unique ID of the certificate, also the serial number of the certificate
	ID openapi_types.UUID `json:"id"`

	// Issuer Issuer of the certificate
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer of the certificate
	IssuerNamespace openapi_types.UUID `json:"issuerNamespace"`

	// Name Name of the certificate, also the common name (CN) of the certificate
	Name string `json:"name"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time        `json:"notAfter"`
	Usage    CertificateUsage `json:"usage"`
}

// CertificateSubject defines model for CertificateSubject.
type CertificateSubject struct {
	// C Country or region
	C *string `json:"c,omitempty"`

	// Cn Common name
	CN string `json:"cn"`

	// O Organization
	O *string `json:"o,omitempty"`

	// Ou Organizational unit
	OU *string `json:"ou,omitempty"`
}

// CertificateUsage defines model for CertificateUsage.
type CertificateUsage string

// CreateCertificateOptions defines model for CreateCertificateOptions.
type CreateCertificateOptions struct {
	// KeepKeyVersion Keep using the same key version if exists
	KeepKeyVersion *bool `json:"keepKeyVersion,omitempty"`

	// NewKeyName Create new key name instead of a new version if exists
	NewKeyName *bool `json:"newKeyName,omitempty"`
}

// CreateCertificateParameters defines model for CreateCertificateParameters.
type CreateCertificateParameters struct {
	// Issuer Issuer of the certificate
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer of the certificate
	IssuerNamespace openapi_types.UUID        `json:"issuerNamespace"`
	Options         *CreateCertificateOptions `json:"options,omitempty"`
	Subject         CertificateSubject        `json:"subject"`
	Usage           CertificateUsage          `json:"usage"`
	Validity        *string                   `json:"validity,omitempty"`
}

// KeyParameters defines model for KeyParameters.
type KeyParameters struct {
	Curve *KeyParametersCurve `json:"curve,omitempty"`
	Kty   *KeyParametersKty   `json:"kty,omitempty"`
	Size  *KeyParametersSize  `json:"size,omitempty"`
}

// KeyParametersCurve defines model for KeyParameters.Curve.
type KeyParametersCurve string

// KeyParametersKty defines model for KeyParameters.Kty.
type KeyParametersKty string

// KeyParametersSize defines model for KeyParameters.Size.
type KeyParametersSize int32

// PolicyID defines model for PolicyId.
type PolicyID string

// PolicyRef defines model for PolicyRef.
type PolicyRef struct {
	PolicyID PolicyID `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// UpdatedAt Time when the policy was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// WellKnownNamespaceIDStr defines model for WellKnownNamespaceId.
type WellKnownNamespaceIDStr string

// NamespaceID defines model for namespaceId.
type NamespaceID = openapi_types.UUID

// GetCertificateV1Params defines parameters for GetCertificateV1.
type GetCertificateV1Params struct {
	Accept *GetCertificateV1ParamsAccept `json:"Accept,omitempty"`
}

// GetCertificateV1ParamsAccept defines parameters for GetCertificateV1.
type GetCertificateV1ParamsAccept string

// CreateCertificateV1JSONRequestBody defines body for CreateCertificateV1 for application/json ContentType.
type CreateCertificateV1JSONRequestBody = CreateCertificateParameters

// PutPolicyCertEnrollV1JSONRequestBody defines body for PutPolicyCertEnrollV1 for application/json ContentType.
type PutPolicyCertEnrollV1JSONRequestBody = CertificateEnrollmentParameters

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateCertificateV1WithBody request with any body
	CreateCertificateV1WithBody(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCertificateV1(ctx context.Context, namespaceID NamespaceID, body CreateCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateV1 request
	GetCertificateV1(ctx context.Context, namespaceID NamespaceID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCertificatesV1 request
	ListCertificatesV1(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyCertEnrollV1 request
	GetPolicyCertEnrollV1(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPolicyCertEnrollV1WithBody request with any body
	PutPolicyCertEnrollV1WithBody(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPolicyCertEnrollV1(ctx context.Context, namespaceID NamespaceID, body PutPolicyCertEnrollV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateCertificateV1WithBody(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCertificateV1RequestWithBody(c.Server, namespaceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCertificateV1(ctx context.Context, namespaceID NamespaceID, body CreateCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCertificateV1Request(c.Server, namespaceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateV1(ctx context.Context, namespaceID NamespaceID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateV1Request(c.Server, namespaceID, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCertificatesV1(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCertificatesV1Request(c.Server, namespaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyCertEnrollV1(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyCertEnrollV1Request(c.Server, namespaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicyCertEnrollV1WithBody(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyCertEnrollV1RequestWithBody(c.Server, namespaceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicyCertEnrollV1(ctx context.Context, namespaceID NamespaceID, body PutPolicyCertEnrollV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyCertEnrollV1Request(c.Server, namespaceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateCertificateV1Request calls the generic CreateCertificateV1 builder with application/json body
func NewCreateCertificateV1Request(server string, namespaceID NamespaceID, body CreateCertificateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCertificateV1RequestWithBody(server, namespaceID, "application/json", bodyReader)
}

// NewCreateCertificateV1RequestWithBody generates requests for CreateCertificateV1 with any type of body
func NewCreateCertificateV1RequestWithBody(server string, namespaceID NamespaceID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/certificate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificateV1Request generates requests for GetCertificateV1
func NewGetCertificateV1Request(server string, namespaceID NamespaceID, id openapi_types.UUID, params *GetCertificateV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/certificate/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Accept != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam0)
		}

	}

	return req, nil
}

// NewListCertificatesV1Request generates requests for ListCertificatesV1
func NewListCertificatesV1Request(server string, namespaceID NamespaceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/certificates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyCertEnrollV1Request generates requests for GetPolicyCertEnrollV1
func NewGetPolicyCertEnrollV1Request(server string, namespaceID NamespaceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policy/cert-enrollment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPolicyCertEnrollV1Request calls the generic PutPolicyCertEnrollV1 builder with application/json body
func NewPutPolicyCertEnrollV1Request(server string, namespaceID NamespaceID, body PutPolicyCertEnrollV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPolicyCertEnrollV1RequestWithBody(server, namespaceID, "application/json", bodyReader)
}

// NewPutPolicyCertEnrollV1RequestWithBody generates requests for PutPolicyCertEnrollV1 with any type of body
func NewPutPolicyCertEnrollV1RequestWithBody(server string, namespaceID NamespaceID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policy/cert-enrollment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateCertificateV1WithBodyWithResponse request with any body
	CreateCertificateV1WithBodyWithResponse(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCertificateV1Response, error)

	CreateCertificateV1WithResponse(ctx context.Context, namespaceID NamespaceID, body CreateCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCertificateV1Response, error)

	// GetCertificateV1WithResponse request
	GetCertificateV1WithResponse(ctx context.Context, namespaceID NamespaceID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*GetCertificateV1Response, error)

	// ListCertificatesV1WithResponse request
	ListCertificatesV1WithResponse(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*ListCertificatesV1Response, error)

	// GetPolicyCertEnrollV1WithResponse request
	GetPolicyCertEnrollV1WithResponse(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*GetPolicyCertEnrollV1Response, error)

	// PutPolicyCertEnrollV1WithBodyWithResponse request with any body
	PutPolicyCertEnrollV1WithBodyWithResponse(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyCertEnrollV1Response, error)

	PutPolicyCertEnrollV1WithResponse(ctx context.Context, namespaceID NamespaceID, body PutPolicyCertEnrollV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyCertEnrollV1Response, error)
}

type CreateCertificateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateRef
}

// Status returns HTTPResponse.Status
func (r CreateCertificateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCertificateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRef
}

// Status returns HTTPResponse.Status
func (r GetCertificateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCertificatesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CertificateRef
}

// Status returns HTTPResponse.Status
func (r ListCertificatesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCertificatesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyCertEnrollV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateEnrollmentPolicy
}

// Status returns HTTPResponse.Status
func (r GetPolicyCertEnrollV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyCertEnrollV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPolicyCertEnrollV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateEnrollmentPolicy
}

// Status returns HTTPResponse.Status
func (r PutPolicyCertEnrollV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPolicyCertEnrollV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateCertificateV1WithBodyWithResponse request with arbitrary body returning *CreateCertificateV1Response
func (c *ClientWithResponses) CreateCertificateV1WithBodyWithResponse(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCertificateV1Response, error) {
	rsp, err := c.CreateCertificateV1WithBody(ctx, namespaceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCertificateV1Response(rsp)
}

func (c *ClientWithResponses) CreateCertificateV1WithResponse(ctx context.Context, namespaceID NamespaceID, body CreateCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCertificateV1Response, error) {
	rsp, err := c.CreateCertificateV1(ctx, namespaceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCertificateV1Response(rsp)
}

// GetCertificateV1WithResponse request returning *GetCertificateV1Response
func (c *ClientWithResponses) GetCertificateV1WithResponse(ctx context.Context, namespaceID NamespaceID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*GetCertificateV1Response, error) {
	rsp, err := c.GetCertificateV1(ctx, namespaceID, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateV1Response(rsp)
}

// ListCertificatesV1WithResponse request returning *ListCertificatesV1Response
func (c *ClientWithResponses) ListCertificatesV1WithResponse(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*ListCertificatesV1Response, error) {
	rsp, err := c.ListCertificatesV1(ctx, namespaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCertificatesV1Response(rsp)
}

// GetPolicyCertEnrollV1WithResponse request returning *GetPolicyCertEnrollV1Response
func (c *ClientWithResponses) GetPolicyCertEnrollV1WithResponse(ctx context.Context, namespaceID NamespaceID, reqEditors ...RequestEditorFn) (*GetPolicyCertEnrollV1Response, error) {
	rsp, err := c.GetPolicyCertEnrollV1(ctx, namespaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyCertEnrollV1Response(rsp)
}

// PutPolicyCertEnrollV1WithBodyWithResponse request with arbitrary body returning *PutPolicyCertEnrollV1Response
func (c *ClientWithResponses) PutPolicyCertEnrollV1WithBodyWithResponse(ctx context.Context, namespaceID NamespaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyCertEnrollV1Response, error) {
	rsp, err := c.PutPolicyCertEnrollV1WithBody(ctx, namespaceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyCertEnrollV1Response(rsp)
}

func (c *ClientWithResponses) PutPolicyCertEnrollV1WithResponse(ctx context.Context, namespaceID NamespaceID, body PutPolicyCertEnrollV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyCertEnrollV1Response, error) {
	rsp, err := c.PutPolicyCertEnrollV1(ctx, namespaceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyCertEnrollV1Response(rsp)
}

// ParseCreateCertificateV1Response parses an HTTP response from a CreateCertificateV1WithResponse call
func ParseCreateCertificateV1Response(rsp *http.Response) (*CreateCertificateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCertificateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCertificateV1Response parses an HTTP response from a GetCertificateV1WithResponse call
func ParseGetCertificateV1Response(rsp *http.Response) (*GetCertificateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x-x509-ca-cert) unsupported

	}

	return response, nil
}

// ParseListCertificatesV1Response parses an HTTP response from a ListCertificatesV1WithResponse call
func ParseListCertificatesV1Response(rsp *http.Response) (*ListCertificatesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCertificatesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CertificateRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicyCertEnrollV1Response parses an HTTP response from a GetPolicyCertEnrollV1WithResponse call
func ParseGetPolicyCertEnrollV1Response(rsp *http.Response) (*GetPolicyCertEnrollV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyCertEnrollV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateEnrollmentPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPolicyCertEnrollV1Response parses an HTTP response from a PutPolicyCertEnrollV1WithResponse call
func ParsePutPolicyCertEnrollV1Response(rsp *http.Response) (*PutPolicyCertEnrollV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPolicyCertEnrollV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateEnrollmentPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create certificate
	// (POST /v1/{namespaceId}/certificate)
	CreateCertificateV1(c *gin.Context, namespaceID NamespaceID)
	// Get certificate
	// (GET /v1/{namespaceId}/certificate/{id})
	GetCertificateV1(c *gin.Context, namespaceID NamespaceID, id openapi_types.UUID, params GetCertificateV1Params)
	// List certificates
	// (GET /v1/{namespaceId}/certificates)
	ListCertificatesV1(c *gin.Context, namespaceID NamespaceID)
	// Get Certificate Enrollment Policy
	// (GET /v1/{namespaceId}/policy/cert-enrollment)
	GetPolicyCertEnrollV1(c *gin.Context, namespaceID NamespaceID)
	// Put Certificate Enrollment Policy
	// (PUT /v1/{namespaceId}/policy/cert-enrollment)
	PutPolicyCertEnrollV1(c *gin.Context, namespaceID NamespaceID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCertificateV1(c, namespaceID)
}

// GetCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) GetCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateV1Params

	headers := c.Request.Header

	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept GetCertificateV1ParamsAccept
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, valueList[0], &Accept)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept: %w", err), http.StatusBadRequest)
			return
		}

		params.Accept = &Accept

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCertificateV1(c, namespaceID, id, params)
}

// ListCertificatesV1 operation middleware
func (siw *ServerInterfaceWrapper) ListCertificatesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCertificatesV1(c, namespaceID)
}

// GetPolicyCertEnrollV1 operation middleware
func (siw *ServerInterfaceWrapper) GetPolicyCertEnrollV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPolicyCertEnrollV1(c, namespaceID)
}

// PutPolicyCertEnrollV1 operation middleware
func (siw *ServerInterfaceWrapper) PutPolicyCertEnrollV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPolicyCertEnrollV1(c, namespaceID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/:namespaceId/certificate", wrapper.CreateCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificate/:id", wrapper.GetCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificates", wrapper.ListCertificatesV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/policy/cert-enrollment", wrapper.GetPolicyCertEnrollV1)
	router.PUT(options.BaseURL+"/v1/:namespaceId/policy/cert-enrollment", wrapper.PutPolicyCertEnrollV1)
}
