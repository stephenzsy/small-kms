// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package admin

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CertificateUsage.
const (
	UsageClient CertificateUsage = "client"
	UsageIntCA  CertificateUsage = "intermediate-ca"
	UsageRootCA CertificateUsage = "root-ca"
	UsageServer CertificateUsage = "server"
)

// Defines values for KeyPropertiesCrv.
const (
	EcCurveP256 KeyPropertiesCrv = "P-256"
	EcCurveP384 KeyPropertiesCrv = "P-384"
)

// Defines values for KeyPropertiesKeySize.
const (
	KeySize2048 KeyPropertiesKeySize = 2048
	KeySize3072 KeyPropertiesKeySize = 3072
	KeySize4096 KeyPropertiesKeySize = 4096
)

// Defines values for KeyPropertiesKty.
const (
	KtyEC  KeyPropertiesKty = "EC"
	KtyRSA KeyPropertiesKty = "RSA"
)

// Defines values for PolicyType.
const (
	PolicyTypeCertIssue   PolicyType = "certIssue"
	PolicyTypeCertRequest PolicyType = "certRequest"
)

// Defines values for TestNamespaceId.
const (
	N00000001000000000000100000000001 TestNamespaceId = "00000001-0000-0000-0000-100000000001"
	TestNamespaceIDStrRootCA          TestNamespaceId = "00000001-0000-0000-0000-000000000001"
)

// Defines values for WellKnownNamespaceIDStr.
const (
	WellKnownNamespaceIDStrCertsInfra    WellKnownNamespaceIDStr = "00000000-0000-0000-0001-000000000010"
	WellKnownNamespaceIDStrCertsService  WellKnownNamespaceIDStr = "00000000-0000-0000-0001-000000000011"
	WellKnownNamespaceIDStrIntCAInfra    WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000010"
	WellKnownNamespaceIDStrIntCAIntranet WellKnownNamespaceIDStr = "00000000-0000-0000-0000-100000000001"
	WellKnownNamespaceIDStrIntCAService  WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000011"
	WellKnownNamespaceIDStrRootCA        WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000001"
)

// Defines values for GetCertificateV1ParamsAccept.
const (
	AcceptJson       GetCertificateV1ParamsAccept = "application/json"
	AcceptPem        GetCertificateV1ParamsAccept = "application/x-pem-file"
	AcceptX509CaCert GetCertificateV1ParamsAccept = "application/x-x509-ca-cert"
)

// CertificateIssurancePolicyParameters defines model for CertificateIssurancePolicyParameters.
type CertificateIssurancePolicyParameters struct {
	AllowedKeyProperties *[]KeyProperties     `json:"allowedKeyProperties,omitempty"`
	AllowedNamespaceIDs  []openapi_types.UUID `json:"allowedNamespaceIds"`
	AllowedUsages        []CertificateUsage   `json:"allowedUsages"`

	// IssuerId ID of the current issuer certificate
	IssuerID    openapi_types.UUID `json:"issuerId"`
	MaxValidity DurationSpec       `json:"maxValidity"`
}

// CertificateRef defines model for CertificateRef.
type CertificateRef struct {
	// CreatedBy Unique ID of the user who created the certificate
	CreatedBy string `json:"createdBy"`

	// Id Unique ID of the certificate, also the serial number of the certificate
	ID openapi_types.UUID `json:"id"`

	// Issuer Issuer of the certificate
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer of the certificate
	IssuerNamespace openapi_types.UUID `json:"issuerNamespace"`

	// Name Name of the certificate, also the common name (CN) of the certificate
	Name string `json:"name"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time        `json:"notAfter"`
	Usage    CertificateUsage `json:"usage"`
}

// CertificateRequestPolicyParameters defines model for CertificateRequestPolicyParameters.
type CertificateRequestPolicyParameters struct {
	// AutoRenewalThreshold Number of days left to trigger renewal, (0, 1) range indicates percentage
	AutoRenewalThreshold *float32 `json:"autoRenewalThreshold,omitempty"`

	// IssuerNamespaceId ID of the issuer namespace
	IssuerNamespaceID       openapi_types.UUID                  `json:"issuerNamespaceId"`
	KeyProperties           *KeyProperties                      `json:"keyProperties,omitempty"`
	KeyStorePath            string                              `json:"keyStorePath"`
	Subject                 CertificateSubject                  `json:"subject"`
	SubjectAlternativeNames *CertificateSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty"`
	Usage                   CertificateUsage                    `json:"usage"`
	ValidityInMonths        *int                                `json:"validity_months,omitempty"`
}

// CertificateSubject defines model for CertificateSubject.
type CertificateSubject struct {
	// C Country or region
	C *string `json:"c,omitempty"`

	// Cn Common name
	CN string `json:"cn"`

	// O Organization
	O *string `json:"o,omitempty"`

	// Ou Organizational unit
	OU *string `json:"ou,omitempty"`
}

// CertificateSubjectAlternativeNames defines model for CertificateSubjectAlternativeNames.
type CertificateSubjectAlternativeNames struct {
	DNSNames           *[]string `json:"dns_names,omitempty"`
	Emails             *[]string `json:"emails,omitempty"`
	UserPrincipalNames *[]string `json:"upns,omitempty"`
}

// CertificateUsage defines model for CertificateUsage.
type CertificateUsage string

// CreateCertificateOptions defines model for CreateCertificateOptions.
type CreateCertificateOptions struct {
	// KeepKeyVersion Keep using the same key version if exists
	KeepKeyVersion *bool `json:"keepKeyVersion,omitempty"`

	// NewKeyName Create new key name instead of a new version if exists
	NewKeyName *bool `json:"newKeyName,omitempty"`
}

// CreateCertificateParameters defines model for CreateCertificateParameters.
type CreateCertificateParameters struct {
	// Issuer Issuer of the certificate
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer of the certificate
	IssuerNamespace openapi_types.UUID        `json:"issuerNamespace"`
	Options         *CreateCertificateOptions `json:"options,omitempty"`
	Subject         CertificateSubject        `json:"subject"`
	Usage           CertificateUsage          `json:"usage"`
	Validity        *string                   `json:"validity,omitempty"`
}

// DurationSpec defines model for DurationSpec.
type DurationSpec struct {
	Days   int32 `json:"days"`
	Months int32 `json:"months"`
	Years  int32 `json:"years"`
}

// KeyProperties defines model for KeyProperties.
type KeyProperties struct {
	CurveName *KeyPropertiesCrv     `json:"crv,omitempty"`
	KeySize   *KeyPropertiesKeySize `json:"key_size,omitempty"`
	KeyType   KeyPropertiesKty      `json:"kty"`

	// ReuseKey Keep using the same key version if exists
	ReuseKey *bool `json:"reuse_key,omitempty"`
}

// KeyPropertiesCrv defines model for KeyProperties.Crv.
type KeyPropertiesCrv string

// KeyPropertiesKeySize defines model for KeyProperties.KeySize.
type KeyPropertiesKeySize int32

// KeyPropertiesKty defines model for KeyProperties.Kty.
type KeyPropertiesKty string

// Policy defines model for Policy.
type Policy struct {
	CertIssue   *CertificateIssurancePolicyParameters `json:"certIssue,omitempty"`
	CertRequest *CertificateRequestPolicyParameters   `json:"certRequest,omitempty"`
	ID          openapi_types.UUID                    `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	Type        PolicyType         `json:"type"`

	// UpdatedAt Time when the policy was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// PolicyParameters defines model for PolicyParameters.
type PolicyParameters struct {
	CertIssue   *CertificateIssurancePolicyParameters `json:"certIssue,omitempty"`
	CertRequest *CertificateRequestPolicyParameters   `json:"certRequest,omitempty"`
	Type        PolicyType                            `json:"type"`
}

// PolicyRef defines model for PolicyRef.
type PolicyRef struct {
	ID openapi_types.UUID `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	Type        PolicyType         `json:"type"`

	// UpdatedAt Time when the policy was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// PolicyType defines model for PolicyType.
type PolicyType string

// TestNamespaceId defines model for TestNamespaceId.
type TestNamespaceId string

// WellKnownNamespaceIDStr defines model for WellKnownNamespaceId.
type WellKnownNamespaceIDStr string

// GetCertificateV1Params defines parameters for GetCertificateV1.
type GetCertificateV1Params struct {
	Accept *GetCertificateV1ParamsAccept `json:"Accept,omitempty"`
}

// GetCertificateV1ParamsAccept defines parameters for GetCertificateV1.
type GetCertificateV1ParamsAccept string

// CreateCertificateV1JSONRequestBody defines body for CreateCertificateV1 for application/json ContentType.
type CreateCertificateV1JSONRequestBody = CreateCertificateParameters

// PutPolicyV1JSONRequestBody defines body for PutPolicyV1 for application/json ContentType.
type PutPolicyV1JSONRequestBody = PolicyParameters

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List certificates
	// (GET /v1/{namespaceId}/certificates)
	ListCertificatesV1(c *gin.Context, namespaceId openapi_types.UUID)
	// Create certificate
	// (POST /v1/{namespaceId}/certificates)
	CreateCertificateV1(c *gin.Context, namespaceId openapi_types.UUID)
	// Get certificate
	// (GET /v1/{namespaceId}/certificates/{id})
	GetCertificateV1(c *gin.Context, namespaceId openapi_types.UUID, id openapi_types.UUID, params GetCertificateV1Params)
	// Get Certificate Policy
	// (GET /v1/{namespaceId}/policies/{policyId})
	GetPolicyV1(c *gin.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID)
	// Put Policy
	// (PUT /v1/{namespaceId}/policies/{policyId})
	PutPolicyV1(c *gin.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListCertificatesV1 operation middleware
func (siw *ServerInterfaceWrapper) ListCertificatesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCertificatesV1(c, namespaceId)
}

// CreateCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCertificateV1(c, namespaceId)
}

// GetCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) GetCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateV1Params

	headers := c.Request.Header

	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept GetCertificateV1ParamsAccept
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, valueList[0], &Accept)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept: %w", err), http.StatusBadRequest)
			return
		}

		params.Accept = &Accept

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCertificateV1(c, namespaceId, id, params)
}

// GetPolicyV1 operation middleware
func (siw *ServerInterfaceWrapper) GetPolicyV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyId" -------------
	var policyId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "policyId", c.Param("policyId"), &policyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPolicyV1(c, namespaceId, policyId)
}

// PutPolicyV1 operation middleware
func (siw *ServerInterfaceWrapper) PutPolicyV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyId" -------------
	var policyId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "policyId", c.Param("policyId"), &policyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPolicyV1(c, namespaceId, policyId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/:namespaceId/certificates", wrapper.ListCertificatesV1)
	router.POST(options.BaseURL+"/v1/:namespaceId/certificates", wrapper.CreateCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificates/:id", wrapper.GetCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/policies/:policyId", wrapper.GetPolicyV1)
	router.PUT(options.BaseURL+"/v1/:namespaceId/policies/:policyId", wrapper.PutPolicyV1)
}
