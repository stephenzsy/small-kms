// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package admin

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CertificateUsage.
const (
	UsageClient CertificateUsage = "client"
	UsageIntCA  CertificateUsage = "intermediate-ca"
	UsageRootCA CertificateUsage = "root-ca"
	UsageServer CertificateUsage = "server"
)

// Defines values for CreateCertificateParametersCurve.
const (
	EcCurveP256 CreateCertificateParametersCurve = "P-256"
	EcCurveP384 CreateCertificateParametersCurve = "P-384"
)

// Defines values for CreateCertificateParametersKty.
const (
	KtyEC  CreateCertificateParametersKty = "EC"
	KtyRSA CreateCertificateParametersKty = "RSA"
)

// Defines values for CreateCertificateParametersSize.
const (
	KeySize2048 CreateCertificateParametersSize = 2048
	KeySize3072 CreateCertificateParametersSize = 3072
	KeySize4096 CreateCertificateParametersSize = 4096
)

// Defines values for WellKnownNamespaceIDStr.
const (
	WellKnownNamespaceIDStrCertsInfra   WellKnownNamespaceIDStr = "00000000-0000-0000-0001-000000000010"
	WellKnownNamespaceIDStrCertsService WellKnownNamespaceIDStr = "00000000-0000-0000-0001-000000000011"
	WellKnownNamespaceIDStrIntCAClient  WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000012"
	WellKnownNamespaceIDStrIntCAInfra   WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000010"
	WellKnownNamespaceIDStrIntCAService WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000011"
	WellKnownNamespaceIDStrRootCA       WellKnownNamespaceIDStr = "00000000-0000-0000-0000-000000000001"
)

// Defines values for GetCertificateV1ParamsAccept.
const (
	AcceptJson       GetCertificateV1ParamsAccept = "application/json"
	AcceptPem        GetCertificateV1ParamsAccept = "application/x-pem-file"
	AcceptX509CaCert GetCertificateV1ParamsAccept = "application/x-x509-ca-cert"
)

// CertificateRef defines model for CertificateRef.
type CertificateRef struct {
	// CreatedBy Unique ID of the user who created the certificate
	CreatedBy string `json:"createdBy"`

	// Id Unique ID of the certificate, also the serial number of the certificate
	ID openapi_types.UUID `json:"id"`

	// Issuer Issuer of the certificate
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer of the certificate
	IssuerNamespace openapi_types.UUID `json:"issuerNamespace"`

	// Name Name of the certificate, also the common name (CN) of the certificate
	Name string `json:"name"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time        `json:"notAfter"`
	Usage    CertificateUsage `json:"usage"`
}

// CertificateSubject defines model for CertificateSubject.
type CertificateSubject struct {
	// C Country or region
	C *string `json:"c,omitempty"`

	// Cn Common name
	CN string `json:"cn"`

	// O Organization
	O *string `json:"o,omitempty"`

	// Ou Organizational unit
	OU *string `json:"ou,omitempty"`
}

// CertificateUsage defines model for CertificateUsage.
type CertificateUsage string

// CreateCertificateOptions defines model for CreateCertificateOptions.
type CreateCertificateOptions struct {
	// KeepKeyVersion Keep using the same key version if exists
	KeepKeyVersion *bool `json:"keepKeyVersion,omitempty"`

	// NewKeyName Create new key name instead of a new version if exists
	NewKeyName *bool `json:"newKeyName,omitempty"`
}

// CreateCertificateParameters defines model for CreateCertificateParameters.
type CreateCertificateParameters struct {
	Curve *CreateCertificateParametersCurve `json:"curve,omitempty"`

	// Issuer Issuer of the certificate
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer of the certificate
	IssuerNamespace openapi_types.UUID               `json:"issuerNamespace"`
	Kty             *CreateCertificateParametersKty  `json:"kty,omitempty"`
	Options         *CreateCertificateOptions        `json:"options,omitempty"`
	Size            *CreateCertificateParametersSize `json:"size,omitempty"`
	Subject         CertificateSubject               `json:"subject"`
	Usage           CertificateUsage                 `json:"usage"`
	Validity        *string                          `json:"validity,omitempty"`
}

// CreateCertificateParametersCurve defines model for CreateCertificateParameters.Curve.
type CreateCertificateParametersCurve string

// CreateCertificateParametersKty defines model for CreateCertificateParameters.Kty.
type CreateCertificateParametersKty string

// CreateCertificateParametersSize defines model for CreateCertificateParameters.Size.
type CreateCertificateParametersSize int32

// WellKnownNamespaceIDStr defines model for WellKnownNamespaceId.
type WellKnownNamespaceIDStr string

// NamespaceID defines model for namespaceId.
type NamespaceID = openapi_types.UUID

// GetCertificateV1Params defines parameters for GetCertificateV1.
type GetCertificateV1Params struct {
	Accept *GetCertificateV1ParamsAccept `json:"Accept,omitempty"`
}

// GetCertificateV1ParamsAccept defines parameters for GetCertificateV1.
type GetCertificateV1ParamsAccept string

// CreateCertificateV1JSONRequestBody defines body for CreateCertificateV1 for application/json ContentType.
type CreateCertificateV1JSONRequestBody = CreateCertificateParameters

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create certificate
	// (POST /v1/{namespaceId}/certificate)
	CreateCertificateV1(c *gin.Context, namespaceID NamespaceID)
	// Get certificate
	// (GET /v1/{namespaceId}/certificate/{id})
	GetCertificateV1(c *gin.Context, namespaceID NamespaceID, id openapi_types.UUID, params GetCertificateV1Params)
	// List certificates
	// (GET /v1/{namespaceId}/certificates)
	ListCertificatesV1(c *gin.Context, namespaceID NamespaceID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCertificateV1(c, namespaceID)
}

// GetCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) GetCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateV1Params

	headers := c.Request.Header

	// ------------- Optional header parameter "Accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept")]; found {
		var Accept GetCertificateV1ParamsAccept
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, valueList[0], &Accept)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept: %w", err), http.StatusBadRequest)
			return
		}

		params.Accept = &Accept

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCertificateV1(c, namespaceID, id, params)
}

// ListCertificatesV1 operation middleware
func (siw *ServerInterfaceWrapper) ListCertificatesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceID NamespaceID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCertificatesV1(c, namespaceID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/:namespaceId/certificate", wrapper.CreateCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificate/:id", wrapper.GetCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificates", wrapper.ListCertificatesV1)
}
