// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package admin

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CertificateIdentifierType.
const (
	CertIdTypeCertId   CertificateIdentifierType = "certId"
	CertIdTypePolicyId CertificateIdentifierType = "policyId"
)

// Defines values for CertificateUsage.
const (
	UsageClientOnly      CertificateUsage = "client-only"
	UsageIntCA           CertificateUsage = "intermediate-ca"
	UsageRootCA          CertificateUsage = "root-ca"
	UsageServerAndClient CertificateUsage = "server-and-client"
	UsageServerOnly      CertificateUsage = "server-only"
)

// Defines values for CurveName.
const (
	CurveNameP256 CurveName = "P-256"
	CurveNameP384 CurveName = "P-384"
)

// Defines values for KeyPropertiesKeySize.
const (
	KeySize2048 KeyPropertiesKeySize = 2048
	KeySize3072 KeyPropertiesKeySize = 3072
	KeySize4096 KeyPropertiesKeySize = 4096
)

// Defines values for KeyType.
const (
	KeyTypeEC  KeyType = "EC"
	KeyTypeRSA KeyType = "RSA"
)

// Defines values for NamespacePermissionKey.
const (
	AllowEnrollDeviceCertificate NamespacePermissionKey = "allowEnrollDeviceCertificate"
)

// Defines values for NamespaceType.
const (
	NamespaceTypeBuiltInCaInt            NamespaceType = "#builtin.ca.intermediate"
	NamespaceTypeBuiltInCaRoot           NamespaceType = "#builtin.ca.root"
	NamespaceTypeMsGraphApplication      NamespaceType = "#microsoft.graph.application"
	NamespaceTypeMsGraphDevice           NamespaceType = "#microsoft.graph.device"
	NamespaceTypeMsGraphGroup            NamespaceType = "#microsoft.graph.group"
	NamespaceTypeMsGraphServicePrincipal NamespaceType = "#microsoft.graph.servicePrincipal"
	NamespaceTypeMsGraphUser             NamespaceType = "#microsoft.graph.user"
)

// Defines values for PolicyType.
const (
	PolicyTypeCertAadAppClientCredential  PolicyType = "certAadAppCred"
	PolicyTypeCertEnrollGroupMemberDevice PolicyType = "certEnroll-groupMemberDevice"
	PolicyTypeCertRequest                 PolicyType = "certRequest"
)

// Defines values for GetCertificateV1ParamsFormat.
const (
	FormatJWK GetCertificateV1ParamsFormat = "jwk"
	FormatPEM GetCertificateV1ParamsFormat = "pem"
)

// ApplyPolicyRequest defines model for ApplyPolicyRequest.
type ApplyPolicyRequest struct {
	// CheckConsistency Check consistency of the policy
	CheckConsistency *bool `json:"checkConsistency,omitempty"`

	// ForceRenewCertificate Force certificate renewal
	ForceRenewCertificate *bool `json:"forceRenewCertificate,omitempty"`
}

// CertificateAadAppCredPolicyParameters defines model for CertificateAadAppCredPolicyParameters.
type CertificateAadAppCredPolicyParameters struct {
	CertificateIdentifier CertificateIdentifier `json:"certificateIdentifier"`
}

// CertificateEnrollPolicyParameters defines model for CertificateEnrollPolicyParameters.
type CertificateEnrollPolicyParameters = CertificateIssuerParameters

// CertificateEnrollRequest defines model for CertificateEnrollRequest.
type CertificateEnrollRequest struct {
	// DeviceOwnerId Required to issue certificate to device with registered owner
	DeviceOwnerID     *openapi_types.UUID `json:"deviceOwnerId,omitempty"`
	OwnerNamespaceID  openapi_types.UUID  `json:"ownerNamespaceId"`
	PolicyNamespaceID *openapi_types.UUID `json:"policyNamespaceId,omitempty"`

	// PublicKey Partial implementation of JSON Web Key (RFC 7517)
	PublicKey JSONWebKey `json:"publicKey"`
}

// CertificateIdentifier defines model for CertificateIdentifier.
type CertificateIdentifier struct {
	// Id ID of the issuer namespace
	ID   openapi_types.UUID         `json:"id"`
	Type *CertificateIdentifierType `json:"type,omitempty"`
}

// CertificateIdentifierType defines model for CertificateIdentifierType.
type CertificateIdentifierType string

// CertificateIssuerParameters defines model for CertificateIssuerParameters.
type CertificateIssuerParameters struct {
	// IssuerNamespaceId ID of the issuer namespace
	IssuerNamespaceID openapi_types.UUID `json:"issuerNamespaceId"`

	// IssuerPolicyIdentifier ID of the issuer policy
	IssuerPolicyIdentifier *string `json:"issuerPolicyIdentifier,omitempty"`
	ValidityInMonths       *int32  `json:"validity_months,omitempty"`
}

// CertificateLifetimeTrigger defines model for CertificateLifetimeTrigger.
type CertificateLifetimeTrigger struct {
	DaysBeforeExpiry   *int32 `json:"days_before_expiry,omitempty"`
	LifetimePercentage *int32 `json:"lifetime_percentage,omitempty"`
}

// CertificateRef defines model for CertificateRef.
type CertificateRef struct {
	// CreatedBy Unique ID of the user who created the certificate
	CreatedBy string `json:"createdBy"`

	// Deleted Time when the policy was deleted
	Deleted *time.Time         `json:"deleted,omitempty"`
	ID      openapi_types.UUID `json:"id"`

	// Issuer Issuer certificate ID
	Issuer openapi_types.UUID `json:"issuer"`

	// IssuerNamespace Issuer namespace ID
	IssuerNamespace openapi_types.UUID `json:"issuerNamespace"`

	// Name Name of the certificate, also the common name (CN) in the subject of the certificate
	Name string `json:"name"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// NotAfter Expiration date of the certificate
	NotAfter time.Time `json:"notAfter"`

	// Pem PEM encoded certificate chain
	Pem *string `json:"pem,omitempty"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string           `json:"updatedBy"`
	Usage     CertificateUsage `json:"usage"`

	// X5c X.509 certificate chain
	X5c *[][]byte `json:"x5c,omitempty"`

	// X5t X.509 certificate thumbprint
	X5t *[]byte `json:"x5t,omitempty"`
}

// CertificateRequestPolicyParameters defines model for CertificateRequestPolicyParameters.
type CertificateRequestPolicyParameters struct {
	// IssuerNamespaceId ID of the issuer namespace
	IssuerNamespaceID openapi_types.UUID `json:"issuerNamespaceId"`

	// IssuerPolicyIdentifier ID of the issuer policy
	IssuerPolicyIdentifier  *string                             `json:"issuerPolicyIdentifier,omitempty"`
	KeyProperties           *KeyProperties                      `json:"keyProperties,omitempty"`
	KeyStorePath            string                              `json:"keyStorePath"`
	LifetimeTrigger         *CertificateLifetimeTrigger         `json:"lifetimeTrigger,omitempty"`
	Subject                 CertificateSubject                  `json:"subject"`
	SubjectAlternativeNames *CertificateSubjectAlternativeNames `json:"subjectAlternativeNames,omitempty"`
	Usage                   CertificateUsage                    `json:"usage"`
	ValidityInMonths        *int32                              `json:"validity_months,omitempty"`
}

// CertificateSubject defines model for CertificateSubject.
type CertificateSubject struct {
	// C Country or region
	C *string `json:"c,omitempty"`

	// Cn Common name
	CN string `json:"cn"`

	// O Organization
	O *string `json:"o,omitempty"`

	// Ou Organizational unit
	OU *string `json:"ou,omitempty"`
}

// CertificateSubjectAlternativeNames defines model for CertificateSubjectAlternativeNames.
type CertificateSubjectAlternativeNames struct {
	DNSNames           *[]string `json:"dns_names,omitempty"`
	Emails             *[]string `json:"emails,omitempty"`
	UserPrincipalNames *[]string `json:"upns,omitempty"`
}

// CertificateUsage defines model for CertificateUsage.
type CertificateUsage string

// CurveName defines model for CurveName.
type CurveName string

// JSONWebKey Partial implementation of JSON Web Key (RFC 7517)
type JSONWebKey struct {
	Crv *CurveName `json:"crv,omitempty"`
	E   *[]byte    `json:"e,omitempty"`
	Kty KeyType    `json:"kty"`
	N   *[]byte    `json:"n,omitempty"`
	X   *[]byte    `json:"x,omitempty"`
	Y   *[]byte    `json:"y,omitempty"`
}

// KeyProperties defines model for KeyProperties.
type KeyProperties struct {
	Crv     *CurveName            `json:"crv,omitempty"`
	KeySize *KeyPropertiesKeySize `json:"key_size,omitempty"`
	Kty     KeyType               `json:"kty"`

	// ReuseKey Keep using the same key version if exists
	ReuseKey *bool `json:"reuse_key,omitempty"`
}

// KeyPropertiesKeySize defines model for KeyProperties.KeySize.
type KeyPropertiesKeySize int32

// KeyType defines model for KeyType.
type KeyType string

// NamespacePermissionKey defines model for NamespacePermissionKey.
type NamespacePermissionKey string

// NamespacePermissions defines model for NamespacePermissions.
type NamespacePermissions struct {
	AllowEnrollDeviceCertificate *bool `json:"allowEnrollDeviceCertificate,omitempty"`
}

// NamespaceProfile defines model for NamespaceProfile.
type NamespaceProfile struct {
	// AppId \#microsoft.graph.application appId
	AppID *string `json:"appId,omitempty"`

	// Deleted Time when the policy was deleted
	Deleted *time.Time `json:"deleted,omitempty"`

	// DeviceId \#microsoft.graph.device deviceId
	DeviceID        *string            `json:"deviceId,omitempty"`
	DeviceOwnership *string            `json:"deviceOwnership,omitempty"`
	DisplayName     string             `json:"displayName"`
	ID              openapi_types.UUID `json:"id"`

	// IsCompliant \#microsoft.graph.device isCompliant
	IsCompliant *bool `json:"isCompliant,omitempty"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	ObjectType  NamespaceType      `json:"objectType"`

	// OperatingSystem \#microsoft.graph.device operatingSystem
	OperatingSystem *string `json:"operatingSystem,omitempty"`

	// OperatingSystemVersion \#microsoft.graph.device operatingSystemVersion
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty"`
	ServicePrincipalType   *string `json:"servicePrincipalType,omitempty"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy         string  `json:"updatedBy"`
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
}

// NamespaceRef defines model for NamespaceRef.
type NamespaceRef struct {
	// Deleted Time when the policy was deleted
	Deleted     *time.Time         `json:"deleted,omitempty"`
	DisplayName string             `json:"displayName"`
	ID          openapi_types.UUID `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	ObjectType  NamespaceType      `json:"objectType"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// NamespaceType defines model for NamespaceType.
type NamespaceType string

// Policy defines model for Policy.
type Policy struct {
	CertAadAppCred *CertificateAadAppCredPolicyParameters `json:"certAadAppCred,omitempty"`
	CertEnroll     *CertificateEnrollPolicyParameters     `json:"certEnroll,omitempty"`
	CertRequest    *CertificateRequestPolicyParameters    `json:"certRequest,omitempty"`

	// Deleted Time when the policy was deleted
	Deleted *time.Time         `json:"deleted,omitempty"`
	ID      openapi_types.UUID `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	PolicyType  PolicyType         `json:"policyType"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// PolicyParameters defines model for PolicyParameters.
type PolicyParameters struct {
	CertAadAppCred *CertificateAadAppCredPolicyParameters `json:"certAadAppCred,omitempty"`
	CertEnroll     *CertificateEnrollPolicyParameters     `json:"certEnroll,omitempty"`
	CertRequest    *CertificateRequestPolicyParameters    `json:"certRequest,omitempty"`
	PolicyType     PolicyType                             `json:"policyType"`
}

// PolicyRef defines model for PolicyRef.
type PolicyRef struct {
	// Deleted Time when the policy was deleted
	Deleted *time.Time         `json:"deleted,omitempty"`
	ID      openapi_types.UUID `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	PolicyType  PolicyType         `json:"policyType"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// PolicyState defines model for PolicyState.
type PolicyState struct {
	CertRequest *PolicyStateCertRequest `json:"certRequest,omitempty"`

	// Deleted Time when the policy was deleted
	Deleted *time.Time         `json:"deleted,omitempty"`
	ID      openapi_types.UUID `json:"id"`
	Message string             `json:"message"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`
	PolicyType  PolicyType         `json:"policyType"`
	Status      *string            `json:"status,omitempty"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// PolicyStateCertRequest defines model for PolicyStateCertRequest.
type PolicyStateCertRequest struct {
	LastAction      string             `json:"lastAction"`
	LastCertExpires time.Time          `json:"lastCertExpires"`
	LastCertID      openapi_types.UUID `json:"lastCertId"`
	LastCertIssued  time.Time          `json:"lastCertIssued"`
}

// PolicyType defines model for PolicyType.
type PolicyType string

// RequestDiagnostics defines model for RequestDiagnostics.
type RequestDiagnostics struct {
	RequestHeaders []RequestHeaderEntry              `json:"requestHeaders"`
	ServiceRuntime RequestDiagnostics_ServiceRuntime `json:"serviceRuntime"`
}

// RequestDiagnostics_ServiceRuntime defines model for RequestDiagnostics.ServiceRuntime.
type RequestDiagnostics_ServiceRuntime struct {
	GoVersion            string            `json:"goVersion"`
	AdditionalProperties map[string]string `json:"-"`
}

// RequestHeaderEntry defines model for RequestHeaderEntry.
type RequestHeaderEntry struct {
	Key   string   `json:"key"`
	Value []string `json:"value"`
}

// ResourceRef defines model for ResourceRef.
type ResourceRef struct {
	// Deleted Time when the policy was deleted
	Deleted *time.Time         `json:"deleted,omitempty"`
	ID      openapi_types.UUID `json:"id"`

	// NamespaceId Unique ID of the namespace
	NamespaceID openapi_types.UUID `json:"namespaceId"`

	// Updated Time when the policy was last updated
	Updated time.Time `json:"updated"`

	// UpdatedBy Unique ID of the user who created the policy
	UpdatedBy string `json:"updatedBy"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code                 *string                `json:"code,omitempty"`
	Message              *string                `json:"message,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ListCertificatesV1Params defines parameters for ListCertificatesV1.
type ListCertificatesV1Params struct {
	PolicyId *openapi_types.UUID `form:"policyId,omitempty" json:"policyId,omitempty"`
}

// GetCertificateV1Params defines parameters for GetCertificateV1.
type GetCertificateV1Params struct {
	ByType *CertificateIdentifierType    `form:"byType,omitempty" json:"byType,omitempty"`
	Format *GetCertificateV1ParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetCertificateV1ParamsFormat defines parameters for GetCertificateV1.
type GetCertificateV1ParamsFormat string

// DeletePolicyV1Params defines parameters for DeletePolicyV1.
type DeletePolicyV1Params struct {
	Purge *bool `form:"purge,omitempty" json:"purge,omitempty"`
}

// EnrollCertificateV1JSONRequestBody defines body for EnrollCertificateV1 for application/json ContentType.
type EnrollCertificateV1JSONRequestBody = CertificateEnrollRequest

// PutPermissionsV1JSONRequestBody defines body for PutPermissionsV1 for application/json ContentType.
type PutPermissionsV1JSONRequestBody = NamespacePermissions

// PutPolicyV1JSONRequestBody defines body for PutPolicyV1 for application/json ContentType.
type PutPolicyV1JSONRequestBody = PolicyParameters

// ApplyPolicyV1JSONRequestBody defines body for ApplyPolicyV1 for application/json ContentType.
type ApplyPolicyV1JSONRequestBody = ApplyPolicyRequest

// Getter for additional properties for RequestDiagnostics_ServiceRuntime. Returns the specified
// element and whether it was found
func (a RequestDiagnostics_ServiceRuntime) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestDiagnostics_ServiceRuntime
func (a *RequestDiagnostics_ServiceRuntime) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestDiagnostics_ServiceRuntime to handle AdditionalProperties
func (a *RequestDiagnostics_ServiceRuntime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["goVersion"]; found {
		err = json.Unmarshal(raw, &a.GoVersion)
		if err != nil {
			return fmt.Errorf("error reading 'goVersion': %w", err)
		}
		delete(object, "goVersion")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestDiagnostics_ServiceRuntime to handle AdditionalProperties
func (a RequestDiagnostics_ServiceRuntime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["goVersion"], err = json.Marshal(a.GoVersion)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'goVersion': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorResponse. Returns the specified
// element and whether it was found
func (a ErrorResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorResponse
func (a *ErrorResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorResponse to handle AdditionalProperties
func (a *ErrorResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &a.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
		delete(object, "code")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorResponse to handle AdditionalProperties
func (a ErrorResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Code != nil {
		object["code"], err = json.Marshal(a.Code)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'code': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enroll certificate
	// (POST /v1/certificates/enroll)
	EnrollCertificateV1(c *gin.Context)
	// Get diagnostics
	// (GET /v1/diagnostics)
	GetDiagnosticsV1(c *gin.Context)
	// My Has permission
	// (GET /v1/my/hasPermission/{permissionKey})
	MyHasPermissionV1(c *gin.Context, permissionKey NamespacePermissionKey)
	// Get my profiles
	// (GET /v1/my/profiles)
	GetMyProfilesV1(c *gin.Context)
	// Sync my profiles
	// (POST /v1/my/profiles)
	SyncMyProfilesV1(c *gin.Context)
	// List namespaces
	// (GET /v1/namespaces/{namespaceType})
	ListNamespacesV1(c *gin.Context, namespaceType NamespaceType)
	// List certificates
	// (GET /v1/{namespaceId}/certificates)
	ListCertificatesV1(c *gin.Context, namespaceId openapi_types.UUID, params ListCertificatesV1Params)
	// Get certificate
	// (GET /v1/{namespaceId}/certificates/{id})
	GetCertificateV1(c *gin.Context, namespaceId openapi_types.UUID, id openapi_types.UUID, params GetCertificateV1Params)
	// Has permission
	// (GET /v1/{namespaceId}/hasPermission/{permissionKey})
	HasPermissionV1(c *gin.Context, namespaceId openapi_types.UUID, permissionKey NamespacePermissionKey)
	// Put permissions
	// (PUT /v1/{namespaceId}/permissions/{objectId})
	PutPermissionsV1(c *gin.Context, namespaceId openapi_types.UUID, objectId openapi_types.UUID)
	// List policies
	// (GET /v1/{namespaceId}/policies)
	ListPoliciesV1(c *gin.Context, namespaceId openapi_types.UUID)
	// Delete Certificate Policy
	// (DELETE /v1/{namespaceId}/policies/{policyIdentifier})
	DeletePolicyV1(c *gin.Context, namespaceId openapi_types.UUID, policyIdentifier string, params DeletePolicyV1Params)
	// Get Certificate Policy
	// (GET /v1/{namespaceId}/policies/{policyIdentifier})
	GetPolicyV1(c *gin.Context, namespaceId openapi_types.UUID, policyIdentifier string)
	// Put Policy
	// (PUT /v1/{namespaceId}/policies/{policyIdentifier})
	PutPolicyV1(c *gin.Context, namespaceId openapi_types.UUID, policyIdentifier string)
	// Apply policy
	// (POST /v1/{namespaceId}/policies/{policyId}/apply)
	ApplyPolicyV1(c *gin.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID)
	// Get namespace profile
	// (GET /v1/{namespaceId}/profile)
	GetNamespaceProfileV1(c *gin.Context, namespaceId openapi_types.UUID)
	// Register namespace
	// (POST /v1/{namespaceId}/profile)
	RegisterNamespaceProfileV1(c *gin.Context, namespaceId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// EnrollCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) EnrollCertificateV1(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EnrollCertificateV1(c)
}

// GetDiagnosticsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetDiagnosticsV1(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagnosticsV1(c)
}

// MyHasPermissionV1 operation middleware
func (siw *ServerInterfaceWrapper) MyHasPermissionV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "permissionKey" -------------
	var permissionKey NamespacePermissionKey

	err = runtime.BindStyledParameter("simple", false, "permissionKey", c.Param("permissionKey"), &permissionKey)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permissionKey: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.MyHasPermissionV1(c, permissionKey)
}

// GetMyProfilesV1 operation middleware
func (siw *ServerInterfaceWrapper) GetMyProfilesV1(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMyProfilesV1(c)
}

// SyncMyProfilesV1 operation middleware
func (siw *ServerInterfaceWrapper) SyncMyProfilesV1(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SyncMyProfilesV1(c)
}

// ListNamespacesV1 operation middleware
func (siw *ServerInterfaceWrapper) ListNamespacesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceType" -------------
	var namespaceType NamespaceType

	err = runtime.BindStyledParameter("simple", false, "namespaceType", c.Param("namespaceType"), &namespaceType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceType: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListNamespacesV1(c, namespaceType)
}

// ListCertificatesV1 operation middleware
func (siw *ServerInterfaceWrapper) ListCertificatesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCertificatesV1Params

	// ------------- Optional query parameter "policyId" -------------

	err = runtime.BindQueryParameter("form", true, false, "policyId", c.Request.URL.Query(), &params.PolicyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCertificatesV1(c, namespaceId, params)
}

// GetCertificateV1 operation middleware
func (siw *ServerInterfaceWrapper) GetCertificateV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateV1Params

	// ------------- Optional query parameter "byType" -------------

	err = runtime.BindQueryParameter("form", true, false, "byType", c.Request.URL.Query(), &params.ByType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter byType: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCertificateV1(c, namespaceId, id, params)
}

// HasPermissionV1 operation middleware
func (siw *ServerInterfaceWrapper) HasPermissionV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "permissionKey" -------------
	var permissionKey NamespacePermissionKey

	err = runtime.BindStyledParameter("simple", false, "permissionKey", c.Param("permissionKey"), &permissionKey)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter permissionKey: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HasPermissionV1(c, namespaceId, permissionKey)
}

// PutPermissionsV1 operation middleware
func (siw *ServerInterfaceWrapper) PutPermissionsV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "objectId" -------------
	var objectId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "objectId", c.Param("objectId"), &objectId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter objectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPermissionsV1(c, namespaceId, objectId)
}

// ListPoliciesV1 operation middleware
func (siw *ServerInterfaceWrapper) ListPoliciesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPoliciesV1(c, namespaceId)
}

// DeletePolicyV1 operation middleware
func (siw *ServerInterfaceWrapper) DeletePolicyV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyIdentifier" -------------
	var policyIdentifier string

	err = runtime.BindStyledParameter("simple", false, "policyIdentifier", c.Param("policyIdentifier"), &policyIdentifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyIdentifier: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePolicyV1Params

	// ------------- Optional query parameter "purge" -------------

	err = runtime.BindQueryParameter("form", true, false, "purge", c.Request.URL.Query(), &params.Purge)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter purge: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePolicyV1(c, namespaceId, policyIdentifier, params)
}

// GetPolicyV1 operation middleware
func (siw *ServerInterfaceWrapper) GetPolicyV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyIdentifier" -------------
	var policyIdentifier string

	err = runtime.BindStyledParameter("simple", false, "policyIdentifier", c.Param("policyIdentifier"), &policyIdentifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyIdentifier: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPolicyV1(c, namespaceId, policyIdentifier)
}

// PutPolicyV1 operation middleware
func (siw *ServerInterfaceWrapper) PutPolicyV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyIdentifier" -------------
	var policyIdentifier string

	err = runtime.BindStyledParameter("simple", false, "policyIdentifier", c.Param("policyIdentifier"), &policyIdentifier)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyIdentifier: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPolicyV1(c, namespaceId, policyIdentifier)
}

// ApplyPolicyV1 operation middleware
func (siw *ServerInterfaceWrapper) ApplyPolicyV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "policyId" -------------
	var policyId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "policyId", c.Param("policyId"), &policyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter policyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ApplyPolicyV1(c, namespaceId, policyId)
}

// GetNamespaceProfileV1 operation middleware
func (siw *ServerInterfaceWrapper) GetNamespaceProfileV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNamespaceProfileV1(c, namespaceId)
}

// RegisterNamespaceProfileV1 operation middleware
func (siw *ServerInterfaceWrapper) RegisterNamespaceProfileV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "namespaceId", c.Param("namespaceId"), &namespaceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterNamespaceProfileV1(c, namespaceId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/certificates/enroll", wrapper.EnrollCertificateV1)
	router.GET(options.BaseURL+"/v1/diagnostics", wrapper.GetDiagnosticsV1)
	router.GET(options.BaseURL+"/v1/my/hasPermission/:permissionKey", wrapper.MyHasPermissionV1)
	router.GET(options.BaseURL+"/v1/my/profiles", wrapper.GetMyProfilesV1)
	router.POST(options.BaseURL+"/v1/my/profiles", wrapper.SyncMyProfilesV1)
	router.GET(options.BaseURL+"/v1/namespaces/:namespaceType", wrapper.ListNamespacesV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificates", wrapper.ListCertificatesV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/certificates/:id", wrapper.GetCertificateV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/hasPermission/:permissionKey", wrapper.HasPermissionV1)
	router.PUT(options.BaseURL+"/v1/:namespaceId/permissions/:objectId", wrapper.PutPermissionsV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/policies", wrapper.ListPoliciesV1)
	router.DELETE(options.BaseURL+"/v1/:namespaceId/policies/:policyIdentifier", wrapper.DeletePolicyV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/policies/:policyIdentifier", wrapper.GetPolicyV1)
	router.PUT(options.BaseURL+"/v1/:namespaceId/policies/:policyIdentifier", wrapper.PutPolicyV1)
	router.POST(options.BaseURL+"/v1/:namespaceId/policies/:policyId/apply", wrapper.ApplyPolicyV1)
	router.GET(options.BaseURL+"/v1/:namespaceId/profile", wrapper.GetNamespaceProfileV1)
	router.POST(options.BaseURL+"/v1/:namespaceId/profile", wrapper.RegisterNamespaceProfileV1)
}
