// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package admin

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// EnrollCertificateV1WithBody request with any body
	EnrollCertificateV1WithBody(ctx context.Context, targetId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnrollCertificateV1(ctx context.Context, targetId openapi_types.UUID, body EnrollCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiagnosticsV1 request
	GetDiagnosticsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyProfilesV1 request
	GetMyProfilesV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyncMyProfilesV1 request
	SyncMyProfilesV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNamespacesV1 request
	ListNamespacesV1(ctx context.Context, namespaceType NamespaceType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCertificatesV1 request
	ListCertificatesV1(ctx context.Context, namespaceId openapi_types.UUID, params *ListCertificatesV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateV1 request
	GetCertificateV1(ctx context.Context, namespaceId openapi_types.UUID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPoliciesV1 request
	ListPoliciesV1(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolicyV1 request
	DeletePolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, params *DeletePolicyV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicyV1 request
	GetPolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPolicyV1WithBody request with any body
	PutPolicyV1WithBody(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, body PutPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyPolicyV1WithBody request with any body
	ApplyPolicyV1WithBody(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplyPolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, body ApplyPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNamespaceProfileV1 request
	GetNamespaceProfileV1(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterNamespaceProfileV1 request
	RegisterNamespaceProfileV1(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceServicePrincipalLinkV2 request
	GetDeviceServicePrincipalLinkV2(ctx context.Context, namespaceId openapi_types.UUID, params *GetDeviceServicePrincipalLinkV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNamespacesByTypeV2 request
	ListNamespacesByTypeV2(ctx context.Context, namespaceType NamespaceTypeShortName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCertificateTemplatesV2 request
	ListCertificateTemplatesV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateTemplateV2 request
	GetCertificateTemplateV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCertificateTemplateV2WithBody request with any body
	PutCertificateTemplateV2WithBody(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCertificateTemplateV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, body PutCertificateTemplateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCertificatesV2 request
	ListCertificatesV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificateV2 request
	GetCertificateV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, certId openapi_types.UUID, params *GetCertificateV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyncNamespaceInfoV2 request
	SyncNamespaceInfoV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) EnrollCertificateV1WithBody(ctx context.Context, targetId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrollCertificateV1RequestWithBody(c.Server, targetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrollCertificateV1(ctx context.Context, targetId openapi_types.UUID, body EnrollCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrollCertificateV1Request(c.Server, targetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiagnosticsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiagnosticsV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyProfilesV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyProfilesV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncMyProfilesV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncMyProfilesV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNamespacesV1(ctx context.Context, namespaceType NamespaceType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNamespacesV1Request(c.Server, namespaceType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCertificatesV1(ctx context.Context, namespaceId openapi_types.UUID, params *ListCertificatesV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCertificatesV1Request(c.Server, namespaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateV1(ctx context.Context, namespaceId openapi_types.UUID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateV1Request(c.Server, namespaceId, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPoliciesV1(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPoliciesV1Request(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, params *DeletePolicyV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolicyV1Request(c.Server, namespaceId, policyIdentifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyV1Request(c.Server, namespaceId, policyIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicyV1WithBody(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyV1RequestWithBody(c.Server, namespaceId, policyIdentifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, body PutPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPolicyV1Request(c.Server, namespaceId, policyIdentifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyPolicyV1WithBody(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyPolicyV1RequestWithBody(c.Server, namespaceId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyPolicyV1(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, body ApplyPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyPolicyV1Request(c.Server, namespaceId, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNamespaceProfileV1(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNamespaceProfileV1Request(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterNamespaceProfileV1(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterNamespaceProfileV1Request(c.Server, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceServicePrincipalLinkV2(ctx context.Context, namespaceId openapi_types.UUID, params *GetDeviceServicePrincipalLinkV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceServicePrincipalLinkV2Request(c.Server, namespaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNamespacesByTypeV2(ctx context.Context, namespaceType NamespaceTypeShortName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNamespacesByTypeV2Request(c.Server, namespaceType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCertificateTemplatesV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCertificateTemplatesV2Request(c.Server, namespaceType, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateTemplateV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateTemplateV2Request(c.Server, namespaceType, namespaceId, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateTemplateV2WithBody(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateTemplateV2RequestWithBody(c.Server, namespaceType, namespaceId, templateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCertificateTemplateV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, body PutCertificateTemplateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCertificateTemplateV2Request(c.Server, namespaceType, namespaceId, templateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCertificatesV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCertificatesV2Request(c.Server, namespaceType, namespaceId, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificateV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, certId openapi_types.UUID, params *GetCertificateV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateV2Request(c.Server, namespaceType, namespaceId, templateId, certId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncNamespaceInfoV2(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncNamespaceInfoV2Request(c.Server, namespaceType, namespaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewEnrollCertificateV1Request calls the generic EnrollCertificateV1 builder with application/json body
func NewEnrollCertificateV1Request(server string, targetId openapi_types.UUID, body EnrollCertificateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnrollCertificateV1RequestWithBody(server, targetId, "application/json", bodyReader)
}

// NewEnrollCertificateV1RequestWithBody generates requests for EnrollCertificateV1 with any type of body
func NewEnrollCertificateV1RequestWithBody(server string, targetId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetId", runtime.ParamLocationPath, targetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/certificates/enroll/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDiagnosticsV1Request generates requests for GetDiagnosticsV1
func NewGetDiagnosticsV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/diagnostics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyProfilesV1Request generates requests for GetMyProfilesV1
func NewGetMyProfilesV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/my/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyncMyProfilesV1Request generates requests for SyncMyProfilesV1
func NewSyncMyProfilesV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/my/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNamespacesV1Request generates requests for ListNamespacesV1
func NewListNamespacesV1Request(server string, namespaceType NamespaceType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/namespaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCertificatesV1Request generates requests for ListCertificatesV1
func NewListCertificatesV1Request(server string, namespaceId openapi_types.UUID, params *ListCertificatesV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/certificates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyId", runtime.ParamLocationQuery, *params.PolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateV1Request generates requests for GetCertificateV1
func NewGetCertificateV1Request(server string, namespaceId openapi_types.UUID, id openapi_types.UUID, params *GetCertificateV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/certificates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ByType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byType", runtime.ParamLocationQuery, *params.ByType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPoliciesV1Request generates requests for ListPoliciesV1
func NewListPoliciesV1Request(server string, namespaceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePolicyV1Request generates requests for DeletePolicyV1
func NewDeletePolicyV1Request(server string, namespaceId openapi_types.UUID, policyIdentifier string, params *DeletePolicyV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyIdentifier", runtime.ParamLocationPath, policyIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Purge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purge", runtime.ParamLocationQuery, *params.Purge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyV1Request generates requests for GetPolicyV1
func NewGetPolicyV1Request(server string, namespaceId openapi_types.UUID, policyIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyIdentifier", runtime.ParamLocationPath, policyIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPolicyV1Request calls the generic PutPolicyV1 builder with application/json body
func NewPutPolicyV1Request(server string, namespaceId openapi_types.UUID, policyIdentifier string, body PutPolicyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPolicyV1RequestWithBody(server, namespaceId, policyIdentifier, "application/json", bodyReader)
}

// NewPutPolicyV1RequestWithBody generates requests for PutPolicyV1 with any type of body
func NewPutPolicyV1RequestWithBody(server string, namespaceId openapi_types.UUID, policyIdentifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyIdentifier", runtime.ParamLocationPath, policyIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplyPolicyV1Request calls the generic ApplyPolicyV1 builder with application/json body
func NewApplyPolicyV1Request(server string, namespaceId openapi_types.UUID, policyId openapi_types.UUID, body ApplyPolicyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyPolicyV1RequestWithBody(server, namespaceId, policyId, "application/json", bodyReader)
}

// NewApplyPolicyV1RequestWithBody generates requests for ApplyPolicyV1 with any type of body
func NewApplyPolicyV1RequestWithBody(server string, namespaceId openapi_types.UUID, policyId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/policies/%s/apply", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNamespaceProfileV1Request generates requests for GetNamespaceProfileV1
func NewGetNamespaceProfileV1Request(server string, namespaceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterNamespaceProfileV1Request generates requests for RegisterNamespaceProfileV1
func NewRegisterNamespaceProfileV1Request(server string, namespaceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/%s/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeviceServicePrincipalLinkV2Request generates requests for GetDeviceServicePrincipalLinkV2
func NewGetDeviceServicePrincipalLinkV2Request(server string, namespaceId openapi_types.UUID, params *GetDeviceServicePrincipalLinkV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/device/%s/link-service-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Apply != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNamespacesByTypeV2Request generates requests for ListNamespacesByTypeV2
func NewListNamespacesByTypeV2Request(server string, namespaceType NamespaceTypeShortName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCertificateTemplatesV2Request generates requests for ListCertificateTemplatesV2
func NewListCertificateTemplatesV2Request(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/certificate-templates", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateTemplateV2Request generates requests for GetCertificateTemplateV2
func NewGetCertificateTemplateV2Request(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "templateId", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/certificate-templates/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCertificateTemplateV2Request calls the generic PutCertificateTemplateV2 builder with application/json body
func NewPutCertificateTemplateV2Request(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, body PutCertificateTemplateV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCertificateTemplateV2RequestWithBody(server, namespaceType, namespaceId, templateId, "application/json", bodyReader)
}

// NewPutCertificateTemplateV2RequestWithBody generates requests for PutCertificateTemplateV2 with any type of body
func NewPutCertificateTemplateV2RequestWithBody(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "templateId", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/certificate-templates/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCertificatesV2Request generates requests for ListCertificatesV2
func NewListCertificatesV2Request(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "templateId", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/certificate-templates/%s/certificates", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateV2Request generates requests for GetCertificateV2
func NewGetCertificateV2Request(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, certId openapi_types.UUID, params *GetCertificateV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "templateId", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certId", runtime.ParamLocationPath, certId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/certificate-templates/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Apply != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "apply", runtime.ParamLocationQuery, *params.Apply); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeCertificate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeCertificate", runtime.ParamLocationQuery, *params.IncludeCertificate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSyncNamespaceInfoV2Request generates requests for SyncNamespaceInfoV2
func NewSyncNamespaceInfoV2Request(server string, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "namespaceType", runtime.ParamLocationPath, namespaceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, namespaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/graph-sync", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// EnrollCertificateV1WithBodyWithResponse request with any body
	EnrollCertificateV1WithBodyWithResponse(ctx context.Context, targetId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnrollCertificateV1Response, error)

	EnrollCertificateV1WithResponse(ctx context.Context, targetId openapi_types.UUID, body EnrollCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*EnrollCertificateV1Response, error)

	// GetDiagnosticsV1WithResponse request
	GetDiagnosticsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDiagnosticsV1Response, error)

	// GetMyProfilesV1WithResponse request
	GetMyProfilesV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyProfilesV1Response, error)

	// SyncMyProfilesV1WithResponse request
	SyncMyProfilesV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SyncMyProfilesV1Response, error)

	// ListNamespacesV1WithResponse request
	ListNamespacesV1WithResponse(ctx context.Context, namespaceType NamespaceType, reqEditors ...RequestEditorFn) (*ListNamespacesV1Response, error)

	// ListCertificatesV1WithResponse request
	ListCertificatesV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, params *ListCertificatesV1Params, reqEditors ...RequestEditorFn) (*ListCertificatesV1Response, error)

	// GetCertificateV1WithResponse request
	GetCertificateV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*GetCertificateV1Response, error)

	// ListPoliciesV1WithResponse request
	ListPoliciesV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListPoliciesV1Response, error)

	// DeletePolicyV1WithResponse request
	DeletePolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, params *DeletePolicyV1Params, reqEditors ...RequestEditorFn) (*DeletePolicyV1Response, error)

	// GetPolicyV1WithResponse request
	GetPolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, reqEditors ...RequestEditorFn) (*GetPolicyV1Response, error)

	// PutPolicyV1WithBodyWithResponse request with any body
	PutPolicyV1WithBodyWithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyV1Response, error)

	PutPolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, body PutPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyV1Response, error)

	// ApplyPolicyV1WithBodyWithResponse request with any body
	ApplyPolicyV1WithBodyWithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyPolicyV1Response, error)

	ApplyPolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, body ApplyPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyPolicyV1Response, error)

	// GetNamespaceProfileV1WithResponse request
	GetNamespaceProfileV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNamespaceProfileV1Response, error)

	// RegisterNamespaceProfileV1WithResponse request
	RegisterNamespaceProfileV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RegisterNamespaceProfileV1Response, error)

	// GetDeviceServicePrincipalLinkV2WithResponse request
	GetDeviceServicePrincipalLinkV2WithResponse(ctx context.Context, namespaceId openapi_types.UUID, params *GetDeviceServicePrincipalLinkV2Params, reqEditors ...RequestEditorFn) (*GetDeviceServicePrincipalLinkV2Response, error)

	// ListNamespacesByTypeV2WithResponse request
	ListNamespacesByTypeV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, reqEditors ...RequestEditorFn) (*ListNamespacesByTypeV2Response, error)

	// ListCertificateTemplatesV2WithResponse request
	ListCertificateTemplatesV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListCertificateTemplatesV2Response, error)

	// GetCertificateTemplateV2WithResponse request
	GetCertificateTemplateV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCertificateTemplateV2Response, error)

	// PutCertificateTemplateV2WithBodyWithResponse request with any body
	PutCertificateTemplateV2WithBodyWithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCertificateTemplateV2Response, error)

	PutCertificateTemplateV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, body PutCertificateTemplateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutCertificateTemplateV2Response, error)

	// ListCertificatesV2WithResponse request
	ListCertificatesV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListCertificatesV2Response, error)

	// GetCertificateV2WithResponse request
	GetCertificateV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, certId openapi_types.UUID, params *GetCertificateV2Params, reqEditors ...RequestEditorFn) (*GetCertificateV2Response, error)

	// SyncNamespaceInfoV2WithResponse request
	SyncNamespaceInfoV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*SyncNamespaceInfoV2Response, error)
}

type EnrollCertificateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRef
}

// Status returns HTTPResponse.Status
func (r EnrollCertificateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrollCertificateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiagnosticsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequestDiagnostics
}

// Status returns HTTPResponse.Status
func (r GetDiagnosticsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiagnosticsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyProfilesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NamespaceProfile
}

// Status returns HTTPResponse.Status
func (r GetMyProfilesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyProfilesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncMyProfilesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NamespaceProfile
}

// Status returns HTTPResponse.Status
func (r SyncMyProfilesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncMyProfilesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNamespacesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NamespaceRef
}

// Status returns HTTPResponse.Status
func (r ListNamespacesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNamespacesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCertificatesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CertificateRef
}

// Status returns HTTPResponse.Status
func (r ListCertificatesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCertificatesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRef
}

// Status returns HTTPResponse.Status
func (r GetCertificateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPoliciesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyRef
}

// Status returns HTTPResponse.Status
func (r ListPoliciesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPoliciesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolicyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r DeletePolicyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolicyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPolicyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPolicyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutPolicyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPolicyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyPolicyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyState
}

// Status returns HTTPResponse.Status
func (r ApplyPolicyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyPolicyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNamespaceProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamespaceProfile
}

// Status returns HTTPResponse.Status
func (r GetNamespaceProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNamespaceProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterNamespaceProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamespaceProfile
}

// Status returns HTTPResponse.Status
func (r RegisterNamespaceProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterNamespaceProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceServicePrincipalLinkV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicePrincipalLinkedDevice
}

// Status returns HTTPResponse.Status
func (r GetDeviceServicePrincipalLinkV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceServicePrincipalLinkV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNamespacesByTypeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefListResponse
}

// Status returns HTTPResponse.Status
func (r ListNamespacesByTypeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNamespacesByTypeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCertificateTemplatesV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefListResponse
}

// Status returns HTTPResponse.Status
func (r ListCertificateTemplatesV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCertificateTemplatesV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateTemplateV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateTemplate
}

// Status returns HTTPResponse.Status
func (r GetCertificateTemplateV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateTemplateV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCertificateTemplateV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateTemplate
}

// Status returns HTTPResponse.Status
func (r PutCertificateTemplateV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCertificateTemplateV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCertificatesV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefListResponse
}

// Status returns HTTPResponse.Status
func (r ListCertificatesV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCertificatesV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateInfo
}

// Status returns HTTPResponse.Status
func (r GetCertificateV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncNamespaceInfoV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NamespaceInfo
}

// Status returns HTTPResponse.Status
func (r SyncNamespaceInfoV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncNamespaceInfoV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// EnrollCertificateV1WithBodyWithResponse request with arbitrary body returning *EnrollCertificateV1Response
func (c *ClientWithResponses) EnrollCertificateV1WithBodyWithResponse(ctx context.Context, targetId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnrollCertificateV1Response, error) {
	rsp, err := c.EnrollCertificateV1WithBody(ctx, targetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrollCertificateV1Response(rsp)
}

func (c *ClientWithResponses) EnrollCertificateV1WithResponse(ctx context.Context, targetId openapi_types.UUID, body EnrollCertificateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*EnrollCertificateV1Response, error) {
	rsp, err := c.EnrollCertificateV1(ctx, targetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrollCertificateV1Response(rsp)
}

// GetDiagnosticsV1WithResponse request returning *GetDiagnosticsV1Response
func (c *ClientWithResponses) GetDiagnosticsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDiagnosticsV1Response, error) {
	rsp, err := c.GetDiagnosticsV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiagnosticsV1Response(rsp)
}

// GetMyProfilesV1WithResponse request returning *GetMyProfilesV1Response
func (c *ClientWithResponses) GetMyProfilesV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyProfilesV1Response, error) {
	rsp, err := c.GetMyProfilesV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyProfilesV1Response(rsp)
}

// SyncMyProfilesV1WithResponse request returning *SyncMyProfilesV1Response
func (c *ClientWithResponses) SyncMyProfilesV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SyncMyProfilesV1Response, error) {
	rsp, err := c.SyncMyProfilesV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncMyProfilesV1Response(rsp)
}

// ListNamespacesV1WithResponse request returning *ListNamespacesV1Response
func (c *ClientWithResponses) ListNamespacesV1WithResponse(ctx context.Context, namespaceType NamespaceType, reqEditors ...RequestEditorFn) (*ListNamespacesV1Response, error) {
	rsp, err := c.ListNamespacesV1(ctx, namespaceType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNamespacesV1Response(rsp)
}

// ListCertificatesV1WithResponse request returning *ListCertificatesV1Response
func (c *ClientWithResponses) ListCertificatesV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, params *ListCertificatesV1Params, reqEditors ...RequestEditorFn) (*ListCertificatesV1Response, error) {
	rsp, err := c.ListCertificatesV1(ctx, namespaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCertificatesV1Response(rsp)
}

// GetCertificateV1WithResponse request returning *GetCertificateV1Response
func (c *ClientWithResponses) GetCertificateV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, id openapi_types.UUID, params *GetCertificateV1Params, reqEditors ...RequestEditorFn) (*GetCertificateV1Response, error) {
	rsp, err := c.GetCertificateV1(ctx, namespaceId, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateV1Response(rsp)
}

// ListPoliciesV1WithResponse request returning *ListPoliciesV1Response
func (c *ClientWithResponses) ListPoliciesV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListPoliciesV1Response, error) {
	rsp, err := c.ListPoliciesV1(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPoliciesV1Response(rsp)
}

// DeletePolicyV1WithResponse request returning *DeletePolicyV1Response
func (c *ClientWithResponses) DeletePolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, params *DeletePolicyV1Params, reqEditors ...RequestEditorFn) (*DeletePolicyV1Response, error) {
	rsp, err := c.DeletePolicyV1(ctx, namespaceId, policyIdentifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolicyV1Response(rsp)
}

// GetPolicyV1WithResponse request returning *GetPolicyV1Response
func (c *ClientWithResponses) GetPolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, reqEditors ...RequestEditorFn) (*GetPolicyV1Response, error) {
	rsp, err := c.GetPolicyV1(ctx, namespaceId, policyIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyV1Response(rsp)
}

// PutPolicyV1WithBodyWithResponse request with arbitrary body returning *PutPolicyV1Response
func (c *ClientWithResponses) PutPolicyV1WithBodyWithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPolicyV1Response, error) {
	rsp, err := c.PutPolicyV1WithBody(ctx, namespaceId, policyIdentifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyV1Response(rsp)
}

func (c *ClientWithResponses) PutPolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyIdentifier string, body PutPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutPolicyV1Response, error) {
	rsp, err := c.PutPolicyV1(ctx, namespaceId, policyIdentifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPolicyV1Response(rsp)
}

// ApplyPolicyV1WithBodyWithResponse request with arbitrary body returning *ApplyPolicyV1Response
func (c *ClientWithResponses) ApplyPolicyV1WithBodyWithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyPolicyV1Response, error) {
	rsp, err := c.ApplyPolicyV1WithBody(ctx, namespaceId, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyPolicyV1Response(rsp)
}

func (c *ClientWithResponses) ApplyPolicyV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, policyId openapi_types.UUID, body ApplyPolicyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyPolicyV1Response, error) {
	rsp, err := c.ApplyPolicyV1(ctx, namespaceId, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyPolicyV1Response(rsp)
}

// GetNamespaceProfileV1WithResponse request returning *GetNamespaceProfileV1Response
func (c *ClientWithResponses) GetNamespaceProfileV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNamespaceProfileV1Response, error) {
	rsp, err := c.GetNamespaceProfileV1(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNamespaceProfileV1Response(rsp)
}

// RegisterNamespaceProfileV1WithResponse request returning *RegisterNamespaceProfileV1Response
func (c *ClientWithResponses) RegisterNamespaceProfileV1WithResponse(ctx context.Context, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*RegisterNamespaceProfileV1Response, error) {
	rsp, err := c.RegisterNamespaceProfileV1(ctx, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterNamespaceProfileV1Response(rsp)
}

// GetDeviceServicePrincipalLinkV2WithResponse request returning *GetDeviceServicePrincipalLinkV2Response
func (c *ClientWithResponses) GetDeviceServicePrincipalLinkV2WithResponse(ctx context.Context, namespaceId openapi_types.UUID, params *GetDeviceServicePrincipalLinkV2Params, reqEditors ...RequestEditorFn) (*GetDeviceServicePrincipalLinkV2Response, error) {
	rsp, err := c.GetDeviceServicePrincipalLinkV2(ctx, namespaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceServicePrincipalLinkV2Response(rsp)
}

// ListNamespacesByTypeV2WithResponse request returning *ListNamespacesByTypeV2Response
func (c *ClientWithResponses) ListNamespacesByTypeV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, reqEditors ...RequestEditorFn) (*ListNamespacesByTypeV2Response, error) {
	rsp, err := c.ListNamespacesByTypeV2(ctx, namespaceType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNamespacesByTypeV2Response(rsp)
}

// ListCertificateTemplatesV2WithResponse request returning *ListCertificateTemplatesV2Response
func (c *ClientWithResponses) ListCertificateTemplatesV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListCertificateTemplatesV2Response, error) {
	rsp, err := c.ListCertificateTemplatesV2(ctx, namespaceType, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCertificateTemplatesV2Response(rsp)
}

// GetCertificateTemplateV2WithResponse request returning *GetCertificateTemplateV2Response
func (c *ClientWithResponses) GetCertificateTemplateV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCertificateTemplateV2Response, error) {
	rsp, err := c.GetCertificateTemplateV2(ctx, namespaceType, namespaceId, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateTemplateV2Response(rsp)
}

// PutCertificateTemplateV2WithBodyWithResponse request with arbitrary body returning *PutCertificateTemplateV2Response
func (c *ClientWithResponses) PutCertificateTemplateV2WithBodyWithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCertificateTemplateV2Response, error) {
	rsp, err := c.PutCertificateTemplateV2WithBody(ctx, namespaceType, namespaceId, templateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateTemplateV2Response(rsp)
}

func (c *ClientWithResponses) PutCertificateTemplateV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, body PutCertificateTemplateV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PutCertificateTemplateV2Response, error) {
	rsp, err := c.PutCertificateTemplateV2(ctx, namespaceType, namespaceId, templateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCertificateTemplateV2Response(rsp)
}

// ListCertificatesV2WithResponse request returning *ListCertificatesV2Response
func (c *ClientWithResponses) ListCertificatesV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListCertificatesV2Response, error) {
	rsp, err := c.ListCertificatesV2(ctx, namespaceType, namespaceId, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCertificatesV2Response(rsp)
}

// GetCertificateV2WithResponse request returning *GetCertificateV2Response
func (c *ClientWithResponses) GetCertificateV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, templateId openapi_types.UUID, certId openapi_types.UUID, params *GetCertificateV2Params, reqEditors ...RequestEditorFn) (*GetCertificateV2Response, error) {
	rsp, err := c.GetCertificateV2(ctx, namespaceType, namespaceId, templateId, certId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateV2Response(rsp)
}

// SyncNamespaceInfoV2WithResponse request returning *SyncNamespaceInfoV2Response
func (c *ClientWithResponses) SyncNamespaceInfoV2WithResponse(ctx context.Context, namespaceType NamespaceTypeShortName, namespaceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*SyncNamespaceInfoV2Response, error) {
	rsp, err := c.SyncNamespaceInfoV2(ctx, namespaceType, namespaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncNamespaceInfoV2Response(rsp)
}

// ParseEnrollCertificateV1Response parses an HTTP response from a EnrollCertificateV1WithResponse call
func ParseEnrollCertificateV1Response(rsp *http.Response) (*EnrollCertificateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrollCertificateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDiagnosticsV1Response parses an HTTP response from a GetDiagnosticsV1WithResponse call
func ParseGetDiagnosticsV1Response(rsp *http.Response) (*GetDiagnosticsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiagnosticsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestDiagnostics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyProfilesV1Response parses an HTTP response from a GetMyProfilesV1WithResponse call
func ParseGetMyProfilesV1Response(rsp *http.Response) (*GetMyProfilesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyProfilesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NamespaceProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSyncMyProfilesV1Response parses an HTTP response from a SyncMyProfilesV1WithResponse call
func ParseSyncMyProfilesV1Response(rsp *http.Response) (*SyncMyProfilesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncMyProfilesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NamespaceProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListNamespacesV1Response parses an HTTP response from a ListNamespacesV1WithResponse call
func ParseListNamespacesV1Response(rsp *http.Response) (*ListNamespacesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNamespacesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NamespaceRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCertificatesV1Response parses an HTTP response from a ListCertificatesV1WithResponse call
func ParseListCertificatesV1Response(rsp *http.Response) (*ListCertificatesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCertificatesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CertificateRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCertificateV1Response parses an HTTP response from a GetCertificateV1WithResponse call
func ParseGetCertificateV1Response(rsp *http.Response) (*GetCertificateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPoliciesV1Response parses an HTTP response from a ListPoliciesV1WithResponse call
func ParseListPoliciesV1Response(rsp *http.Response) (*ListPoliciesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPoliciesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePolicyV1Response parses an HTTP response from a DeletePolicyV1WithResponse call
func ParseDeletePolicyV1Response(rsp *http.Response) (*DeletePolicyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolicyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicyV1Response parses an HTTP response from a GetPolicyV1WithResponse call
func ParseGetPolicyV1Response(rsp *http.Response) (*GetPolicyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutPolicyV1Response parses an HTTP response from a PutPolicyV1WithResponse call
func ParsePutPolicyV1Response(rsp *http.Response) (*PutPolicyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPolicyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseApplyPolicyV1Response parses an HTTP response from a ApplyPolicyV1WithResponse call
func ParseApplyPolicyV1Response(rsp *http.Response) (*ApplyPolicyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyPolicyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNamespaceProfileV1Response parses an HTTP response from a GetNamespaceProfileV1WithResponse call
func ParseGetNamespaceProfileV1Response(rsp *http.Response) (*GetNamespaceProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNamespaceProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamespaceProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterNamespaceProfileV1Response parses an HTTP response from a RegisterNamespaceProfileV1WithResponse call
func ParseRegisterNamespaceProfileV1Response(rsp *http.Response) (*RegisterNamespaceProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterNamespaceProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamespaceProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeviceServicePrincipalLinkV2Response parses an HTTP response from a GetDeviceServicePrincipalLinkV2WithResponse call
func ParseGetDeviceServicePrincipalLinkV2Response(rsp *http.Response) (*GetDeviceServicePrincipalLinkV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceServicePrincipalLinkV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicePrincipalLinkedDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListNamespacesByTypeV2Response parses an HTTP response from a ListNamespacesByTypeV2WithResponse call
func ParseListNamespacesByTypeV2Response(rsp *http.Response) (*ListNamespacesByTypeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNamespacesByTypeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCertificateTemplatesV2Response parses an HTTP response from a ListCertificateTemplatesV2WithResponse call
func ParseListCertificateTemplatesV2Response(rsp *http.Response) (*ListCertificateTemplatesV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCertificateTemplatesV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCertificateTemplateV2Response parses an HTTP response from a GetCertificateTemplateV2WithResponse call
func ParseGetCertificateTemplateV2Response(rsp *http.Response) (*GetCertificateTemplateV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateTemplateV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCertificateTemplateV2Response parses an HTTP response from a PutCertificateTemplateV2WithResponse call
func ParsePutCertificateTemplateV2Response(rsp *http.Response) (*PutCertificateTemplateV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCertificateTemplateV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListCertificatesV2Response parses an HTTP response from a ListCertificatesV2WithResponse call
func ParseListCertificatesV2Response(rsp *http.Response) (*ListCertificatesV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCertificatesV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCertificateV2Response parses an HTTP response from a GetCertificateV2WithResponse call
func ParseGetCertificateV2Response(rsp *http.Response) (*GetCertificateV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSyncNamespaceInfoV2Response parses an HTTP response from a SyncNamespaceInfoV2WithResponse call
func ParseSyncNamespaceInfoV2Response(rsp *http.Response) (*SyncNamespaceInfoV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncNamespaceInfoV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NamespaceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
