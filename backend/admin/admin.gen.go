// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package admin

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	externalRef0 "github.com/stephenzsy/small-kms/backend/models"
	externalRef1 "github.com/stephenzsy/small-kms/backend/models/agent"
	externalRef2 "github.com/stephenzsy/small-kms/backend/models/cert"
	externalRef3 "github.com/stephenzsy/small-kms/backend/models/key"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResult defines model for ErrorResult.
type ErrorResult struct {
	Message *string `json:"message,omitempty"`
}

// IdParameter defines model for IdParameter.
type IdParameter = string

// NamespaceIdParameter defines model for NamespaceIdParameter.
type NamespaceIdParameter = string

// NamespaceProviderParameter defines model for NamespaceProviderParameter.
type NamespaceProviderParameter = externalRef0.NamespaceProvider

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = ErrorResult

// EnrollCertificateParams defines parameters for EnrollCertificate.
type EnrollCertificateParams struct {
	// OnBehalfOfApplication Enroll on behalf of application, must have a bearer token with "azp" cliam
	OnBehalfOfApplication *bool `form:"onBehalfOfApplication,omitempty" json:"onBehalfOfApplication,omitempty"`
}

// ListCertificatesParams defines parameters for ListCertificates.
type ListCertificatesParams struct {
	// PolicyId Policy ID
	PolicyId *string `form:"policyId,omitempty" json:"policyId,omitempty"`
}

// GetCertificateParams defines parameters for GetCertificate.
type GetCertificateParams struct {
	// IncludeJwk Include JWK
	IncludeJwk *bool `form:"includeJwk,omitempty" json:"includeJwk,omitempty"`
}

// ListKeysParams defines parameters for ListKeys.
type ListKeysParams struct {
	// PolicyId Policy ID
	PolicyId *string `form:"policyId,omitempty" json:"policyId,omitempty"`
}

// GetKeyParams defines parameters for GetKey.
type GetKeyParams struct {
	// IncludeJwk Include JWK
	IncludeJwk *bool `form:"includeJwk,omitempty" json:"includeJwk,omitempty"`

	// Verify verify key
	Verify *bool `form:"verify,omitempty" json:"verify,omitempty"`
}

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody = externalRef1.CreateAgentRequest

// CreateExternalCertificateIssuerJSONRequestBody defines body for CreateExternalCertificateIssuer for application/json ContentType.
type CreateExternalCertificateIssuerJSONRequestBody = externalRef2.CertificateExternalIssuerFields

// PutProfileJSONRequestBody defines body for PutProfile for application/json ContentType.
type PutProfileJSONRequestBody = externalRef0.ProfileParameters

// PutAgentConfigJSONRequestBody defines body for PutAgentConfig for application/json ContentType.
type PutAgentConfigJSONRequestBody = externalRef1.CreateAgentConfigRequest

// UpdateAgentInstanceJSONRequestBody defines body for UpdateAgentInstance for application/json ContentType.
type UpdateAgentInstanceJSONRequestBody = externalRef1.AgentInstanceParameters

// PutCertificatePolicyJSONRequestBody defines body for PutCertificatePolicy for application/json ContentType.
type PutCertificatePolicyJSONRequestBody = externalRef2.CertificatePolicyParameters

// EnrollCertificateJSONRequestBody defines body for EnrollCertificate for application/json ContentType.
type EnrollCertificateJSONRequestBody = externalRef2.EnrollCertificateRequest

// PutCertificatePolicyIssuerJSONRequestBody defines body for PutCertificatePolicyIssuer for application/json ContentType.
type PutCertificatePolicyIssuerJSONRequestBody = externalRef0.LinkRefFields

// ExchangePKCS12JSONRequestBody defines body for ExchangePKCS12 for application/json ContentType.
type ExchangePKCS12JSONRequestBody = externalRef2.ExchangePKCS12Request

// PutKeyPolicyJSONRequestBody defines body for PutKeyPolicy for application/json ContentType.
type PutKeyPolicyJSONRequestBody = externalRef3.CreateKeyPolicyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create agent
	// (POST /v2/agents)
	CreateAgent(ctx echo.Context) error
	// Get agent
	// (GET /v2/agents/{id})
	GetAgent(ctx echo.Context, id IdParameter) error
	// Get diagnostics
	// (GET /v2/diagnostics)
	GetDiagnostics(ctx echo.Context) error
	// List certificate issuers
	// (GET /v2/external-ca/{namespaceId}/certificiate-issuers)
	ListExternalCertificateIssuers(ctx echo.Context, namespaceId NamespaceIdParameter) error
	// Create certificate issuer
	// (POST /v2/external-ca/{namespaceId}/certificiate-issuers)
	CreateExternalCertificateIssuer(ctx echo.Context, namespaceId NamespaceIdParameter) error
	// list profiles
	// (GET /v2/profiles/{namespaceProvider})
	ListProfiles(ctx echo.Context, namespaceProvider NamespaceProviderParameter) error
	// Get profile
	// (GET /v2/profiles/{namespaceProvider}/{namespaceId})
	GetProfile(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter) error
	// Sync profile
	// (POST /v2/profiles/{namespaceProvider}/{namespaceId})
	SyncProfile(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter) error
	// Put profile
	// (PUT /v2/profiles/{namespaceProvider}/{namespaceId})
	PutProfile(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter) error
	// Get agent config
	// (GET /v2/service-principal/{namespaceId}/agent-config)
	GetAgentConfigBundle(ctx echo.Context, namespaceId NamespaceIdParameter) error
	// Get agent config
	// (GET /v2/service-principal/{namespaceId}/agent-config/{configName})
	GetAgentConfig(ctx echo.Context, namespaceId NamespaceIdParameter, configName externalRef1.AgentConfigName) error
	// Put agent config
	// (PUT /v2/service-principal/{namespaceId}/agent-config/{configName})
	PutAgentConfig(ctx echo.Context, namespaceId NamespaceIdParameter, configName externalRef1.AgentConfigName) error
	// List agent instances
	// (GET /v2/service-principal/{namespaceId}/agent-instances)
	ListAgentInstances(ctx echo.Context, namespaceId NamespaceIdParameter) error
	// Update agent instance
	// (POST /v2/service-principal/{namespaceId}/agent-instances)
	UpdateAgentInstance(ctx echo.Context, namespaceId NamespaceIdParameter) error
	// Get agent instance
	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id})
	GetAgentInstance(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error
	// Get agent diagnostics
	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/diagnostics)
	GetAgentDiagnostics(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error

	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/images)
	ListAgentDockerImages(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error
	// Get agent docker system information
	// (GET /v2/service-principal/{namespaceId}/agent-instances/{id}/docker/info)
	GetAgentDockerSystemInformation(ctx echo.Context, namespaceId NamespaceIdParameter, id IdParameter) error
	// Get system app
	// (GET /v2/system-apps/{id})
	GetSystemApp(ctx echo.Context, id IdParameter) error
	// Sync managed app
	// (POST /v2/system-apps/{id})
	SyncSystemApp(ctx echo.Context, id IdParameter) error
	// List certificate policies
	// (GET /v2/{namespaceProvider}/{namespaceId}/certificate-policies)
	ListCertificatePolicies(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter) error
	// Get certificate policy
	// (GET /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id})
	GetCertificatePolicy(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// put certificate policy
	// (PUT /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id})
	PutCertificatePolicy(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// put certificate policy
	// (POST /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/enroll)
	EnrollCertificate(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter, params EnrollCertificateParams) error
	// put certificate policy
	// (POST /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/generate)
	GenerateCertificate(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// Get certificate policy issuer
	// (GET /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/issuer)
	GetCertificatePolicyIssuer(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// put certificate policy issuer
	// (PUT /v2/{namespaceProvider}/{namespaceId}/certificate-policies/{id}/issuer)
	PutCertificatePolicyIssuer(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// List certificates
	// (GET /v2/{namespaceProvider}/{namespaceId}/certificates)
	ListCertificates(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, params ListCertificatesParams) error
	// Delete certificate
	// (DELETE /v2/{namespaceProvider}/{namespaceId}/certificates/{id})
	DeleteCertificate(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// Get certificate
	// (GET /v2/{namespaceProvider}/{namespaceId}/certificates/{id})
	GetCertificate(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter, params GetCertificateParams) error
	// Exchange PKCS12
	// (POST /v2/{namespaceProvider}/{namespaceId}/certificates/{id}/exchange-pkcs12)
	ExchangePKCS12(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// Add certificate as MS Entra key credential
	// (POST /v2/{namespaceProvider}/{namespaceId}/certificates/{id}/ms-entra-key-credential)
	AddMsEntraKeyCredential(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// List key policies
	// (GET /v2/{namespaceProvider}/{namespaceId}/key-policies)
	ListKeyPolicies(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter) error
	// Get key policy
	// (GET /v2/{namespaceProvider}/{namespaceId}/key-policies/{id})
	GetKeyPolicy(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// put key policy
	// (PUT /v2/{namespaceProvider}/{namespaceId}/key-policies/{id})
	PutKeyPolicy(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// put certificate policy
	// (POST /v2/{namespaceProvider}/{namespaceId}/key-policies/{id}/generate)
	GenerateKey(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// List keys
	// (GET /v2/{namespaceProvider}/{namespaceId}/keys)
	ListKeys(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, params ListKeysParams) error
	// Get key
	// (GET /v2/{namespaceProvider}/{namespaceId}/keys/{id})
	GetKey(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter, params GetKeyParams) error
	// Get member group
	// (GET /v2/{namespaceProvider}/{namespaceId}/memberOf/{id})
	GetMemberOf(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
	// Sync member group
	// (POST /v2/{namespaceProvider}/{namespaceId}/memberOf/{id})
	SyncMemberOf(ctx echo.Context, namespaceProvider NamespaceProviderParameter, namespaceId NamespaceIdParameter, id IdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAgent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAgent(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAgent(ctx)
	return err
}

// GetAgent converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgent(ctx, id)
	return err
}

// GetDiagnostics converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiagnostics(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiagnostics(ctx)
	return err
}

// ListExternalCertificateIssuers converts echo context to params.
func (w *ServerInterfaceWrapper) ListExternalCertificateIssuers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListExternalCertificateIssuers(ctx, namespaceId)
	return err
}

// CreateExternalCertificateIssuer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateExternalCertificateIssuer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateExternalCertificateIssuer(ctx, namespaceId)
	return err
}

// ListProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) ListProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListProfiles(ctx, namespaceProvider)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx, namespaceProvider, namespaceId)
	return err
}

// SyncProfile converts echo context to params.
func (w *ServerInterfaceWrapper) SyncProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SyncProfile(ctx, namespaceProvider, namespaceId)
	return err
}

// PutProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PutProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutProfile(ctx, namespaceProvider, namespaceId)
	return err
}

// GetAgentConfigBundle converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentConfigBundle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentConfigBundle(ctx, namespaceId)
	return err
}

// GetAgentConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "configName" -------------
	var configName externalRef1.AgentConfigName

	err = runtime.BindStyledParameterWithLocation("simple", false, "configName", runtime.ParamLocationPath, ctx.Param("configName"), &configName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentConfig(ctx, namespaceId, configName)
	return err
}

// PutAgentConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PutAgentConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "configName" -------------
	var configName externalRef1.AgentConfigName

	err = runtime.BindStyledParameterWithLocation("simple", false, "configName", runtime.ParamLocationPath, ctx.Param("configName"), &configName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter configName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutAgentConfig(ctx, namespaceId, configName)
	return err
}

// ListAgentInstances converts echo context to params.
func (w *ServerInterfaceWrapper) ListAgentInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAgentInstances(ctx, namespaceId)
	return err
}

// UpdateAgentInstance converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAgentInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAgentInstance(ctx, namespaceId)
	return err
}

// GetAgentInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentInstance(ctx, namespaceId, id)
	return err
}

// GetAgentDiagnostics converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentDiagnostics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentDiagnostics(ctx, namespaceId, id)
	return err
}

// ListAgentDockerImages converts echo context to params.
func (w *ServerInterfaceWrapper) ListAgentDockerImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAgentDockerImages(ctx, namespaceId, id)
	return err
}

// GetAgentDockerSystemInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgentDockerSystemInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAgentDockerSystemInformation(ctx, namespaceId, id)
	return err
}

// GetSystemApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSystemApp(ctx, id)
	return err
}

// SyncSystemApp converts echo context to params.
func (w *ServerInterfaceWrapper) SyncSystemApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SyncSystemApp(ctx, id)
	return err
}

// ListCertificatePolicies converts echo context to params.
func (w *ServerInterfaceWrapper) ListCertificatePolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCertificatePolicies(ctx, namespaceProvider, namespaceId)
	return err
}

// GetCertificatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCertificatePolicy(ctx, namespaceProvider, namespaceId, id)
	return err
}

// PutCertificatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) PutCertificatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCertificatePolicy(ctx, namespaceProvider, namespaceId, id)
	return err
}

// EnrollCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) EnrollCertificate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EnrollCertificateParams
	// ------------- Optional query parameter "onBehalfOfApplication" -------------

	err = runtime.BindQueryParameter("form", true, false, "onBehalfOfApplication", ctx.QueryParams(), &params.OnBehalfOfApplication)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onBehalfOfApplication: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EnrollCertificate(ctx, namespaceProvider, namespaceId, id, params)
	return err
}

// GenerateCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCertificate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateCertificate(ctx, namespaceProvider, namespaceId, id)
	return err
}

// GetCertificatePolicyIssuer converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificatePolicyIssuer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCertificatePolicyIssuer(ctx, namespaceProvider, namespaceId, id)
	return err
}

// PutCertificatePolicyIssuer converts echo context to params.
func (w *ServerInterfaceWrapper) PutCertificatePolicyIssuer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCertificatePolicyIssuer(ctx, namespaceProvider, namespaceId, id)
	return err
}

// ListCertificates converts echo context to params.
func (w *ServerInterfaceWrapper) ListCertificates(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCertificatesParams
	// ------------- Optional query parameter "policyId" -------------

	err = runtime.BindQueryParameter("form", true, false, "policyId", ctx.QueryParams(), &params.PolicyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCertificates(ctx, namespaceProvider, namespaceId, params)
	return err
}

// DeleteCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCertificate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCertificate(ctx, namespaceProvider, namespaceId, id)
	return err
}

// GetCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) GetCertificate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificateParams
	// ------------- Optional query parameter "includeJwk" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeJwk", ctx.QueryParams(), &params.IncludeJwk)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeJwk: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCertificate(ctx, namespaceProvider, namespaceId, id, params)
	return err
}

// ExchangePKCS12 converts echo context to params.
func (w *ServerInterfaceWrapper) ExchangePKCS12(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExchangePKCS12(ctx, namespaceProvider, namespaceId, id)
	return err
}

// AddMsEntraKeyCredential converts echo context to params.
func (w *ServerInterfaceWrapper) AddMsEntraKeyCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddMsEntraKeyCredential(ctx, namespaceProvider, namespaceId, id)
	return err
}

// ListKeyPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) ListKeyPolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListKeyPolicies(ctx, namespaceProvider, namespaceId)
	return err
}

// GetKeyPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GetKeyPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKeyPolicy(ctx, namespaceProvider, namespaceId, id)
	return err
}

// PutKeyPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) PutKeyPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutKeyPolicy(ctx, namespaceProvider, namespaceId, id)
	return err
}

// GenerateKey converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateKey(ctx, namespaceProvider, namespaceId, id)
	return err
}

// ListKeys converts echo context to params.
func (w *ServerInterfaceWrapper) ListKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListKeysParams
	// ------------- Optional query parameter "policyId" -------------

	err = runtime.BindQueryParameter("form", true, false, "policyId", ctx.QueryParams(), &params.PolicyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListKeys(ctx, namespaceProvider, namespaceId, params)
	return err
}

// GetKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeyParams
	// ------------- Optional query parameter "includeJwk" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeJwk", ctx.QueryParams(), &params.IncludeJwk)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeJwk: %s", err))
	}

	// ------------- Optional query parameter "verify" -------------

	err = runtime.BindQueryParameter("form", true, false, "verify", ctx.QueryParams(), &params.Verify)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verify: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetKey(ctx, namespaceProvider, namespaceId, id, params)
	return err
}

// GetMemberOf converts echo context to params.
func (w *ServerInterfaceWrapper) GetMemberOf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMemberOf(ctx, namespaceProvider, namespaceId, id)
	return err
}

// SyncMemberOf converts echo context to params.
func (w *ServerInterfaceWrapper) SyncMemberOf(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespaceProvider" -------------
	var namespaceProvider NamespaceProviderParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceProvider", runtime.ParamLocationPath, ctx.Param("namespaceProvider"), &namespaceProvider)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceProvider: %s", err))
	}

	// ------------- Path parameter "namespaceId" -------------
	var namespaceId NamespaceIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespaceId", runtime.ParamLocationPath, ctx.Param("namespaceId"), &namespaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespaceId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id IdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SyncMemberOf(ctx, namespaceProvider, namespaceId, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v2/agents", wrapper.CreateAgent)
	router.GET(baseURL+"/v2/agents/:id", wrapper.GetAgent)
	router.GET(baseURL+"/v2/diagnostics", wrapper.GetDiagnostics)
	router.GET(baseURL+"/v2/external-ca/:namespaceId/certificiate-issuers", wrapper.ListExternalCertificateIssuers)
	router.POST(baseURL+"/v2/external-ca/:namespaceId/certificiate-issuers", wrapper.CreateExternalCertificateIssuer)
	router.GET(baseURL+"/v2/profiles/:namespaceProvider", wrapper.ListProfiles)
	router.GET(baseURL+"/v2/profiles/:namespaceProvider/:namespaceId", wrapper.GetProfile)
	router.POST(baseURL+"/v2/profiles/:namespaceProvider/:namespaceId", wrapper.SyncProfile)
	router.PUT(baseURL+"/v2/profiles/:namespaceProvider/:namespaceId", wrapper.PutProfile)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-config", wrapper.GetAgentConfigBundle)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-config/:configName", wrapper.GetAgentConfig)
	router.PUT(baseURL+"/v2/service-principal/:namespaceId/agent-config/:configName", wrapper.PutAgentConfig)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances", wrapper.ListAgentInstances)
	router.POST(baseURL+"/v2/service-principal/:namespaceId/agent-instances", wrapper.UpdateAgentInstance)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id", wrapper.GetAgentInstance)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/diagnostics", wrapper.GetAgentDiagnostics)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/images", wrapper.ListAgentDockerImages)
	router.GET(baseURL+"/v2/service-principal/:namespaceId/agent-instances/:id/docker/info", wrapper.GetAgentDockerSystemInformation)
	router.GET(baseURL+"/v2/system-apps/:id", wrapper.GetSystemApp)
	router.POST(baseURL+"/v2/system-apps/:id", wrapper.SyncSystemApp)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies", wrapper.ListCertificatePolicies)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies/:id", wrapper.GetCertificatePolicy)
	router.PUT(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies/:id", wrapper.PutCertificatePolicy)
	router.POST(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies/:id/enroll", wrapper.EnrollCertificate)
	router.POST(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies/:id/generate", wrapper.GenerateCertificate)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies/:id/issuer", wrapper.GetCertificatePolicyIssuer)
	router.PUT(baseURL+"/v2/:namespaceProvider/:namespaceId/certificate-policies/:id/issuer", wrapper.PutCertificatePolicyIssuer)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/certificates", wrapper.ListCertificates)
	router.DELETE(baseURL+"/v2/:namespaceProvider/:namespaceId/certificates/:id", wrapper.DeleteCertificate)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/certificates/:id", wrapper.GetCertificate)
	router.POST(baseURL+"/v2/:namespaceProvider/:namespaceId/certificates/:id/exchange-pkcs12", wrapper.ExchangePKCS12)
	router.POST(baseURL+"/v2/:namespaceProvider/:namespaceId/certificates/:id/ms-entra-key-credential", wrapper.AddMsEntraKeyCredential)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/key-policies", wrapper.ListKeyPolicies)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/key-policies/:id", wrapper.GetKeyPolicy)
	router.PUT(baseURL+"/v2/:namespaceProvider/:namespaceId/key-policies/:id", wrapper.PutKeyPolicy)
	router.POST(baseURL+"/v2/:namespaceProvider/:namespaceId/key-policies/:id/generate", wrapper.GenerateKey)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/keys", wrapper.ListKeys)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/keys/:id", wrapper.GetKey)
	router.GET(baseURL+"/v2/:namespaceProvider/:namespaceId/memberOf/:id", wrapper.GetMemberOf)
	router.POST(baseURL+"/v2/:namespaceProvider/:namespaceId/memberOf/:id", wrapper.SyncMemberOf)

}
