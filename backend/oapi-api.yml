openapi: 3.0.3
info:
  title: Small KMS Admin API Shared
  version: 0.1.1
security:
  - BearerAuth: []
paths:
  /v3/{profileType}:
    parameters:
      - $ref: "#/components/parameters/ProfileTypeParameter"
    get:
      tags:
        - admin
      summary: List profiles by type
      operationId: ListProfiles
      responses:
        200:
          description: List RefsResponse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProfileRef"
  /v3/{profileType}/{profileId}:
    parameters:
      - $ref: "#/components/parameters/ProfileTypeParameter"
      - $ref: "#/components/parameters/ProfileIdentifierParameter"
    get:
      tags:
        - admin
      summary: Get namespace info with ms graph
      operationId: GetProfile
      responses:
        "200":
          description: get namespace profile response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
    post:
      tags:
        - admin
      summary: Sync namespace info with ms graph
      operationId: SyncProfile
      responses:
        "200":
          description: register namespace profile response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
  /v3/{profileType}/{profileId}/certificate-template:
    parameters:
      - $ref: "#/components/parameters/ProfileTypeParameter"
      - $ref: "#/components/parameters/ProfileIdentifierParameter"
    get:
      tags:
        - admin
      summary: List certificate templates
      operationId: ListCertificateTemplates
      responses:
        200:
          description: List certificate templates response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateTemplateRef"
  /v3/{profileType}/{profileId}/certificate-template/{templateId}:
    parameters:
      - $ref: "#/components/parameters/ProfileTypeParameter"
      - $ref: "#/components/parameters/ProfileIdentifierParameter"
      - $ref: "#/components/parameters/CertificateTemplateIdentifierParameter"
    get:
      tags:
        - admin
      summary: Get certificate template
      operationId: GetCertificateTemplate
      responses:
        200:
          description: Certificate template response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateTemplate"
    put:
      tags:
        - admin
      summary: Put certificate template
      operationId: PutCertificateTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CertificateTemplateParameters"
        required: true
      responses:
        200:
          description: Certificate template response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateTemplate"
  /v3/{profileType}/{profileId}/certificate-template/{templateId}/certificate:
    parameters:
      - $ref: "#/components/parameters/ProfileTypeParameter"
      - $ref: "#/components/parameters/ProfileIdentifierParameter"
      - $ref: "#/components/parameters/CertificateTemplateIdentifierParameter"
    post:
      parameters:
        - $ref: "#/components/parameters/IncludeCertificateParameter"
          x-go-type-name: IncludeCertificateParameter
      tags:
        - admin
      summary: Create certificate
      operationId: IssueCertificateFromTemplate
      responses:
        200:
          $ref: "#/components/responses/CertificateResponse"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Identifier:
      type: string
      description: Identifier of the resource
      x-go-type-import:
        name: kmscommon
        path: github.com/stephenzsy/small-kms/backend/common
      x-go-type: kmscommon.Identifier
    ProfileType:
      type: string
      enum:
        - root-ca
        - intermediate-ca
        - service-principal
        - group
        - device
        - user
        - application
      x-enum-varnames:
        - ProfileTypeRootCA
        - ProfileTypeIntermediateCA
        - ProfileTypeServicePrincipal
        - ProfileTypeGroup
        - ProfileTypeDevice
        - ProfileTypeUser
        - ProfileTypeApplication
    ResourceType:
      type: string
      enum:
        - profile
        - certificate-template
        - certificate
        - certificate-enrollment-receipt
      x-enum-varnames:
        - ResourceTypeProfile
        - ResourceTypeCertificateTemplate
        - ResourceTypeCertificate
        - ResourceTypeCertificateEnrollmentReceipt
    ResourceMetadata:
      type: object
      properties:
        updated:
          description: Time when the resoruce was last updated
          type: string
          format: date-time
        updatedBy:
          type: string
        deleted:
          description: Time when the deleted was deleted
          type: string
          format: date-time
      additionalProperties:
        type: string
    ProfileRef:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ProfileType"
        id:
          x-go-name: ID
          $ref: "#/components/schemas/Identifier"
        displayName:
          description: Display name of the resource
          type: string
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
      required:
        - type
        - id
        - displayName
    Profile:
      allOf:
        - $ref: "#/components/schemas/ProfileRef"
      x-go-type: ProfileRef
    JwkAlg:
      type: string
      enum:
        - RS256
        - RS384
        - RS512
        - ES256
        - ES384
      x-enum-varnames:
        - AlgRS256
        - AlgRS384
        - AlgRS512
        - AlgES256
        - AlgES384
    JwtKty:
      type: string
      enum:
        - RSA
        - EC
      x-enum-varnames:
        - KeyTypeRSA
        - KeyTypeEC
    JwtCrv:
      type: string
      enum:
        - P-256
        - P-384
      x-enum-varnames:
        - CurveNameP256
        - CurveNameP384
    JwkKeyOperation:
      type: string
      enum:
        - sign
        - verify
        - encrypt
        - decrypt
        - wrapKey
        - unwrapKey
      x-enum-varnames:
        - KeyOpSign
        - KeyOpVerify
        - KeyOpEncrypt
        - KeyOpDecrypt
        - KeyOpWrapKey
        - KeyOpUnwrapKey
      x-go-name: KeyOp
    JwkProperties:
      type: object
      description: Property bag of JSON Web Key (RFC 7517) with additional fields, all bytes are base64url encoded
      properties:
        alg:
          $ref: "#/components/schemas/JwkAlg"
        kty:
          $ref: "#/components/schemas/JwtKty"
        key_size:
          description: RSA key size
          type: integer
        key_ops:
          $ref: "#/components/schemas/JwkKeyOperation"
        n:
          description: RSA modulus
          type: string
        e:
          description: RSA exponent
          type: string
        crv:
          $ref: "#/components/schemas/JwtCrv"
        x:
          description: EC x coordinate
          type: string
        y:
          description: EC y coordinate
          type: string
        kid:
          description: Key ID
          type: string
          x-go-name: KeyID
        x5u:
          x-go-name: CertificateURL
          description: X.509 certificate URL
          type: string
        x5c:
          description: X.509 certificate chain
          type: array
          items:
            type: string
          x-go-name: CertificateChain
          x-go-type-skip-optional-pointer: true
        x5t:
          description: X.509 certificate SHA-1 thumbprint
          type: string
          x-go-name: CertificateThumbprint
        x5t#S256:
          description: X.509 certificate SHA-256 thumbprint
          type: string
          x-go-name: CertificateThumbprintSHA256
      required:
        - kty
    CertificateUsage:
      type: string
      enum:
        - ca
        - caRoot
        - serverAuth
        - clientAuth
      x-enum-varnames:
        - CertUsageCA
        - CertUsageCARoot
        - CertUsageServerAuth
        - CertUsageClientAuth
    CertificateLifetimeTrigger:
      type: object
      properties:
        days_before_expiry:
          x-go-name: DaysBeforeExpiry
          type: integer
          format: int32
        lifetime_percentage:
          x-go-name: LifetimePercentage
          type: integer
          format: int32
    CertificateIssuer:
      type: object
      properties:
        profileType:
          $ref: "#/components/schemas/ProfileType"
        profileId:
          $ref: "#/components/schemas/Identifier"
        templateId:
          $ref: "#/components/schemas/Identifier"
      required:
        - profileType
        - profileId
    CertificateTemplateRef:
      type: object
      properties:
        id:
          x-go-name: ID
          $ref: "#/components/schemas/Identifier"
        subjectCommonName:
          description: Common name
          type: string
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
      required:
        - id
        - subjectCommonName
    CertificateTemplateParameters:
      type: object
      description: Certificate fields, may accept template substitutions
      properties:
        issuer:
          $ref: "#/components/schemas/CertificateIssuer"
        keyProperties:
          $ref: "#/components/schemas/JwkProperties"
        subjectCommonName:
          description: Common name
          type: string
        usages:
          type: array
          items:
            $ref: "#/components/schemas/CertificateUsage"
        validity_months:
          x-go-name: ValidityInMonths
          type: integer
          format: int32
          minimum: 1
          maximum: 120
        keyStorePath:
          type: string
        lifetimeTrigger:
          $ref: "#/components/schemas/CertificateLifetimeTrigger"
        # reuse_key:
        #   description: Keep using the same key version if exists
        #   type: boolean
        #   x-go-name: ReuseKey
      required:
        - subjectCommonName
        - usages
    CertificateTemplate:
      allOf:
        - $ref: "#/components/schemas/CertificateTemplateRef"
        - $ref: "#/components/schemas/CertificateTemplateParameters"
    IncludeCertificate:
      type: string
      enum:
        - jwk
        - pem
      x-enum-varnames:
        - IncludeJWK
        - IncludePEM
    CertificateId:
      type: string
      format: uuid
    CertificateRef:
      type: object
      properties:
        id:
          x-go-name: ID
          $ref: "#/components/schemas/CertificateId"
        metadata:
          $ref: "#/components/schemas/ResourceMetadata"
        thumbprint:
          description: X.509 certificate SHA-1 thumbprint
          type: string
          x-go-name: CertificateThumbprint
        subjectCommonName:
          description: Common name
          type: string
        notAfter:
          description: Expiration date of the certificate
          type: string
          format: date-time
        templateId:
          $ref: "#/components/schemas/Identifier"
      required:
        - id
        - metadata
        - thumbprint
        - subjectCommonName
        - notAfter
        - templateId
    CertificateInfo:
      allOf:
        - $ref: "#/components/schemas/CertificateRef"
        - type: object
          properties:
            notBefore:
              description: Expiration date of the certificate
              type: string
              format: date-time
            usages:
              type: array
              items:
                $ref: "#/components/schemas/CertificateUsage"
            issuer:
              $ref: "#/components/schemas/CertificateIssuer"
            jwk:
              $ref: "#/components/schemas/JwkProperties"
            pem:
              type: string
            issuerCertificateId:
              $ref: "#/components/schemas/CertificateId"
          required:
            - notBefore
            - usages
            - issuer
            - issuerCertificateId
  parameters:
    ProfileTypeParameter:
      in: path
      name: profileType
      schema:
        $ref: "#/components/schemas/ProfileType"
      required: true
    ProfileIdentifierParameter:
      in: path
      name: profileId
      schema:
        $ref: "#/components/schemas/Identifier"
      required: true
    CertificateTemplateIdentifierParameter:
      in: path
      name: templateId
      schema:
        $ref: "#/components/schemas/Identifier"
      required: true
    IncludeCertificateParameter:
      in: query
      name: "includeCertificate"
      schema:
        $ref: "#/components/schemas/IncludeCertificate"
  responses:
    CertificateResponse:
      description: CertificateResponse
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CertificateInfo"
