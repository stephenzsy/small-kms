// Package smallkms provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package smallkms

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for CreateCertificateRequestKty.
const (
	RSA CreateCertificateRequestKty = "RSA"
)

// Defines values for CreateCertificateRequestSize.
const (
	N4096 CreateCertificateRequestSize = 4096
)

// CertificateSuite defines model for CertificateSuite.
type CertificateSuite struct {
	ID string `json:"id"`
}

// CreateCertificateRequest defines model for CreateCertificateRequest.
type CreateCertificateRequest struct {
	CommonName *string                       `json:"commonName,omitempty"`
	Kty        *CreateCertificateRequestKty  `json:"kty,omitempty"`
	Size       *CreateCertificateRequestSize `json:"size,omitempty"`
	Validity   string                        `json:"validity"`
}

// CreateCertificateRequestKty defines model for CreateCertificateRequest.Kty.
type CreateCertificateRequestKty string

// CreateCertificateRequestSize defines model for CreateCertificateRequest.Size.
type CreateCertificateRequestSize float32

// AdminCreateCACertificateSuiteParams defines parameters for AdminCreateCACertificateSuite.
type AdminCreateCACertificateSuiteParams struct {
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get CA Certificate Suite
	// (GET /v1/admin/ca/{id})
	AdminGetCACertificateSuite(ctx echo.Context, id string) error
	// Create CA Certificate Suite
	// (POST /v1/admin/ca/{id})
	AdminCreateCACertificateSuite(ctx echo.Context, id string, params AdminCreateCACertificateSuiteParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AdminGetCACertificateSuite converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetCACertificateSuite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminGetCACertificateSuite(ctx, id)
	return err
}

// AdminCreateCACertificateSuite converts echo context to params.
func (w *ServerInterfaceWrapper) AdminCreateCACertificateSuite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminCreateCACertificateSuiteParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminCreateCACertificateSuite(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/admin/ca/:id", wrapper.AdminGetCACertificateSuite)
	router.POST(baseURL+"/v1/admin/ca/:id", wrapper.AdminCreateCACertificateSuite)

}
